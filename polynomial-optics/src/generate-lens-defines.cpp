// build the autogenerated code from the database

#include "lenssystem.h"
#include <vector>
#include <string>
#include <map>
#include "../../fmt/include/fmt/format.h"

//json parsing
#include "../ext/json.hpp"
#include <fstream>
using json = nlohmann::json;


std::string dash_to_underscore(std::string text)
{
    std::replace(text.begin(), text.end(), '-', '_');
    return text;
}


int main(int argc, char *argv[])
{  
  std::string lens_database_path = fmt::format("{}/database/lenses.json", std::getenv("LENTIL_PATH"));
  std::ifstream in_json(lens_database_path);
  json lens_database = json::parse(in_json);


// =================================================================

  // get lens data, store in map of map
  std::map<std::string, std::map<std::string, std::vector<int>>> commercial_lens_ids;
  std::map<std::string, std::map<std::string, std::vector<int>>> free_lens_ids;

  for (auto lens = lens_database.begin(); lens != lens_database.end(); ++lens)
  {
      if (lens.value()["polynomial-optics"].empty()){
        continue;
      }

      std::vector<int> focal_length_vector = {};
      for (auto &focal_length : lens.value()["polynomial-optics"]){
        focal_length_vector.push_back(focal_length);
      }

      std::string case_lens_name = fmt::format("{}_{}_{}", dash_to_underscore(lens.value()["company"].get<std::string>()),
                                                           dash_to_underscore(lens.value()["product-name"].get<std::string>()),
                                                           lens.value()["year"].get<int>()
      );
      
      if (lens.value()["production-ready"] == true){
        if (lens.value()["commercial"] == true){
          commercial_lens_ids[case_lens_name].insert(std::make_pair(lens.key(), focal_length_vector)); 
        } else {
          free_lens_ids[case_lens_name].insert(std::make_pair(lens.key(), focal_length_vector));
        }
      }
  }


// =================================================================


  // print lenses
  fmt::print("\nList of implemented free lenses: \n");
  for (auto it : free_lens_ids) {
    std::cout << "\t" << it.first << " : #";
    std::map<std::string, std::vector<int>> &internal_map = it.second;
    for (auto iterator_map: internal_map) {
        std::vector<int> &internal_vector = iterator_map.second;
        std::cout << iterator_map.first << ": [";
        
        for (auto iterator_vector : internal_vector){
          std::cout << iterator_vector;
          if (iterator_vector != internal_vector.back()) std::cout << ", ";
          else std::cout << "]" << std::endl;
        }
    }
  }
  fmt::print("\n");


// =================================================================


  // pota_h_lenses.h path
  std::string pota_h_lenses_h_path = fmt::format("{}/../pota/src/auto_generated_lens_includes/pota_h_lenses.h", std::getenv("LENTIL_PATH")); 
  fmt::print("pota_h_lenses.h path: %s\n", pota_h_lenses_h_path);


  // open file
  FILE * pota_h_lenses_h;
  pota_h_lenses_h = fopen (pota_h_lenses_h_path.c_str(),"w");
  fprintf(pota_h_lenses_h, "// automatically generated file\n\n\n");


  // pota.h free lenses
  fprintf(pota_h_lenses_h, "#ifdef LENS_ID_FREE\n");
  for (auto it : free_lens_ids) {
    std::map<std::string, std::vector<int>> &internal_map = it.second;
    for (auto iterator_map: internal_map) {
      std::vector<int> &internal_vector = iterator_map.second;
      for (auto iterator_vector : internal_vector){
        fprintf(pota_h_lenses_h,"\t%s_%dmm,\n", it.first.c_str(), iterator_vector);
      }
    }
  }
  fprintf(pota_h_lenses_h, "#endif\n");


  // pota.h commercial lenses
  for (auto it : commercial_lens_ids) {
    std::map<std::string, std::vector<int>> &internal_map = it.second;
    for (auto iterator_map: internal_map) {
      fprintf(pota_h_lenses_h, "#ifdef LENS_ID_%s\n", iterator_map.first.c_str());
      std::vector<int> &internal_vector = iterator_map.second;
      for (auto iterator_vector : internal_vector){
        fprintf(pota_h_lenses_h, "\t%s_%dmm,\n", it.first.c_str(), iterator_vector);
      }
      fprintf(pota_h_lenses_h, "#endif\n");
    }
  }

  fclose (pota_h_lenses_h);
  printf("Written pota_lenses.h\n");



// =================================================================

  // pota_cpp_lenses.h path
  std::string pota_cpp_lenses_h_path = std::getenv("LENTIL_PATH");
  pota_cpp_lenses_h_path += "/../pota/src/auto_generated_lens_includes/pota_cpp_lenses.h";
  fmt::print("pota_cpp_lenses.h path: {}\n", pota_cpp_lenses_h_path);


  // open file
  FILE * pota_cpp_lenses_h;
  pota_cpp_lenses_h = fopen (pota_cpp_lenses_h_path.c_str(),"w");
  fprintf(pota_cpp_lenses_h, "// automatically generated file\n\n\n");


  // pota.cpp free lenses
  fprintf(pota_cpp_lenses_h, "#ifdef LENS_ID_FREE\n");
  for (auto it : free_lens_ids) {
    std::map<std::string, std::vector<int>> &internal_map = it.second;
    for (auto iterator_map: internal_map) {
      std::vector<int> &internal_vector = iterator_map.second;
      for (auto iterator_vector : internal_vector){
        fprintf(pota_cpp_lenses_h,"\t\"%s_%dmm\",\n", it.first.c_str(), iterator_vector);
      }
    }
  }
  fprintf(pota_cpp_lenses_h, "#endif\n");


  // pota.cpp commercial lenses
  for (auto it : commercial_lens_ids) {
    std::map<std::string, std::vector<int>> &internal_map = it.second;
    for (auto iterator_map: internal_map) {
      fprintf(pota_cpp_lenses_h, "#ifdef LENS_ID_%s\n", iterator_map.first.c_str());
      std::vector<int> &internal_vector = iterator_map.second;
      for (auto iterator_vector : internal_vector){
        fprintf(pota_cpp_lenses_h, "\t\"%s_%dmm\",\n", it.first.c_str(), iterator_vector);
      }
      fprintf(pota_cpp_lenses_h, "#endif\n");
    }
  }

  fclose (pota_cpp_lenses_h);
  fmt::print("Written pota_cpp_lenses.h\n");


// =================================================================


  std::vector<std::string> gencode_outputs = {"lens_constants.h", 
                                              "lt_sample_aperture.h", 
                                              "pt_evaluate_aperture_jacobian.h",
                                              "pt_evaluate_aperture.h",
                                              "pt_evaluate_jacobian.h",
                                              "pt_evaluate.h",
                                              "pt_sample_aperture.h"};

  for (auto gencode_filename : gencode_outputs){
    // gencode outputs - path
    std::string gencode_outputs_path = fmt::format("{}/../pota/src/auto_generated_lens_includes/load_{}", std::getenv("LENTIL_PATH"), gencode_filename);
    fmt::print("gencode outputs - path: {}\n", gencode_outputs_path);


    // open file
    FILE * gencode_output_file;
    gencode_output_file = fopen (gencode_outputs_path.c_str(),"w");
    fprintf(gencode_output_file, "// automatically generated file\n\n\n");


    // gencode outputs - free lenses
    fprintf(gencode_output_file, "#ifdef LENS_ID_FREE\n");
    for (auto it : free_lens_ids) {
      std::map<std::string, std::vector<int>> &internal_map = it.second;
      for (auto iterator_map: internal_map) {
        std::vector<int> &internal_vector = iterator_map.second;
        for (auto iterator_vector : internal_vector){

          std::string lens_path = std::to_string(lens_database[iterator_map.first]["year"].get<int>());
          lens_path += "-";
          lens_path += lens_database[iterator_map.first]["company"].get<std::string>();
          lens_path += "-";
          lens_path += lens_database[iterator_map.first]["product-name"].get<std::string>();

          fprintf(gencode_output_file,"\t#include \"../../../polynomial-optics/database/lenses/%s/%d/code/%s\"\n", lens_path.c_str(), iterator_vector, gencode_filename.c_str());
        }
      }
    }
    fprintf(gencode_output_file, "#endif\n");


    // gencode outputs - commercial lenses
    for (auto it : commercial_lens_ids) {
      std::map<std::string, std::vector<int>> &internal_map = it.second;
      for (auto iterator_map: internal_map) {
        fprintf(gencode_output_file, "#ifdef LENS_ID_%s\n", iterator_map.first.c_str());
        std::vector<int> &internal_vector = iterator_map.second;
        for (auto iterator_vector : internal_vector){

          std::string lens_path = fmt::format("{}-{}-{}", lens_database[iterator_map.first]["year"].get<int>(),
                                                          lens_database[iterator_map.first]["company"].get<std::string>(),
                                                          lens_database[iterator_map.first]["product-name"].get<std::string>()
          );

          fprintf(gencode_output_file,"\t#include \"../../../polynomial-optics/database/lenses/%s/%d/code/%s\"\n", lens_path.c_str(), iterator_vector, gencode_filename.c_str());
        }
        fprintf(gencode_output_file, "#endif\n");
      }
    }


    fclose (gencode_output_file);
    fmt::print("Written %s\n", gencode_filename);
  }
}
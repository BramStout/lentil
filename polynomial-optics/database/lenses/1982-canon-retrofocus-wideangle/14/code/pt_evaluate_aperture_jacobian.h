case canon__retrofocus_wideangle__1982__14mm:
{
const double dx00 =  + 0.615218  + -0.0905149 *lambda + 0.0867423 *y*dy + 0.278508 *x*dx + 0.0614983 *lens_ipow(lambda, 2) + 0.00137595 *lens_ipow(y, 2) + 0.00428725 *lens_ipow(x, 2) + 1.11093 *lens_ipow(dy, 2) + 3.81506 *lens_ipow(dx, 2) + -0.000691456 *lens_ipow(x, 2)*lambda + -0.0359572 *x*dx*lambda + -0.301572 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.000653927 *x*y*dx*dy + 0.296126 *x*lens_ipow(dx, 3)*lambda + 0.000851618 *lens_ipow(x, 3)*dx*lambda + 0.0281974 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 8.20064e-06 *lens_ipow(x, 4)*lambda + 7.07194e-06 *lens_ipow(y, 3)*dy*lambda + -3.42083e-05 *x*lens_ipow(y, 3)*dx*dy*lens_ipow(lambda, 2) + 39.2573 *lens_ipow(dx, 2)*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + 1.25249e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(lambda, 2) + 1.20478e-08 *lens_ipow(y, 6)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx01 =  + 2.78314 *dx*dy + 0.0867423 *x*dy + 0.0027519 *x*y + 0.0969911 *y*dx + -0.000326963 *lens_ipow(x, 2)*dx*dy + 2.12158e-05 *x*lens_ipow(y, 2)*dy*lambda + -5.13125e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 2) + 1.66999e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(lambda, 2) + 7.22869e-08 *x*lens_ipow(y, 5)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx02 =  + 30.6704  + -0.375113 *lambda + 2.78314 *y*dy + 0.139254 *lens_ipow(x, 2) + 77.3487 *lens_ipow(dx, 2) + 27.8055 *lens_ipow(dy, 2) + 7.63012 *x*dx + 0.0484956 *lens_ipow(y, 2) + -0.0179786 *lens_ipow(x, 2)*lambda + -0.603145 *x*dx*lens_ipow(lambda, 2) + -0.000326963 *lens_ipow(x, 2)*y*dy + 0.444188 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 0.000212904 *lens_ipow(x, 4)*lambda + 0.0187983 *lens_ipow(x, 3)*dx*lambda + -1.71042e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lens_ipow(lambda, 2) + 78.5146 *x*dx*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + 2.40956e-08 *x*lens_ipow(y, 6)*dx*lambda+0.0f;
const double dx03 =  + 2.78314 *y*dx + 0.0867423 *x*y + 55.6109 *dx*dy + 2.22185 *x*dy + -0.000326963 *lens_ipow(x, 2)*y*dx + 7.07194e-06 *x*lens_ipow(y, 3)*lambda + -1.71042e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*lens_ipow(lambda, 2) + 157.029 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx04 =  + -0.0905149 *x + -0.375113 *dx + 0.122997 *x*lambda + -0.000230485 *lens_ipow(x, 3) + -0.0179786 *lens_ipow(x, 2)*dx + -0.603145 *x*lens_ipow(dx, 2)*lambda + 0.148063 *lens_ipow(x, 2)*lens_ipow(dx, 3) + 0.000212904 *lens_ipow(x, 4)*dx + 0.00939915 *lens_ipow(x, 3)*lens_ipow(dx, 2) + 1.64013e-06 *lens_ipow(x, 5) + 7.07194e-06 *x*lens_ipow(y, 3)*dy + -3.42083e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy*lambda + 78.5146 *x*lens_ipow(dx, 2)*lens_ipow(dy, 4)*lambda + 8.34993e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*lambda + 1.20478e-08 *x*lens_ipow(y, 6)*lens_ipow(dx, 2)+0.0f;
const double dx10 =  + 2.7734 *dx*dy + 0.086057 *y*dx + 0.00271632 *x*y + 0.0967778 *x*dy + 1.92121e-09 *x*lens_ipow(y, 5) + -5.08146e-06 *lens_ipow(y, 4)*dx*dy + 1.86979e-05 *lens_ipow(x, 4)*y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 3.35148e-07 *lens_ipow(x, 5)*y*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx11 =  + 0.611816  + -0.0760021 *lambda + 1.09382 *lens_ipow(dx, 2) + 0.281326 *y*dy + 3.95291 *lens_ipow(dy, 2) + 0.086057 *x*dx + 0.0490308 *lens_ipow(lambda, 2) + 0.00135816 *lens_ipow(x, 2) + 0.00430402 *lens_ipow(y, 2) + -0.622678 *lens_ipow(dy, 2)*lambda + -0.055948 *y*dy*lambda + -0.000953547 *lens_ipow(y, 2)*lambda + 0.00185263 *lens_ipow(y, 3)*dy*lambda + 0.0858476 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 1.46184e-05 *lens_ipow(y, 4)*lambda + 9.91681 *lens_ipow(dy, 4)*lambda + 1.68175 *y*lens_ipow(dy, 3)*lambda + 0.0180349 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 4.80304e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + -2.03258e-05 *x*lens_ipow(y, 3)*dx*dy + 3.73959e-06 *lens_ipow(x, 5)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 5.5858e-08 *lens_ipow(x, 6)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx12 =  + 2.18764 *y*dx + 2.7734 *x*dy + 0.086057 *x*y + 55.5204 *dx*dy + 0.0120233 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -5.08146e-06 *x*lens_ipow(y, 4)*dy + 3.73959e-06 *lens_ipow(x, 5)*y*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx13 =  + 30.6644  + -0.372275 *lambda + 0.140663 *lens_ipow(y, 2) + 7.90582 *y*dy + 2.7734 *x*dx + 27.7602 *lens_ipow(dx, 2) + 0.0483889 *lens_ipow(x, 2) + 78.2382 *lens_ipow(dy, 2) + -1.24536 *y*dy*lambda + -0.027974 *lens_ipow(y, 2)*lambda + 0.000463158 *lens_ipow(y, 4)*lambda + 0.0572317 *lens_ipow(y, 3)*dy*lambda + 39.6672 *y*lens_ipow(dy, 3)*lambda + 2.52262 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 0.0120233 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + -5.08146e-06 *x*lens_ipow(y, 4)*dx + 7.47918e-06 *lens_ipow(x, 5)*y*dx*dy*lens_ipow(lambda, 2) + 1.11716e-07 *lens_ipow(x, 6)*y*dy*lens_ipow(lambda, 2)+0.0f;
const double dx14 =  + -0.372275 *dy + -0.0760021 *y + 0.0980616 *y*lambda + -0.622678 *y*lens_ipow(dy, 2) + -0.027974 *lens_ipow(y, 2)*dy + -0.000317849 *lens_ipow(y, 3) + 0.000463158 *lens_ipow(y, 4)*dy + 0.0286159 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 2.92368e-06 *lens_ipow(y, 5) + 9.91681 *y*lens_ipow(dy, 4) + 0.840873 *lens_ipow(y, 2)*lens_ipow(dy, 3) + 7.47918e-06 *lens_ipow(x, 5)*y*dx*lens_ipow(dy, 2)*lambda + 1.11716e-07 *lens_ipow(x, 6)*y*lens_ipow(dy, 2)*lambda+0.0f;
const double dx20 =  + -0.0329172  + -0.00246223 *lambda + 0.0016886 *y*dy + 0.00376542 *x*dx + 3.90147e-05 *lens_ipow(y, 2) + 0.000113522 *lens_ipow(x, 2) + -0.0759841 *lens_ipow(dx, 2) + -0.0524233 *lens_ipow(dy, 2)*lambda + -0.000159098 *x*y*dx*dy + 0.0521369 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -7.84348e-08 *lens_ipow(x, 4)*lambda + 7.6628e-08 *lens_ipow(x, 5)*dx + 7.28396e-09 *lens_ipow(y, 5)*dy + 6.08638e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + 1.30764e-10 *lens_ipow(y, 6) + 1.59635e-09 *lens_ipow(x, 6) + -0.116932 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + -4.74225e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + 1.34668e-11 *lens_ipow(x, 4)*lens_ipow(y, 4) + 3.47627e-07 *lens_ipow(x, 4)*y*lens_ipow(dx, 2)*dy + 3.60143e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.00944564 *lens_ipow(x, 2)*lens_ipow(dx, 6)*lambda+0.0f;
const double dx21 =  + -0.0500813 *dx*dy + 0.0016886 *x*dy + 7.80295e-05 *x*y + 0.000740545 *y*dx + -7.95488e-05 *lens_ipow(x, 2)*dx*dy + 3.64198e-08 *x*lens_ipow(y, 4)*dy + 2.43455e-10 *lens_ipow(x, 5)*y + 7.84583e-10 *x*lens_ipow(y, 5) + -3.55669e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*dy + 1.07735e-11 *lens_ipow(x, 5)*lens_ipow(y, 3) + 6.95255e-08 *lens_ipow(x, 5)*lens_ipow(dx, 2)*dy + 2.40096e-05 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx22 =  + -0.164109 *lambda + -0.0500813 *y*dy + 0.00188271 *lens_ipow(x, 2) + -9.53223 *lens_ipow(dx, 2) + -3.09699 *lens_ipow(dy, 2) + -0.151968 *x*dx + 0.000370273 *lens_ipow(y, 2) + 0.0535155 *lens_ipow(lambda, 2) + -7.95488e-05 *lens_ipow(x, 2)*y*dy + 1.27713e-08 *lens_ipow(x, 6) + -0.175398 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -1.18556e-08 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + 1.39051e-07 *lens_ipow(x, 5)*y*dx*dy + 2.40096e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 0.0188913 *lens_ipow(x, 3)*lens_ipow(dx, 5)*lambda+0.0f;
const double dx23 =  + -0.0500813 *y*dx + 0.0016886 *x*y + -6.19398 *dx*dy + -0.104847 *x*dy*lambda + -7.95488e-05 *lens_ipow(x, 2)*y*dx + 0.104274 *x*dy*lens_ipow(lambda, 3) + 7.28396e-09 *x*lens_ipow(y, 5) + -0.116932 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy*lambda + -1.18556e-08 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + 6.95255e-08 *lens_ipow(x, 5)*y*lens_ipow(dx, 2) + 2.40096e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy+0.0f;
const double dx24 =  + -0.00246223 *x + -0.164109 *dx + 0.107031 *dx*lambda + -0.0524233 *x*lens_ipow(dy, 2) + 0.156411 *x*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -1.5687e-08 *lens_ipow(x, 5) + -0.0584659 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.00314855 *lens_ipow(x, 3)*lens_ipow(dx, 6)+0.0f;
const double dx30 =  + -0.0483512 *dx*dy + 0.00182299 *y*dx + 8.01417e-05 *x*y + 0.000741048 *x*dy + 6.55857e-08 *x*lens_ipow(y, 3) + -2.29277e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + 3.50743e-05 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + 7.386e-14 *lens_ipow(x, 7)*lens_ipow(y, 3) + 2.84934e-12 *lens_ipow(x, 6)*lens_ipow(y, 3)*dx + 1.76621e-14 *lens_ipow(x, 3)*lens_ipow(y, 7)+0.0f;
const double dx31 =  + -0.0330367  + -0.00218597 *lambda + 0.00396188 *y*dy + -0.0755324 *lens_ipow(dy, 2) + 0.00182299 *x*dx + 4.00708e-05 *lens_ipow(x, 2) + 0.000126077 *lens_ipow(y, 2) + -0.0490625 *lens_ipow(dx, 2)*lambda + -3.08686e-05 *lens_ipow(y, 2)*lambda + 9.83785e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.0501246 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -0.00104183 *y*dy*lens_ipow(lambda, 3) + 2.1066e-09 *lens_ipow(y, 6) + 1.56152e-07 *lens_ipow(y, 5)*dy + -1.52851e-06 *lens_ipow(x, 3)*y*dx*dy + 2.67292e-06 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 0.000105223 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 1.98611 *lens_ipow(dx, 4)*lens_ipow(dy, 2)*lambda + 2.76975e-14 *lens_ipow(x, 8)*lens_ipow(y, 2) + 1.22115e-12 *lens_ipow(x, 7)*lens_ipow(y, 2)*dx + 3.09087e-14 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const double dx32 =  + -0.0483512 *x*dy + 0.00182299 *x*y + -5.99456 *dx*dy + -0.098125 *y*dx*lambda + 0.100249 *y*dx*lens_ipow(lambda, 3) + -7.64256e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -164.465 *dx*lens_ipow(dy, 5) + 3.50743e-05 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + 7.94442 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + 4.07049e-13 *lens_ipow(x, 7)*lens_ipow(y, 3)+0.0f;
const double dx33 =  + -0.159663 *lambda + 0.00198094 *lens_ipow(y, 2) + -0.151065 *y*dy + -0.0483512 *x*dx + -2.99728 *lens_ipow(dx, 2) + 0.000370524 *lens_ipow(x, 2) + -9.35734 *lens_ipow(dy, 2) + 0.0739363 *lens_ipow(lambda, 3) + -0.000520915 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + 2.60253e-08 *lens_ipow(y, 6) + -7.64256e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 1.06917e-06 *lens_ipow(y, 5)*dy + -411.163 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + 7.01485e-05 *x*lens_ipow(y, 3)*dx*dy + 3.97221 *y*lens_ipow(dx, 4)*dy*lambda+0.0f;
const double dx34 =  + -0.159663 *dy + -0.00218597 *y + -0.0490625 *y*lens_ipow(dx, 2) + 0.221809 *dy*lens_ipow(lambda, 2) + -1.02895e-05 *lens_ipow(y, 3) + 0.150374 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.00156275 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 2) + 1.98611 *y*lens_ipow(dx, 4)*lens_ipow(dy, 2)+0.0f;
const double dx40 =  + 0.000110675 *dx + 7.46522e-06 *x + -0.0797329 *lens_ipow(dx, 3) + -0.000106929 *x*y*dy + -5.34758e-05 *lens_ipow(y, 2)*dx + -2.01189e-06 *x*lens_ipow(y, 2) + -0.00580952 *x*lens_ipow(dx, 2) + -0.000161913 *lens_ipow(x, 2)*dx + -0.0788348 *dx*lens_ipow(dy, 2) + -2.02225e-06 *lens_ipow(x, 3) + -0.00386315 *y*dx*dy + -0.00188133 *x*lens_ipow(dy, 2)+0.0f;
const double dx41 =  + 0.000105456 *dy + 7.35585e-06 *y + -0.0794638 *lens_ipow(dy, 3) + -0.00188395 *y*lens_ipow(dx, 2) + -5.34646e-05 *lens_ipow(x, 2)*dy + -0.000106952 *x*y*dx + -2.01189e-06 *lens_ipow(x, 2)*y + -2.01818e-06 *lens_ipow(y, 3) + -0.0789576 *lens_ipow(dx, 2)*dy + -0.00578698 *y*lens_ipow(dy, 2) + -0.00386315 *x*dx*dy + -0.000161371 *lens_ipow(y, 2)*dy+0.0f;
const double dx42 =  + 0.000110675 *x + -3.61639 *lens_ipow(dx, 3) + -0.00188395 *lens_ipow(y, 2)*dx + -0.239199 *x*lens_ipow(dx, 2) + -3.59521 *dx*lens_ipow(dy, 2) + -5.34758e-05 *x*lens_ipow(y, 2) + -0.00580952 *lens_ipow(x, 2)*dx + -0.157915 *y*dx*dy + -5.39711e-05 *lens_ipow(x, 3) + -0.0788348 *x*lens_ipow(dy, 2) + -0.00386315 *x*y*dy+0.0f;
const double dx43 =  + 0.000105456 *y + -0.238391 *y*lens_ipow(dy, 2) + -3.59521 *lens_ipow(dx, 2)*dy + -5.34646e-05 *lens_ipow(x, 2)*y + -3.61675 *lens_ipow(dy, 3) + -0.0789576 *y*lens_ipow(dx, 2) + -0.00578698 *lens_ipow(y, 2)*dy + -0.15767 *x*dx*dy + -0.00386315 *x*y*dx + -0.00188133 *lens_ipow(x, 2)*dy + -5.37904e-05 *lens_ipow(y, 3)+0.0f;
const double dx44 =  + 1.7115  + -7.09927 *lambda + 10.3978 *lens_ipow(lambda, 2) + -5.24918 *lens_ipow(lambda, 3)+0.0f;
} break;

case canon__retrofocus_wideangle__1982__14mm:
{
const double dx00 =  + -1.65808  + -0.363089 *lambda + 0.0708303 *y*dy + 0.255433 *x*dx + 0.231819 *lens_ipow(lambda, 2) + 0.00364284 *lens_ipow(y, 2) + 0.0110479 *lens_ipow(x, 2) + 0.934148 *lens_ipow(dy, 2) + 2.30731 *lens_ipow(dx, 2) + -0.0120291 *x*dx*lambda + -1.54954e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.209985 *y*lens_ipow(dx, 2)*dy + -0.000408993 *lens_ipow(x, 3)*dx + -1.65302e-05 *lens_ipow(x, 4) + 0.00646073 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -3.23374e-06 *lens_ipow(y, 4) + -8.32709e-05 *lens_ipow(y, 3)*dy + 0.801988 *x*dx*lens_ipow(dy, 2)*lambda + 0.0232074 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx01 =  + 1.35431 *dx*dy + 0.0708303 *x*dy + 0.00728567 *x*y + 0.597777 *y*dx*lambda + -1.03302e-05 *lens_ipow(x, 3)*y + -0.209985 *x*lens_ipow(dx, 2)*dy + -6.80082e-05 *lens_ipow(y, 3)*dx + 0.0129215 *x*y*lens_ipow(dx, 2) + -1.2935e-05 *x*lens_ipow(y, 3) + -0.000249813 *x*lens_ipow(y, 2)*dy + -1.12418 *y*dx*lens_ipow(lambda, 2) + 0.381345 *y*lens_ipow(dx, 3) + 0.68466 *y*dx*lens_ipow(lambda, 3)+0.0f;
const double dx02 =  + 13.6643  + 1.35431 *y*dy + 0.127716 *lens_ipow(x, 2) + 69.7072 *lens_ipow(dx, 2) + 23.6367 *lens_ipow(dy, 2) + 4.61461 *x*dx + -0.00601454 *lens_ipow(x, 2)*lambda + 0.298888 *lens_ipow(y, 2)*lambda + -0.41997 *x*y*dx*dy + -0.000102248 *lens_ipow(x, 4) + -1.7002e-05 *lens_ipow(y, 4) + 0.0129215 *x*lens_ipow(y, 2)*dx + -0.56209 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + 0.572017 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.400994 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + 0.34233 *lens_ipow(y, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx03 =  + 1.35431 *y*dx + 0.0708303 *x*y + 47.2734 *dx*dy + 1.8683 *x*dy + -0.209985 *x*y*lens_ipow(dx, 2) + -8.32709e-05 *x*lens_ipow(y, 3) + 0.801988 *lens_ipow(x, 2)*dx*dy*lambda + 0.0154716 *lens_ipow(x, 3)*dy*lambda+0.0f;
const double dx04 =  + -0.363089 *x + 0.463638 *x*lambda + -0.00601454 *lens_ipow(x, 2)*dx + 0.298888 *lens_ipow(y, 2)*dx + -1.12418 *lens_ipow(y, 2)*dx*lambda + 0.400994 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2) + 0.00773579 *lens_ipow(x, 3)*lens_ipow(dy, 2) + 1.02699 *lens_ipow(y, 2)*dx*lens_ipow(lambda, 2)+0.0f;
const double dx10 =  + 1.63598 *dx*dy + 0.0732121 *y*dx + 0.00742644 *x*y + 0.106561 *x*dy + -5.38528e-05 *lens_ipow(y, 3)*dx + -1.22057e-05 *x*lens_ipow(y, 3) + -0.000215454 *lens_ipow(x, 2)*y*dx + -1.26972e-05 *lens_ipow(x, 3)*y + 0.347993 *x*lens_ipow(dy, 3) + 0.0160338 *x*y*lens_ipow(dy, 2) + 3.4566e-05 *lens_ipow(x, 4)*dx*dy*lambda + 2.90534e-13 *lens_ipow(x, 3)*lens_ipow(y, 7)+0.0f;
const double dx11 =  + -1.73789  + -0.0975007 *lambda + 1.04234 *lens_ipow(dx, 2) + 0.279374 *y*dy + 2.64583 *lens_ipow(dy, 2) + 0.0732121 *x*dx + 0.00371322 *lens_ipow(x, 2) + 0.0118135 *lens_ipow(y, 2) + -0.000161558 *x*lens_ipow(y, 2)*dx + -1.83085e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + -7.1818e-05 *lens_ipow(x, 3)*dx + -3.17431e-06 *lens_ipow(x, 4) + 0.00801688 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -4.71928e-05 *lens_ipow(y, 4)*lambda + -0.00240414 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 2) + 7.26258e-08 *lens_ipow(y, 6)*lens_ipow(lambda, 2) + 0.14859 *lens_ipow(y, 2)*lens_ipow(dx, 4)*lens_ipow(lambda, 2) + -0.000374935 *lens_ipow(y, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 5.08435e-13 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const double dx12 =  + 2.08467 *y*dx + 1.63598 *x*dy + 0.0732121 *x*y + 54.7036 *dx*dy + -5.38528e-05 *x*lens_ipow(y, 3) + -7.1818e-05 *lens_ipow(x, 3)*y + 1153.48 *lens_ipow(dx, 3)*dy*lens_ipow(lambda, 2) + 6.9132e-06 *lens_ipow(x, 5)*dy*lambda + 0.198119 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx13 =  + 13.7447  + 0.139687 *lens_ipow(y, 2) + 5.29167 *y*dy + 1.63598 *x*dx + 27.3518 *lens_ipow(dx, 2) + 0.0532805 *lens_ipow(x, 2) + 148.44 *lens_ipow(dy, 2)*lambda + 0.52199 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.0160338 *lens_ipow(x, 2)*y*dy + -3.10115 *lens_ipow(lambda, 5) + 288.371 *lens_ipow(dx, 4)*lens_ipow(lambda, 2) + -0.000601034 *lens_ipow(y, 4)*lens_ipow(lambda, 2) + 6.9132e-06 *lens_ipow(x, 5)*dx*lambda + -0.000149974 *lens_ipow(y, 5)*dy*lens_ipow(lambda, 4)+0.0f;
const double dx14 =  + -0.0975007 *y + 49.48 *lens_ipow(dy, 3) + -9.43856e-06 *lens_ipow(y, 5) + -15.5058 *dy*lens_ipow(lambda, 4) + 576.742 *lens_ipow(dx, 4)*dy*lambda + -0.00120207 *lens_ipow(y, 4)*dy*lambda + 6.9132e-06 *lens_ipow(x, 5)*dx*dy + 2.07502e-08 *lens_ipow(y, 7)*lambda + 0.0990597 *lens_ipow(y, 3)*lens_ipow(dx, 4)*lambda + -0.000299948 *lens_ipow(y, 5)*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx20 =  + -0.0252026  + 0.0117613 *lambda + -0.00155973 *x*dx + -0.00810304 *lens_ipow(lambda, 2) + -1.28879e-05 *lens_ipow(y, 2) + 0.000232306 *lens_ipow(x, 2)*lambda + -0.00373863 *y*dy*lambda + -0.00561975 *y*lens_ipow(dx, 2)*dy + -0.000448618 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + -2.25766e-07 *lens_ipow(x, 4) + -0.000446303 *y*lens_ipow(dy, 3) + 0.00690297 *y*dy*lens_ipow(lambda, 2) + -0.00420238 *y*dy*lens_ipow(lambda, 3) + 0.000278827 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + -4.79927e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + 1.65324e-06 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -7.25281e-11 *lens_ipow(x, 6)*y*dy + 1.54466e-07 *lens_ipow(x, 5)*lens_ipow(dx, 3) + -1.72873e-08 *lens_ipow(x, 6)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx21 =  + 0.00729413 *dx*dy + -2.57759e-05 *x*y + -0.000228055 *y*dx + -0.00373863 *x*dy*lambda + -0.00561975 *x*lens_ipow(dx, 2)*dy + 3.92748e-06 *lens_ipow(y, 3)*dx + -0.116022 *lens_ipow(dx, 3)*dy + 0.000134533 *lens_ipow(y, 2)*dx*dy + -0.000446303 *x*lens_ipow(dy, 3) + 0.00690297 *x*dy*lens_ipow(lambda, 2) + -0.00420238 *x*dy*lens_ipow(lambda, 3) + -1.91971e-10 *lens_ipow(x, 5)*y + -1.03612e-11 *lens_ipow(x, 7)*dy+0.0f;
const double dx22 =  + -0.392667  + -0.00721868 *lambda + 0.00729413 *y*dy + -0.000779865 *lens_ipow(x, 2) + 1.26876 *lens_ipow(dx, 2) + 0.419655 *lens_ipow(dy, 2) + -0.000114027 *lens_ipow(y, 2) + -0.0112395 *x*y*dx*dy + 9.8187e-07 *lens_ipow(y, 4) + -0.348065 *y*lens_ipow(dx, 2)*dy + 4.48443e-05 *lens_ipow(y, 3)*dy + 6.61295e-07 *lens_ipow(x, 5)*dx + 7.72332e-08 *lens_ipow(x, 6)*lens_ipow(dx, 2) + -4.93922e-09 *lens_ipow(x, 7)*dx*lens_ipow(dy, 2)+0.0f;
const double dx23 =  + 0.00729413 *y*dx + 0.83931 *dx*dy + -0.00373863 *x*y*lambda + -0.00561975 *x*y*lens_ipow(dx, 2) + -0.116022 *y*lens_ipow(dx, 3) + 4.48443e-05 *lens_ipow(y, 3)*dx + -0.00133891 *x*y*lens_ipow(dy, 2) + 0.00690297 *x*y*lens_ipow(lambda, 2) + -0.00420238 *x*y*lens_ipow(lambda, 3) + -1.03612e-11 *lens_ipow(x, 7)*y + -4.93922e-09 *lens_ipow(x, 7)*lens_ipow(dx, 2)*dy+0.0f;
const double dx24 =  + 0.0117613 *x + -0.00721868 *dx + -0.0162061 *x*lambda + 7.74353e-05 *lens_ipow(x, 3) + -0.00373863 *x*y*dy + -0.000299079 *lens_ipow(x, 3)*lambda + 0.0138059 *x*y*dy*lambda + -0.0126071 *x*y*dy*lens_ipow(lambda, 2) + 0.000278827 *lens_ipow(x, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx30 =  + 0.00803064 *dx*dy + 7.8136e-05 *x*y + -0.000934691 *x*dy + -3.41241e-06 *lens_ipow(y, 3)*dx + -2.88722e-07 *x*lens_ipow(y, 3) + -8.13535e-06 *lens_ipow(x, 2)*y*dx + -5.20697e-07 *lens_ipow(x, 3)*y + -4.84357e-06 *x*lens_ipow(y, 2)*dy + -6.02475e-08 *lens_ipow(x, 4)*y*dx + 2.01239e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -1.86938e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + -8.31961e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + 6.18768e-15 *lens_ipow(x, 3)*lens_ipow(y, 7)+0.0f;
const double dx31 =  + -0.0250603  + 0.0111308 *lambda + -0.00741492 *lens_ipow(lambda, 2) + 3.9068e-05 *lens_ipow(x, 2) + 3.64998e-05 *lens_ipow(y, 2) + -0.0089164 *lens_ipow(dx, 2)*lambda + -0.00944379 *y*dy*lambda + -1.02372e-05 *x*lens_ipow(y, 2)*dx + 0.0179462 *y*dy*lens_ipow(lambda, 2) + -4.33083e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -2.71178e-06 *lens_ipow(x, 3)*dx + -0.000142485 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -1.30174e-07 *lens_ipow(x, 4) + -2.10926e-07 *lens_ipow(y, 4) + -4.84357e-06 *lens_ipow(x, 2)*y*dy + -0.0110288 *y*dy*lens_ipow(lambda, 3) + 1.47082e-06 *lens_ipow(y, 4)*lens_ipow(dy, 2) + -1.20495e-08 *lens_ipow(x, 5)*dx + 2.01239e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + -4.67344e-07 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -4.99177e-11 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx + 1.39718e-07 *lens_ipow(y, 5)*lens_ipow(dy, 3) + 1.08284e-14 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const double dx32 =  + 0.00803064 *x*dy + 1.15247 *dx*dy + -0.0178328 *y*dx*lambda + -3.41241e-06 *x*lens_ipow(y, 3) + -2.71178e-06 *lens_ipow(x, 3)*y + -9.49898e-05 *lens_ipow(y, 3)*dx + -1.20495e-08 *lens_ipow(x, 5)*y + 2.01239e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -9.34688e-07 *lens_ipow(x, 4)*y*dx + -1.66392e-11 *lens_ipow(x, 5)*lens_ipow(y, 3)+0.0f;
const double dx33 =  + -0.396508  + 0.00803064 *x*dx + 0.576234 *lens_ipow(dx, 2) + -0.000467346 *lens_ipow(x, 2) + 1.25385 *lens_ipow(dy, 2) + -0.00472189 *lens_ipow(y, 2)*lambda + 0.00897309 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -2.42178e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.00551441 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + 5.88326e-07 *lens_ipow(y, 5)*dy + 1.00619e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + 6.98591e-08 *lens_ipow(y, 6)*lens_ipow(dy, 2)+0.0f;
const double dx34 =  + 0.0111308 *y + -0.0148298 *y*lambda + -0.0089164 *y*lens_ipow(dx, 2) + -0.00472189 *lens_ipow(y, 2)*dy + 0.0179462 *lens_ipow(y, 2)*dy*lambda + -0.0165432 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 2)+0.0f;
const double dx40 =  + -2.42293e-05 *x + -0.00175543 *dx*lambda + -0.0721319 *lens_ipow(dx, 3) + -0.0471919 *dx*lens_ipow(dy, 2) + -4.26735e-07 *lens_ipow(x, 3) + -0.00176423 *x*lens_ipow(dx, 2)*lambda + -8.50122e-07 *x*lens_ipow(y, 2)*lambda + -0.00026511 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lambda + -0.0075773 *lens_ipow(x, 2)*dx*lens_ipow(dy, 4)*lambda + -4.88032e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(lambda, 5)+0.0f;
const double dx41 =  + -3.66423e-05 *y + -0.00293391 *dy*lambda + -0.0490404 *lens_ipow(dx, 2)*dy + -4.63265e-07 *lens_ipow(y, 3)*lambda + -8.50122e-07 *lens_ipow(x, 2)*y*lambda + -0.0217375 *y*lens_ipow(dy, 4) + -1.4354 *lens_ipow(dy, 5) + -3.25355e-07 *lens_ipow(x, 3)*y*dx*lens_ipow(lambda, 5) + -0.152739 *lens_ipow(y, 2)*lens_ipow(dx, 4)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx42 =  + -0.00175543 *x*lambda + -11.7057 *lens_ipow(dx, 3) + -0.216396 *x*lens_ipow(dx, 2) + -9.75121 *dx*lens_ipow(dy, 2) + -0.0980809 *y*dx*dy + -0.0471919 *x*lens_ipow(dy, 2) + -0.00176423 *lens_ipow(x, 2)*dx*lambda + -0.00026511 *lens_ipow(x, 3)*lens_ipow(dx, 2)*lambda + -230.57 *lens_ipow(dx, 7) + -3110.04 *lens_ipow(dx, 3)*lens_ipow(dy, 4)*lambda + -0.00252577 *lens_ipow(x, 3)*lens_ipow(dy, 4)*lambda + -1.62677e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(lambda, 5) + -0.203653 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda + -3102.73 *dx*lens_ipow(dy, 8)*lambda+0.0f;
const double dx43 =  + -0.00293391 *y*lambda + -0.155027 *dy*lambda + -9.75121 *lens_ipow(dx, 2)*dy + -0.0490404 *y*lens_ipow(dx, 2) + -0.0943838 *x*dx*dy + -278.484 *lens_ipow(dy, 5) + -0.0434749 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -7.17702 *y*lens_ipow(dy, 4) + -3110.04 *lens_ipow(dx, 4)*lens_ipow(dy, 3)*lambda + -0.0101031 *lens_ipow(x, 3)*dx*lens_ipow(dy, 3)*lambda + -0.152739 *lens_ipow(y, 3)*lens_ipow(dx, 4)*lens_ipow(dy, 2)*lambda + -12410.9 *lens_ipow(dx, 2)*lens_ipow(dy, 7)*lambda+0.0f;
const double dx44 =  + 1.08028  + -3.61497 *lambda + -0.00293391 *y*dy + -0.00175543 *x*dx + -0.0775133 *lens_ipow(dy, 2) + 3.43537 *lens_ipow(lambda, 2) + -0.000882115 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -1.15816e-07 *lens_ipow(y, 4) + -4.25061e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -1.18293 *lens_ipow(lambda, 5) + -8.83701e-05 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -777.51 *lens_ipow(dx, 4)*lens_ipow(dy, 4) + -0.00252577 *lens_ipow(x, 3)*dx*lens_ipow(dy, 4) + -8.13387e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(lambda, 4) + -0.0509131 *lens_ipow(y, 3)*lens_ipow(dx, 4)*lens_ipow(dy, 3) + -1551.36 *lens_ipow(dx, 2)*lens_ipow(dy, 8)+0.0f;
} break;

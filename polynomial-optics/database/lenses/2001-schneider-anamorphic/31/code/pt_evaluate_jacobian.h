case schneider_anamorphic_2001_31mm:
{
const float dx00 =  + -1.23537  + -0.000205774 *lens_ipow(y, 2) + -0.046222 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -0.00252671 *lens_ipow(x, 3)*dx + -3.55448e-05 *lens_ipow(x, 4) + 0.00143697 *lens_ipow(x, 3)*dx*lambda + 2.40384e-05 *lens_ipow(x, 4)*lambda + 0.102008 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -4.34602e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -0.000423611 *x*lens_ipow(y, 3)*dx*dy + -8.42436e-06 *x*lens_ipow(y, 4)*dx + -0.000247223 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2) + -1.72893e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -2.39977e-07 *lens_ipow(x, 2)*lens_ipow(y, 4) + 0.128218 *lens_ipow(x, 2)*lens_ipow(dx, 4)*lambda+0.0f;
const float dx01 =  + -0.000411548 *x*y + 0.204016 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.000173841 *x*lens_ipow(y, 3)*lens_ipow(dx, 2) + -0.000635416 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -1.68487e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -0.000164815 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + -1.72893e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -3.19969e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)+0.0f;
const float dx02 =  + 31.8082  + -9.91225 *lens_ipow(dy, 2) + -46.413 *lens_ipow(dx, 2) + -0.0308147 *lens_ipow(x, 3)*dx + -0.000631676 *lens_ipow(x, 4) + 0.000359243 *lens_ipow(x, 4)*lambda + 0.204016 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -8.69204e-05 *x*lens_ipow(y, 4)*dx + -0.000211805 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -4.21218e-06 *lens_ipow(x, 2)*lens_ipow(y, 4) + 0.170957 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lambda+0.0f;
const float dx03 =  + -19.8245 *dx*dy + 0.204016 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -0.000211805 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -0.000164815 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -5.7631e-06 *lens_ipow(x, 3)*lens_ipow(y, 3)+0.0f;
const float dx04 =  + 0.000359243 *lens_ipow(x, 4)*dx + 4.80768e-06 *lens_ipow(x, 5) + 0.0427392 *lens_ipow(x, 3)*lens_ipow(dx, 4)+0.0f;
const float dx10 =  + -0.00062623 *x*y + -1.46521e-05 *lens_ipow(x, 3)*y + -0.00160438 *lens_ipow(x, 2)*y*dx*lambda + -1.68985e-06 *lens_ipow(y, 5)*dx + -0.0337409 *x*y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -6.54967e-06 *x*lens_ipow(y, 4)*dy + -1.0949e-07 *x*lens_ipow(y, 5) + 0.00891428 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2)*lambda+0.0f;
const float dx11 =  + -0.953977  + 0.0510768 *lambda + -0.000313115 *lens_ipow(x, 2) + -3.66302e-06 *lens_ipow(x, 4) + -0.000534794 *lens_ipow(x, 3)*dx*lambda + -0.166374 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -5.64586e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -1.1114e-07 *lens_ipow(y, 6) + -8.44926e-06 *x*lens_ipow(y, 4)*dx + -0.0168704 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -1.30993e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -2.73726e-07 *lens_ipow(x, 2)*lens_ipow(y, 4) + -3.22547 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + -1.75928e-05 *lens_ipow(y, 5)*dy*lambda + 0.0267428 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lambda+0.0f;
const float dx12 =  + -728.329 *dx*lens_ipow(dy, 3) + -0.000534794 *lens_ipow(x, 3)*y*lambda + -2.25834e-05 *lens_ipow(y, 5)*dx + -1.68985e-06 *x*lens_ipow(y, 5) + -0.0337409 *lens_ipow(x, 2)*y*dx*lens_ipow(lambda, 2) + 0.00891428 *x*lens_ipow(y, 3)*lens_ipow(dy, 2)*lambda+0.0f;
const float dx13 =  + 61.049  + -48.7342 *lens_ipow(dy, 2) + -1092.49 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.110916 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 2) + -3.27484e-06 *lens_ipow(x, 2)*lens_ipow(y, 4) + -4.83821 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -2.93214e-06 *lens_ipow(y, 6)*lambda + 0.0178286 *x*lens_ipow(y, 3)*dx*dy*lambda+0.0f;
const float dx14 =  + 0.0510768 *y + -0.000534794 *lens_ipow(x, 3)*y*dx + -0.110916 *lens_ipow(y, 3)*lens_ipow(dy, 2)*lambda + -0.0337409 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lambda + -4.83821 *lens_ipow(y, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -2.93214e-06 *lens_ipow(y, 6)*dy + 0.00891428 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 2)+0.0f;
const float dx20 =  + -0.0432053  + -0.0169962 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -7.76676e-06 *x*lens_ipow(y, 2)*dx + -2.51276e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -3.90317e-07 *lens_ipow(x, 4) + 4.5546e-07 *lens_ipow(x, 4)*lambda + -1.22962e-06 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -5.07996e-06 *x*lens_ipow(y, 3)*dx*dy + -1.12393e-07 *x*lens_ipow(y, 4)*dx + -2.07433e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -3.04069e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + -4.41386e-08 *lens_ipow(x, 4)*y*dy + -2.08658e-07 *lens_ipow(x, 5)*dx + -1.75784e-09 *lens_ipow(x, 6) + -0.0209669 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 3) + -9.41463e-06 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lambda+0.0f;
const float dx21 =  + -7.76676e-06 *lens_ipow(x, 2)*y*dx + -1.67518e-07 *lens_ipow(x, 3)*y + -4.26076e-05 *lens_ipow(y, 3)*lens_ipow(dx, 3) + -4.91846e-06 *x*lens_ipow(y, 3)*lens_ipow(dx, 2) + -7.61995e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -2.24786e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -2.07433e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -4.05426e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + -8.82771e-09 *lens_ipow(x, 5)*dy+0.0f;
const float dx22 =  + 0.294276  + -0.0339924 *x*dx*lens_ipow(lambda, 2) + -3.88338e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -3.19557e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -2.45923e-06 *x*lens_ipow(y, 4)*dx + -2.53998e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -5.61965e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + -3.47763e-08 *lens_ipow(x, 6) + -0.0314503 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -3.76585e-06 *lens_ipow(x, 5)*dx*lambda+0.0f;
const float dx23 =  + -2.53998e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -6.91443e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + -8.82771e-09 *lens_ipow(x, 5)*y+0.0f;
const float dx24 =  + -0.0339924 *x*lens_ipow(dx, 2)*lambda + 9.1092e-08 *lens_ipow(x, 5) + -0.0314503 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -1.88293e-06 *lens_ipow(x, 5)*lens_ipow(dx, 2)+0.0f;
const float dx30 =  + -8.12778e-05 *x*dy + 0.00132976 *x*lens_ipow(dx, 2)*dy + -2.43493e-06 *lens_ipow(x, 2)*y*dx + -4.9574e-07 *lens_ipow(y, 4)*dx*dy + -1.1358e-08 *lens_ipow(y, 5)*dx + -1.40058e-06 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + -5.36108e-08 *x*lens_ipow(y, 4)*dy + -5.94782e-10 *x*lens_ipow(y, 5) + -2.19637e-10 *lens_ipow(x, 5)*y+0.0f;
const float dx31 =  + -0.0162106  + 1.40888e-05 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -3.43997e-06 *lens_ipow(y, 3)*dy + -8.11642e-07 *lens_ipow(x, 3)*dx + -4.36507e-07 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -5.895e-10 *lens_ipow(y, 6) + -1.98296e-06 *x*lens_ipow(y, 3)*dx*dy + -5.679e-08 *x*lens_ipow(y, 4)*dx + -2.10087e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2) + -1.07222e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -1.48696e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + -3.66062e-11 *lens_ipow(x, 6) + 0.000435886 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 2.3778e-05 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 3) + -4.25384e-06 *lens_ipow(y, 4)*lens_ipow(dy, 2)*lambda + -1.28871e-07 *lens_ipow(y, 5)*dy*lambda+0.0f;
const float dx32 =  + 0.00132976 *lens_ipow(x, 2)*dx*dy + -8.11642e-07 *lens_ipow(x, 3)*y + -1.74603e-07 *lens_ipow(y, 5)*dx + -4.9574e-07 *x*lens_ipow(y, 4)*dy + -1.1358e-08 *x*lens_ipow(y, 5)+0.0f;
const float dx33 =  + -4.06389e-05 *lens_ipow(x, 2) + -8.59992e-07 *lens_ipow(y, 4) + 0.000664881 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -4.9574e-07 *x*lens_ipow(y, 4)*dx + -1.40058e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -2.68054e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + 0.000290591 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 3) + 5.9445e-06 *lens_ipow(y, 4)*lens_ipow(lambda, 3) + -1.70154e-06 *lens_ipow(y, 5)*dy*lambda + -2.14786e-08 *lens_ipow(y, 6)*lambda+0.0f;
const float dx34 =  + 9.39256e-06 *lens_ipow(y, 3)*lambda + 0.000435886 *lens_ipow(y, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 1.78335e-05 *lens_ipow(y, 4)*dy*lens_ipow(lambda, 2) + -8.50769e-07 *lens_ipow(y, 5)*lens_ipow(dy, 2) + -2.14786e-08 *lens_ipow(y, 6)*dy+0.0f;
const float dx40 =  + -0.036827 *dx*lens_ipow(dy, 2) + -0.00366526 *y*dx*dy + -0.00012353 *lens_ipow(y, 2)*dx + -0.00323762 *x*lens_ipow(dy, 2) + -0.000209254 *x*y*dy + -4.54584e-06 *x*lens_ipow(y, 2) + -3.587e-07 *lens_ipow(x, 5)*lens_ipow(dx, 2) + -1.36446e-08 *lens_ipow(x, 6)*dx + -1.26457e-10 *lens_ipow(x, 7)+0.0f;
const float dx41 =  + -0.00366673 *y*lens_ipow(dy, 2) + -0.00347438 *y*lens_ipow(dx, 2) + -0.00022037 *lens_ipow(y, 2)*dy + -0.00366526 *x*dx*dy + -0.000247059 *x*y*dx + -0.000104627 *lens_ipow(x, 2)*dy + -4.54584e-06 *lens_ipow(x, 2)*y + -2.43961e-08 *lens_ipow(y, 5) + -2.97821e-07 *lens_ipow(y, 5)*lens_ipow(dy, 2) + -8.16942e-09 *lens_ipow(y, 6)*dy+0.0f;
const float dx42 =  + -0.00347438 *lens_ipow(y, 2)*dx + -0.036827 *x*lens_ipow(dy, 2) + -0.00366526 *x*y*dy + -0.00012353 *x*lens_ipow(y, 2) + -1.19567e-07 *lens_ipow(x, 6)*dx + -1.94923e-09 *lens_ipow(x, 7)+0.0f;
const float dx43 =  + -0.00366673 *lens_ipow(y, 2)*dy + -7.34568e-05 *lens_ipow(y, 3) + -0.073654 *x*dx*dy + -0.00366526 *x*y*dx + -0.00323762 *lens_ipow(x, 2)*dy + -0.000104627 *lens_ipow(x, 2)*y + -9.92737e-08 *lens_ipow(y, 6)*dy + -1.16706e-09 *lens_ipow(y, 7)+0.0f;
const float dx44 =  + 0.360881  + -0.488335 *lambda+0.0f;
} break;

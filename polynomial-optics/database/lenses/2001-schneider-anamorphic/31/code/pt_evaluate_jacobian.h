case schneider_anamorphic_2001_31mm:
{
const float dx00 =  + -1.23082  + -0.000581031 *lens_ipow(y, 2) + 0.000584374 *lens_ipow(y, 2)*lambda + -0.00185983 *lens_ipow(x, 3)*dx + -0.512972 *x*lens_ipow(dx, 3) + -0.00384809 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -2.89721e-05 *lens_ipow(x, 4) + 0.0790358 *x*dx*lens_ipow(lambda, 2) + -0.0528975 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 1.40315e-05 *lens_ipow(x, 4)*lambda + -0.0916232 *lens_ipow(y, 2)*lens_ipow(dx, 4) + -1.12197e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -1.51295e-07 *lens_ipow(x, 2)*lens_ipow(y, 4) + -0.0114735 *x*lens_ipow(y, 2)*lens_ipow(dx, 3) + -1.37429e-05 *lens_ipow(x, 4)*y*dy*lambda + -0.000344907 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -0.00159071 *lens_ipow(x, 3)*y*dx*dy*lens_ipow(lambda, 2) + -1.83186e-07 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx + -6.35414e-06 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -1.47662e-09 *lens_ipow(x, 6)*lens_ipow(y, 2) + 9.34571e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + -0.0478911 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3) + -1.78579e-10 *lens_ipow(x, 3)*lens_ipow(y, 6)*dx+0.0f;
const float dx01 =  + -0.00116206 *x*y + -0.0147632 *y*dx + 0.00116875 *x*y*lambda + -1.36507 *dx*dy*lens_ipow(lambda, 2) + -0.183246 *x*y*lens_ipow(dx, 4) + -1.12197e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -2.01727e-07 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.0114735 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + -2.74857e-06 *lens_ipow(x, 5)*dy*lambda + -0.000229938 *lens_ipow(x, 3)*y*lens_ipow(dy, 2)*lambda + -0.000397678 *lens_ipow(x, 4)*dx*dy*lens_ipow(lambda, 2) + -6.10618e-08 *lens_ipow(x, 6)*y*dx + -2.54165e-06 *lens_ipow(x, 5)*y*lens_ipow(dx, 2) + -4.21891e-10 *lens_ipow(x, 7)*y + 9.34571e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -0.0159637 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3) + -2.67869e-10 *lens_ipow(x, 4)*lens_ipow(y, 5)*dx+0.0f;
const float dx02 =  + 31.7099  + -0.00738158 *lens_ipow(y, 2) + -49.9839 *lens_ipow(dx, 2)*lambda + -34.0465 *lens_ipow(dy, 2)*lambda + -0.000464957 *lens_ipow(x, 4) + -0.769458 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -1.36507 *y*dy*lens_ipow(lambda, 2) + 0.0395179 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + -0.035265 *lens_ipow(x, 3)*dx + -0.366493 *x*lens_ipow(y, 2)*lens_ipow(dx, 3) + -0.0172102 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.000397678 *lens_ipow(x, 4)*y*dy*lens_ipow(lambda, 2) + -3.05309e-08 *lens_ipow(x, 6)*lens_ipow(y, 2) + -2.54165e-06 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx + 6.23048e-05 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy + -0.0319274 *lens_ipow(x, 3)*y*dx*dy*lens_ipow(lambda, 3) + -4.46449e-11 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const float dx03 =  + -68.0931 *dx*dy*lambda + -1.36507 *y*dx*lens_ipow(lambda, 2) + -0.0025654 *lens_ipow(x, 3)*dy + -3.73989e-06 *lens_ipow(x, 3)*lens_ipow(y, 3) + -2.74857e-06 *lens_ipow(x, 5)*y*lambda + -0.000229938 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lambda + -0.000397678 *lens_ipow(x, 4)*y*dx*lens_ipow(lambda, 2) + 3.11524e-05 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 2) + -0.0159637 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lens_ipow(lambda, 3)+0.0f;
const float dx04 =  + -16.6613 *lens_ipow(dx, 3) + 0.000584374 *x*lens_ipow(y, 2) + -34.0465 *dx*lens_ipow(dy, 2) + -2.73014 *y*dx*dy*lambda + 0.0790358 *lens_ipow(x, 2)*dx*lambda + 2.80629e-06 *lens_ipow(x, 5) + -2.74857e-06 *lens_ipow(x, 5)*y*dy + -0.000114969 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000795356 *lens_ipow(x, 4)*y*dx*dy*lambda + -0.0478911 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2)+0.0f;
const float dx10 =  + -0.382888 *dx*dy + -1.69666e-05 *lens_ipow(x, 3)*y + -1.48053e-06 *lens_ipow(y, 5)*dx + -1.63464e-07 *x*lens_ipow(y, 5) + -8.32928e-06 *lens_ipow(x, 4)*y*dx*lambda + -1.04942e-06 *x*lens_ipow(y, 5)*lens_ipow(dx, 2) + -3.97715e-08 *lens_ipow(x, 5)*lens_ipow(y, 2)*dy + -2.35377e-06 *x*lens_ipow(y, 5)*lens_ipow(dy, 2) + -8.83004e-08 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx + -1.25651e-07 *x*lens_ipow(y, 6)*dy + 3.48151e-05 *lens_ipow(y, 5)*dx*lens_ipow(dy, 2)*lambda + 2.05037e-10 *x*lens_ipow(y, 8)*dy + -2.21321e-08 *lens_ipow(x, 2)*lens_ipow(y, 6)*dx*dy + -0.000420537 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -5.98586e-12 *lens_ipow(x, 5)*lens_ipow(y, 5)+0.0f;
const float dx11 =  + -0.968088  + 0.0658835 *lambda + 0.0445149 *y*dy*lambda + -0.00554096 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -4.24166e-06 *lens_ipow(x, 4) + -7.40267e-06 *x*lens_ipow(y, 4)*dx + -4.0866e-07 *lens_ipow(x, 2)*lens_ipow(y, 4) + -1.66586e-06 *lens_ipow(x, 5)*dx*lambda + -2.62356e-06 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 2) + -1.32572e-08 *lens_ipow(x, 6)*y*dy + -5.20514e-08 *lens_ipow(y, 7)*dy + -5.88442e-06 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dy, 2) + -1.1133e-09 *lens_ipow(y, 8) + -1.47167e-07 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx + -3.76953e-07 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy + 7.5553e-10 *lens_ipow(y, 8)*lambda + 0.000174075 *x*lens_ipow(y, 4)*dx*lens_ipow(dy, 2)*lambda + 8.20147e-10 *lens_ipow(x, 2)*lens_ipow(y, 7)*dy + -2.28585e-10 *lens_ipow(y, 9)*dy + -1.42797e-08 *lens_ipow(y, 8)*lens_ipow(dy, 2) + 4.33493e-08 *lens_ipow(y, 7)*dy*lens_ipow(lambda, 2) + -4.42642e-08 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx*dy + -0.000105134 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -4.98821e-12 *lens_ipow(x, 6)*lens_ipow(y, 4)+0.0f;
const float dx12 =  + -0.382888 *x*dy + -53.0673 *dx*dy + -0.00369398 *lens_ipow(y, 3)*dx + -1.48053e-06 *x*lens_ipow(y, 5) + -1.66586e-06 *lens_ipow(x, 5)*y*lambda + -1.04942e-06 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx + -2.94335e-08 *lens_ipow(x, 3)*lens_ipow(y, 5) + 3.48151e-05 *x*lens_ipow(y, 5)*lens_ipow(dy, 2)*lambda + -7.37736e-09 *lens_ipow(x, 3)*lens_ipow(y, 6)*dy + -0.000210269 *lens_ipow(x, 4)*y*dx*lens_ipow(lambda, 4)+0.0f;
const float dx13 =  + 61.3247  + -0.382888 *x*dx + -26.5336 *lens_ipow(dx, 2) + -74.2101 *lens_ipow(dy, 2) + 0.0222574 *lens_ipow(y, 2)*lambda + -6.62859e-09 *lens_ipow(x, 6)*lens_ipow(y, 2) + -6.50642e-09 *lens_ipow(y, 8) + -2.35377e-06 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy + -6.28255e-08 *lens_ipow(x, 2)*lens_ipow(y, 6) + 6.96301e-05 *x*lens_ipow(y, 5)*dx*dy*lambda + 1.02518e-10 *lens_ipow(x, 2)*lens_ipow(y, 8) + -2.28585e-11 *lens_ipow(y, 10) + -3.17326e-09 *lens_ipow(y, 9)*dy + 5.41866e-09 *lens_ipow(y, 8)*lens_ipow(lambda, 2) + -7.37736e-09 *lens_ipow(x, 3)*lens_ipow(y, 6)*dx+0.0f;
const float dx14 =  + 0.0658835 *y + 0.0222574 *lens_ipow(y, 2)*dy + -1.66586e-06 *lens_ipow(x, 5)*y*dx + 8.39478e-11 *lens_ipow(y, 9) + 3.48151e-05 *x*lens_ipow(y, 5)*dx*lens_ipow(dy, 2) + 1.08373e-08 *lens_ipow(y, 8)*dy*lambda + -0.000420537 *lens_ipow(x, 4)*y*lens_ipow(dx, 2)*lens_ipow(lambda, 3)+0.0f;
const float dx20 =  + -0.0435433  + 6.33704e-05 *lens_ipow(x, 2)*lambda + -6.63463e-07 *lens_ipow(x, 4) + 3.98285e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.00318347 *x*dx*lens_ipow(lambda, 3) + -2.8379e-07 *lens_ipow(x, 5)*dx + -4.89846e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + -1.34285e-07 *x*lens_ipow(y, 4)*dx + 1.78245e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda + -6.31551e-08 *lens_ipow(x, 6)*lens_ipow(dx, 2) + -3.14528e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + -3.7483e-09 *lens_ipow(y, 6)*lens_ipow(dx, 2) + -3.9223e-08 *x*lens_ipow(y, 5)*dx*dy*lambda + -1.40754e-09 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy*lambda + -1.24223e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 0.116191 *lens_ipow(dx, 2)*lens_ipow(lambda, 8) + -7.12963e-11 *lens_ipow(x, 7)*lens_ipow(y, 2)*dx + -1.78053e-06 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 4) + -2.09635e-08 *lens_ipow(x, 6)*y*lens_ipow(dx, 2)*dy + -5.02066e-09 *lens_ipow(x, 6)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -1.54813e-07 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dx, 3) + -5.38412e-09 *lens_ipow(x, 7)*lens_ipow(dx, 3) + -8.19996e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)*dx*dy + -8.74568e-12 *lens_ipow(x, 8)*y*dy + -3.91619e-13 *lens_ipow(x, 8)*lens_ipow(y, 2) + -8.48148e-10 *lens_ipow(x, 7)*y*dx*dy+0.0f;
const float dx21 =  + 7.96569e-05 *x*y*lens_ipow(dy, 2) + -6.53128e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + -2.6857e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 7.1298e-10 *lens_ipow(x, 5)*y*lambda + -1.88717e-09 *lens_ipow(x, 5)*lens_ipow(y, 2)*dy + -2.24898e-08 *x*lens_ipow(y, 5)*lens_ipow(dx, 2) + -9.80575e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy*lambda + -2.3459e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy*lambda + -4.96894e-08 *lens_ipow(x, 5)*y*lens_ipow(dy, 2)*lambda + -1.78241e-11 *lens_ipow(x, 8)*y*dx + -7.12212e-07 *lens_ipow(x, 5)*y*lens_ipow(dx, 4) + -1.32955e-09 *lens_ipow(y, 7)*lens_ipow(dx, 3) + -2.99478e-09 *lens_ipow(x, 7)*lens_ipow(dx, 2)*dy + -1.43447e-09 *lens_ipow(x, 7)*y*lens_ipow(dx, 2) + -5.16043e-08 *lens_ipow(x, 6)*y*lens_ipow(dx, 3) + -4.09998e-10 *lens_ipow(x, 6)*lens_ipow(y, 2)*dx*dy + -9.71742e-13 *lens_ipow(x, 9)*dy + -8.70265e-14 *lens_ipow(x, 9)*y + -1.06019e-10 *lens_ipow(x, 8)*dx*dy+0.0f;
const float dx22 =  + 0.291583  + 0.00159174 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + -4.72983e-08 *lens_ipow(x, 6) + -6.71426e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + -1.80443e-08 *lens_ipow(x, 7)*dx + -7.49661e-09 *x*lens_ipow(y, 6)*dx + -1.96115e-08 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy*lambda + 0.232382 *x*dx*lens_ipow(lambda, 8) + -8.91203e-12 *lens_ipow(x, 8)*lens_ipow(y, 2) + -1.42442e-06 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dx, 3) + -4.9858e-10 *lens_ipow(y, 8)*lens_ipow(dx, 2) + -5.98956e-09 *lens_ipow(x, 7)*y*dx*dy + -1.43447e-09 *lens_ipow(x, 7)*lens_ipow(y, 2)*dx + -7.74064e-08 *lens_ipow(x, 6)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -2.01905e-09 *lens_ipow(x, 8)*lens_ipow(dx, 2) + -1.36666e-10 *lens_ipow(x, 6)*lens_ipow(y, 3)*dy + -1.06019e-10 *lens_ipow(x, 8)*y*dy+0.0f;
const float dx23 =  + 7.96569e-05 *x*lens_ipow(y, 2)*dy + -6.29055e-10 *lens_ipow(x, 5)*lens_ipow(y, 3) + -1.96115e-08 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx*lambda + -4.69179e-10 *lens_ipow(x, 3)*lens_ipow(y, 5)*lambda + -4.96894e-08 *lens_ipow(x, 5)*lens_ipow(y, 2)*dy*lambda + -2.99478e-09 *lens_ipow(x, 7)*y*lens_ipow(dx, 2) + -1.36666e-10 *lens_ipow(x, 6)*lens_ipow(y, 3)*dx + -9.71742e-13 *lens_ipow(x, 9)*y + -1.06019e-10 *lens_ipow(x, 8)*y*dx+0.0f;
const float dx24 =  + 2.11235e-05 *lens_ipow(x, 3) + 0.00477521 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 2) + 3.5649e-10 *lens_ipow(x, 5)*lens_ipow(y, 2) + -1.96115e-08 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx*dy + -4.69179e-10 *lens_ipow(x, 3)*lens_ipow(y, 5)*dy + -2.48447e-08 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.929529 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 7)+0.0f;
const float dx30 =  + -7.29598e-05 *x*dy + -6.2934e-05 *x*y*lens_ipow(dy, 2) + -6.04997e-06 *lens_ipow(x, 2)*y*dx*lambda + -0.000121605 *lens_ipow(x, 2)*dx*dy*lambda + -8.60669e-09 *lens_ipow(y, 5)*dx + -2.89866e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -7.21952e-09 *lens_ipow(x, 5)*dy*lambda + -2.68358e-12 *lens_ipow(x, 7)*y + -4.91481e-12 *lens_ipow(x, 3)*lens_ipow(y, 5) + -2.04882e-09 *lens_ipow(y, 6)*dx*dy + -2.86156e-12 *x*lens_ipow(y, 7) + -8.59612e-10 *x*lens_ipow(y, 6)*dy*lambda + -9.9034e-09 *lens_ipow(x, 5)*y*lens_ipow(dx, 2)*lambda + -8.79299e-08 *x*lens_ipow(y, 5)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -2.36254e-11 *x*lens_ipow(y, 7)*lens_ipow(dx, 2) + -3.76995e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy*lens_ipow(lambda, 2) + -1.65046e-12 *lens_ipow(x, 2)*lens_ipow(y, 7)*dx + -9.18549e-13 *lens_ipow(x, 8)*y*dx + -2.19086e-06 *x*lens_ipow(y, 4)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const float dx31 =  + -0.0161792  + -0.000108848 *y*dy + -3.1467e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -2.01666e-06 *lens_ipow(x, 3)*dx*lambda + -4.70248e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 7.69058e-06 *lens_ipow(y, 2)*lens_ipow(lambda, 3) + -4.30335e-08 *x*lens_ipow(y, 4)*dx + -1.44933e-08 *lens_ipow(x, 4)*y*dy + 0.0239326 *y*lens_ipow(dy, 5)*lambda + -3.89758e-08 *lens_ipow(y, 6)*lens_ipow(dy, 2) + -3.35447e-13 *lens_ipow(x, 8) + -6.26298e-10 *lens_ipow(y, 7)*dy + -3.5147e-12 *lens_ipow(y, 8) + -6.14351e-12 *lens_ipow(x, 4)*lens_ipow(y, 4) + -1.22929e-08 *x*lens_ipow(y, 5)*dx*dy + -1.00154e-11 *lens_ipow(x, 2)*lens_ipow(y, 6) + -8.34274e-07 *lens_ipow(y, 5)*lens_ipow(dy, 3) + -2.57883e-09 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy*lambda + -1.65057e-09 *lens_ipow(x, 6)*lens_ipow(dx, 2)*lambda + -2.19825e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -8.26891e-11 *lens_ipow(x, 2)*lens_ipow(y, 6)*lens_ipow(dx, 2) + -5.0266e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx*dy*lens_ipow(lambda, 2) + -3.85107e-12 *lens_ipow(x, 3)*lens_ipow(y, 6)*dx + -1.02061e-13 *lens_ipow(x, 9)*dx + -4.38172e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const float dx32 =  + -2.01666e-06 *lens_ipow(x, 3)*y*lambda + -3.13499e-05 *lens_ipow(y, 3)*dx*lambda + -4.0535e-05 *lens_ipow(x, 3)*dy*lambda + -8.60669e-09 *x*lens_ipow(y, 5) + -2.04882e-09 *x*lens_ipow(y, 6)*dy + -3.30113e-09 *lens_ipow(x, 6)*y*dx*lambda + -2.36254e-11 *lens_ipow(x, 2)*lens_ipow(y, 7)*dx + -1.25665e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy*lens_ipow(lambda, 2) + -5.50153e-13 *lens_ipow(x, 3)*lens_ipow(y, 7) + -1.02061e-13 *lens_ipow(x, 9)*y+0.0f;
const float dx33 =  + -5.44241e-05 *lens_ipow(y, 2) + -3.64799e-05 *lens_ipow(x, 2) + -6.2934e-05 *lens_ipow(x, 2)*y*dy + -4.0535e-05 *lens_ipow(x, 3)*dx*lambda + -7.24665e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + 0.0598314 *lens_ipow(y, 2)*lens_ipow(dy, 4)*lambda + -1.20325e-09 *lens_ipow(x, 6)*lambda + -1.11359e-08 *lens_ipow(y, 7)*dy + -7.82873e-11 *lens_ipow(y, 8) + -2.04882e-09 *x*lens_ipow(y, 6)*dx + -4.17137e-07 *lens_ipow(y, 6)*lens_ipow(dy, 2) + -4.29806e-10 *lens_ipow(x, 2)*lens_ipow(y, 6)*lambda + -8.79299e-08 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy*lens_ipow(lambda, 2) + -1.25665e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*lens_ipow(lambda, 2) + -3.28629e-06 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const float dx34 =  + -2.01666e-06 *lens_ipow(x, 3)*y*dx + -1.56749e-05 *lens_ipow(y, 3)*lens_ipow(dx, 2) + 7.69058e-06 *lens_ipow(y, 3)*lens_ipow(lambda, 2) + -4.0535e-05 *lens_ipow(x, 3)*dx*dy + 0.0119663 *lens_ipow(y, 2)*lens_ipow(dy, 5) + -1.20325e-09 *lens_ipow(x, 6)*dy + -4.29806e-10 *lens_ipow(x, 2)*lens_ipow(y, 6)*dy + -1.65057e-09 *lens_ipow(x, 6)*y*lens_ipow(dx, 2) + -8.79299e-08 *lens_ipow(x, 2)*lens_ipow(y, 5)*lens_ipow(dy, 2)*lambda + -2.5133e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*dy*lambda + -2.19086e-06 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dy, 3)*lambda+0.0f;
const float dx40 =  + -0.00561686 *dx + -0.000138885 *x + -3.48015e-05 *lens_ipow(y, 2)*dx + -0.0011288 *x*lens_ipow(dx, 2) + -0.00177763 *y*dx*dy + -8.62692e-07 *lens_ipow(x, 3)*y*dy + -1.63315e-08 *x*lens_ipow(y, 4) + -4.8621e-05 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + -1.18747e-08 *lens_ipow(x, 3)*lens_ipow(y, 2) + -2.12593e-06 *x*lens_ipow(y, 3)*dy + -1.09501e-08 *lens_ipow(x, 6)*dx + -1.92677e-10 *lens_ipow(x, 3)*lens_ipow(y, 4) + -1.93744e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx + -4.81966e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy + -1.50995e-10 *lens_ipow(x, 7) + -2.57724e-07 *x*lens_ipow(y, 4)*lens_ipow(dx, 2) + -1.36315e-09 *lens_ipow(x, 7)*lens_ipow(dx, 2) + 2.34318e-13 *lens_ipow(x, 9)+0.0f;
const float dx41 =  + -0.00547707 *dy + -0.000149517 *y + -6.9603e-05 *x*y*dx + -0.00177763 *x*dx*dy + -2.15673e-07 *lens_ipow(x, 4)*dy + -3.26631e-08 *lens_ipow(x, 2)*lens_ipow(y, 3) + -4.8621e-05 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -5.93734e-09 *lens_ipow(x, 4)*y + -3.1889e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -1.92677e-10 *lens_ipow(x, 4)*lens_ipow(y, 3) + -2.58325e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx + -4.81966e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy + -3.50477e-07 *lens_ipow(y, 5)*lens_ipow(dy, 2) + -1.10742e-08 *lens_ipow(y, 6)*dy + -8.63209e-11 *lens_ipow(y, 7) + -5.15449e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)+0.0f;
const float dx42 =  + -0.00561686 *x + -0.245658 *dx + -3.48015e-05 *x*lens_ipow(y, 2) + -0.0011288 *lens_ipow(x, 2)*dx + -0.00177763 *x*y*dy + -1.5643e-09 *lens_ipow(x, 7) + -6.45812e-09 *lens_ipow(x, 3)*lens_ipow(y, 4) + -1.60655e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + -2.57724e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx + -3.40788e-10 *lens_ipow(x, 8)*dx+0.0f;
const float dx43 =  + -0.00547707 *y + -0.24221 *dy + -0.00177763 *x*y*dx + -2.15673e-07 *lens_ipow(x, 4)*y + -4.8621e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -1.06297e-06 *lens_ipow(x, 2)*lens_ipow(y, 3) + -1.60655e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx + -1.16826e-07 *lens_ipow(y, 6)*dy + -1.58202e-09 *lens_ipow(y, 7)+0.0f;
const float dx44 =  + 0.361262  + -0.489691 *lambda+0.0f;
} break;

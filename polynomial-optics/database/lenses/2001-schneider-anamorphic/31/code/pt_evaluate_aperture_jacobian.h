case schneider_anamorphic_2001_31mm:
{
const float dx00 =  + 0.608387  + 0.0455654 *lambda + -0.0180557 *y*dy + -0.0330138 *x*dx + -0.000297703 *lens_ipow(y, 2) + -0.402827 *lens_ipow(dy, 2) + -0.583709 *lens_ipow(dx, 2) + -9.69025e-06 *lens_ipow(x, 4) + -0.00154447 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.000134011 *x*lens_ipow(y, 2)*dx + -0.0137068 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -4.4888e-06 *lens_ipow(x, 5)*dx + -0.00209099 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -4.57957e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + 0.0027023 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lambda + -1.26597e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx + -5.65842e-07 *lens_ipow(x, 6)*lens_ipow(dx, 2) + -1.10845e-10 *lens_ipow(x, 6)*lens_ipow(y, 2) + -1.10409e-08 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy + -1.04367e-06 *lens_ipow(x, 5)*y*dx*dy*lambda + -1.96977e-08 *lens_ipow(x, 6)*y*dy*lambda + -6.06546e-14 *lens_ipow(x, 10)+0.0f;
const float dx01 =  + -0.632497 *dx*dy + -0.0180557 *x*dy + -0.000595407 *x*y + -0.015357 *y*dx + -0.00308894 *x*y*lens_ipow(dx, 2) + -0.000134011 *lens_ipow(x, 2)*y*dx + -6.10609e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + 0.0027023 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2)*lambda + -1.26597e-08 *lens_ipow(x, 4)*lens_ipow(y, 3)*dx + -3.16699e-11 *lens_ipow(x, 7)*y + -1.84015e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + -1.73945e-07 *lens_ipow(x, 6)*dx*dy*lambda + -2.81396e-09 *lens_ipow(x, 7)*dy*lambda+0.0f;
const float dx02 =  + 38.2347  + 1.91347 *lambda + -0.632497 *y*dy + -0.0165069 *lens_ipow(x, 2) + -66.7121 *lens_ipow(dx, 2) + -26.0661 *lens_ipow(dy, 2) + -1.16742 *x*dx + -0.00767851 *lens_ipow(y, 2) + -0.00308894 *x*lens_ipow(y, 2)*dx + -6.70053e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.00913788 *lens_ipow(x, 3)*dx + -7.48134e-07 *lens_ipow(x, 6) + -0.00156825 *lens_ipow(x, 4)*lens_ipow(dx, 2) + 0.00135115 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -3.16492e-09 *lens_ipow(x, 4)*lens_ipow(y, 4) + -1.61669e-07 *lens_ipow(x, 7)*dx + -1.73945e-07 *lens_ipow(x, 6)*y*dy*lambda+0.0f;
const float dx03 =  + -0.632497 *y*dx + -0.0180557 *x*y + -52.1322 *dx*dy + -0.805654 *x*dy + 0.0027023 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy*lambda + -3.68029e-09 *lens_ipow(x, 3)*lens_ipow(y, 5) + -1.73945e-07 *lens_ipow(x, 6)*y*dx*lambda + -2.81396e-09 *lens_ipow(x, 7)*y*lambda+0.0f;
const float dx04 =  + 0.0455654 *x + 1.91347 *dx + 0.00135115 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -1.73945e-07 *lens_ipow(x, 6)*y*dx*dy + -2.81396e-09 *lens_ipow(x, 7)*y*dy+0.0f;
const float dx10 =  + -0.000108038 *lens_ipow(x, 3)*dy + -7.7938e-06 *lens_ipow(x, 3)*y + -0.00554343 *lens_ipow(x, 2)*dx*dy + -6.81606e-07 *lens_ipow(y, 5)*dx + -2.10562e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -4.9216e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lambda + -6.95723e-06 *lens_ipow(x, 4)*y*dx*lambda + -2.01027e-10 *x*lens_ipow(y, 7) + 2.77143e-05 *x*lens_ipow(y, 4)*lens_ipow(dx, 2)*dy*lambda + 1.09746e-10 *x*lens_ipow(y, 7)*lambda + 4.87429e-05 *lens_ipow(x, 4)*y*dx*lens_ipow(dy, 2)*lambda + -3.65261e-11 *x*lens_ipow(y, 8)*dy + -3.0472e-11 *lens_ipow(x, 2)*lens_ipow(y, 7)*dx + -1.46311e-06 *lens_ipow(x, 5)*y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 4.84324e-08 *lens_ipow(y, 7)*dx*lens_ipow(dy, 2)+0.0f;
const float dx11 =  + 0.600935  + 0.044445 *lambda + -0.0896367 *lens_ipow(dx, 2)*lambda + -0.000836974 *lens_ipow(y, 3)*dy + -1.94845e-06 *lens_ipow(x, 4) + -8.22508e-06 *lens_ipow(y, 4) + -0.0291831 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.0836605 *lens_ipow(y, 2)*lens_ipow(dy, 4) + -6.95911e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -3.40803e-06 *x*lens_ipow(y, 4)*dx + -1.05281e-06 *lens_ipow(x, 4)*y*dy + -3.6912e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda + -1.39145e-06 *lens_ipow(x, 5)*dx*lambda + -7.03594e-10 *lens_ipow(x, 2)*lens_ipow(y, 6) + -1.95029e-05 *lens_ipow(y, 5)*lens_ipow(dx, 2)*dy + 5.54287e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy*lambda + 3.84112e-10 *lens_ipow(x, 2)*lens_ipow(y, 6)*lambda + 9.74859e-06 *lens_ipow(x, 5)*dx*lens_ipow(dy, 2)*lambda + -1.46104e-10 *lens_ipow(x, 2)*lens_ipow(y, 7)*dy + -7.11014e-11 *lens_ipow(x, 3)*lens_ipow(y, 6)*dx + -2.43852e-07 *lens_ipow(x, 6)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 3.39026e-07 *x*lens_ipow(y, 6)*dx*lens_ipow(dy, 2)+0.0f;
const float dx12 =  + -28.89 *dx*dy + -0.179273 *y*dx*lambda + -0.00184781 *lens_ipow(x, 3)*dy + -2.78364e-05 *lens_ipow(y, 5)*dx + -6.81606e-07 *x*lens_ipow(y, 5) + -1.39145e-06 *lens_ipow(x, 5)*y*lambda + -6.50097e-06 *lens_ipow(y, 6)*dx*dy + 2.77143e-05 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx*dy*lambda + 9.74859e-06 *lens_ipow(x, 5)*y*lens_ipow(dy, 2)*lambda + -1.01573e-11 *lens_ipow(x, 3)*lens_ipow(y, 7) + -4.87704e-07 *lens_ipow(x, 6)*y*dx*lens_ipow(lambda, 2) + 4.84324e-08 *x*lens_ipow(y, 7)*lens_ipow(dy, 2)+0.0f;
const float dx13 =  + 37.8097  + 1.90326 *lambda + -14.445 *lens_ipow(dx, 2) + -42.6669 *lens_ipow(dy, 2) + -0.000209244 *lens_ipow(y, 4) + -2.70094e-05 *lens_ipow(x, 4) + -0.00184781 *lens_ipow(x, 3)*dx + -0.0194554 *lens_ipow(y, 3)*dy + 0.111547 *lens_ipow(y, 3)*lens_ipow(dy, 3) + -5.26405e-07 *lens_ipow(x, 4)*lens_ipow(y, 2) + -3.25049e-06 *lens_ipow(y, 6)*lens_ipow(dx, 2) + 1.38572e-05 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 2)*lambda + 1.94972e-05 *lens_ipow(x, 5)*y*dx*dy*lambda + -1.8263e-11 *lens_ipow(x, 2)*lens_ipow(y, 8) + 9.68647e-08 *x*lens_ipow(y, 7)*dx*dy+0.0f;
const float dx14 =  + 1.90326 *dy + 0.044445 *y + -0.0896367 *y*lens_ipow(dx, 2) + -1.2304e-08 *lens_ipow(x, 4)*lens_ipow(y, 3) + -1.39145e-06 *lens_ipow(x, 5)*y*dx + 1.38572e-05 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 2)*dy + 5.48732e-11 *lens_ipow(x, 2)*lens_ipow(y, 7) + 9.74859e-06 *lens_ipow(x, 5)*y*dx*lens_ipow(dy, 2) + -4.87704e-07 *lens_ipow(x, 6)*y*lens_ipow(dx, 2)*lambda+0.0f;
const float dx20 =  + -0.023376  + 0.00256457 *lambda + -2.80098e-05 *lens_ipow(x, 2) + -0.000379342 *y*dy*lambda + 0.0126976 *y*lens_ipow(dx, 2)*dy + -1.2061e-07 *lens_ipow(y, 4) + -0.00316022 *x*dx*lens_ipow(lambda, 2) + -0.132402 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -0.0292156 *x*dx*lens_ipow(dy, 2)*lambda + -0.000940887 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -2.24481e-08 *lens_ipow(y, 5)*dy + -2.00142e-07 *lens_ipow(x, 4)*y*dy + -4.42402e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + -3.31079e-08 *x*lens_ipow(y, 4)*dx + -2.15416e-09 *lens_ipow(x, 6) + -6.44159e-07 *lens_ipow(x, 5)*dx*lambda + -9.40933e-10 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx + -6.29527e-05 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.02239 *lens_ipow(x, 2)*lens_ipow(dx, 4)*lens_ipow(lambda, 3) + -0.00252807 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lens_ipow(lambda, 3) + -1.58582e-09 *lens_ipow(x, 6)*lens_ipow(lambda, 3) + -1.73834e-10 *lens_ipow(x, 7)*y*dx*dy+0.0f;
const float dx21 =  + -0.000379342 *x*dy*lambda + 0.0126976 *x*lens_ipow(dx, 2)*dy + -4.82438e-07 *x*lens_ipow(y, 3) + -5.30811e-08 *lens_ipow(y, 5)*dx + -1.1224e-07 *x*lens_ipow(y, 4)*dy + -4.00284e-08 *lens_ipow(x, 5)*dy + -1.76961e-09 *lens_ipow(x, 5)*y + -6.62157e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 1.12291 *lens_ipow(dx, 5)*dy + -1.69512e-08 *lens_ipow(y, 6)*dx*dy + -3.13644e-10 *lens_ipow(x, 6)*y*dx + -2.17293e-11 *lens_ipow(x, 8)*dx*dy+0.0f;
const float dx22 =  + 0.217845  + 0.0523111 *lens_ipow(lambda, 2) + 0.0253952 *x*y*dx*dy + -4.82406 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.00158011 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + -0.264804 *x*dx*lens_ipow(lambda, 3) + -0.0146078 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -8.84684e-09 *lens_ipow(y, 6) + -1.65539e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + 5.61457 *y*lens_ipow(dx, 4)*dy + -1.0736e-07 *lens_ipow(x, 6)*lambda + -2.42159e-09 *lens_ipow(y, 7)*dy + -1.56822e-10 *lens_ipow(x, 6)*lens_ipow(y, 2) + -2.51811e-05 *lens_ipow(x, 5)*dx*lens_ipow(lambda, 2) + -0.0298534 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lens_ipow(lambda, 3) + -0.00189605 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + -2.17293e-11 *lens_ipow(x, 8)*y*dy+0.0f;
const float dx23 =  + -0.000379342 *x*y*lambda + 0.0126976 *x*y*lens_ipow(dx, 2) + -0.0292156 *lens_ipow(x, 2)*dx*dy*lambda + -0.000627258 *lens_ipow(x, 3)*dy*lambda + -2.24481e-08 *x*lens_ipow(y, 5) + -4.00284e-08 *lens_ipow(x, 5)*y + 1.12291 *y*lens_ipow(dx, 5) + -2.42159e-09 *lens_ipow(y, 7)*dx + -2.17293e-11 *lens_ipow(x, 8)*y*dx+0.0f;
const float dx24 =  + 0.00256457 *x + 0.104622 *dx*lambda + -0.000379342 *x*y*dy + -3.21604 *lens_ipow(dx, 3)*lambda + -0.00316022 *lens_ipow(x, 2)*dx*lambda + -0.397206 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -0.0146078 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2) + -0.000313629 *lens_ipow(x, 3)*lens_ipow(dy, 2) + -1.0736e-07 *lens_ipow(x, 6)*dx + -2.51811e-05 *lens_ipow(x, 5)*lens_ipow(dx, 2)*lambda + -0.02239 *lens_ipow(x, 3)*lens_ipow(dx, 4)*lens_ipow(lambda, 2) + -0.00189605 *lens_ipow(x, 4)*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -6.79637e-10 *lens_ipow(x, 7)*lens_ipow(lambda, 2)+0.0f;
const float dx30 =  + -1.215e-05 *lens_ipow(y, 3)*dx + -4.53893e-07 *x*lens_ipow(y, 3) + -3.56666e-07 *lens_ipow(x, 3)*y + -5.59144e-05 *x*lens_ipow(y, 2)*dy*lambda + -0.0013179 *lens_ipow(y, 2)*dx*dy*lambda + -0.0167923 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -0.00221693 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -5.02506e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lambda + -3.88983e-07 *lens_ipow(x, 4)*y*dx*lambda + -1.11879e-06 *lens_ipow(x, 5)*lens_ipow(dy, 3) + -0.0608653 *y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -0.000111398 *lens_ipow(x, 4)*dx*lens_ipow(dy, 3)*lambda + 1.45063e-09 *lens_ipow(x, 6)*y*dx*lens_ipow(lambda, 2)+0.0f;
const float dx31 =  + -0.0227155  + 0.00169747 *lambda + -0.0197045 *lens_ipow(dy, 2) + -2.87419e-05 *lens_ipow(y, 2) + -4.57578e-05 *lens_ipow(y, 3)*dy + -3.64499e-05 *x*lens_ipow(y, 2)*dx + -0.0397342 *y*lens_ipow(dy, 3) + -0.0250128 *y*lens_ipow(dx, 2)*dy + -6.8084e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.201647 *lens_ipow(dy, 4) + -0.000687786 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -8.91664e-08 *lens_ipow(x, 4) + -0.00203509 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -5.59144e-05 *lens_ipow(x, 2)*y*dy*lambda + -0.0026358 *x*y*dx*dy*lambda + -2.55965e-09 *lens_ipow(y, 6) + -0.00110847 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -1.25627e-06 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lambda + -7.77965e-08 *lens_ipow(x, 5)*dx*lambda + -0.0608653 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -1.25582e-09 *lens_ipow(y, 7)*dy*lambda + 2.07232e-10 *lens_ipow(x, 7)*dx*lens_ipow(lambda, 2) + -8.12248e-08 *lens_ipow(y, 6)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const float dx32 =  + -1.215e-05 *x*lens_ipow(y, 3) + -0.0250128 *lens_ipow(y, 2)*dx*dy + -0.000458524 *lens_ipow(y, 3)*dx + -0.0013179 *x*lens_ipow(y, 2)*dy*lambda + -2.51253e-06 *lens_ipow(x, 4)*y*dx*lambda + -7.77965e-08 *lens_ipow(x, 5)*y*lambda + -0.0608653 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -2.22795e-05 *lens_ipow(x, 5)*lens_ipow(dy, 3)*lambda + 2.07232e-10 *lens_ipow(x, 7)*y*lens_ipow(lambda, 2)+0.0f;
const float dx33 =  + 0.234184  + -0.0394091 *y*dy + -1.49442 *lens_ipow(dy, 2) + -1.14394e-05 *lens_ipow(y, 4) + -0.0596013 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.0125064 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.806589 *y*lens_ipow(dy, 3) + -0.00135673 *lens_ipow(y, 3)*dy + -2.79572e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -0.0013179 *x*lens_ipow(y, 2)*dx*lambda + -0.0251885 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.00221693 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 2) + -5.59396e-07 *lens_ipow(x, 6)*lens_ipow(dy, 2) + -0.121731 *x*y*dx*dy*lens_ipow(lambda, 4) + -1.56977e-10 *lens_ipow(y, 8)*lambda + -6.68386e-05 *lens_ipow(x, 5)*dx*lens_ipow(dy, 2)*lambda + -2.32071e-08 *lens_ipow(y, 7)*dy*lens_ipow(lambda, 2)+0.0f;
const float dx34 =  + 0.00169747 *y + -2.79572e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -0.0013179 *x*lens_ipow(y, 2)*dx*dy + -0.0167923 *lens_ipow(x, 2)*lens_ipow(dy, 3)*lambda + -0.00221693 *lens_ipow(x, 2)*y*lens_ipow(dy, 2)*lambda + -1.25627e-06 *lens_ipow(x, 4)*y*lens_ipow(dx, 2) + -7.77965e-08 *lens_ipow(x, 5)*y*dx + -0.243461 *x*y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -1.56977e-10 *lens_ipow(y, 8)*dy + -2.22795e-05 *lens_ipow(x, 5)*dx*lens_ipow(dy, 3) + 4.14464e-10 *lens_ipow(x, 7)*y*dx*lambda + -2.32071e-08 *lens_ipow(y, 7)*lens_ipow(dy, 2)*lambda+0.0f;
const float dx40 =  + -0.000561436 *x*y*dy + -0.000289712 *lens_ipow(y, 2)*dx + -9.16457e-06 *x*lens_ipow(y, 2) + -0.308464 *dx*lens_ipow(dy, 2) + -0.0176889 *y*dx*dy + -0.00907805 *x*lens_ipow(dy, 2) + -5.33085e-08 *lens_ipow(x, 5) + -5.38602e-06 *lens_ipow(x, 4)*dx + -1.35341e-08 *lens_ipow(x, 6)*dx + -2.25291e-06 *lens_ipow(x, 5)*lens_ipow(dx, 2) + -2.22855e-07 *lens_ipow(x, 6)*lens_ipow(dx, 3)+0.0f;
const float dx41 =  + 0.00311549 *dy + -0.219356 *lens_ipow(dy, 3) + -0.00920896 *y*lens_ipow(dx, 2) + -0.000280718 *lens_ipow(x, 2)*dy + -0.000579424 *x*y*dx + -9.16457e-06 *lens_ipow(x, 2)*y + -0.290599 *lens_ipow(dx, 2)*dy + -0.0174395 *y*lens_ipow(dy, 2) + -0.0176889 *x*dx*dy + -0.00051223 *lens_ipow(y, 2)*dy + -5.57347e-08 *lens_ipow(y, 5) + -1.31644e-06 *lens_ipow(y, 5)*lens_ipow(dy, 2) + -3.59103e-08 *lens_ipow(y, 6)*dy + 4.68284e-06 *lens_ipow(y, 5)*lens_ipow(dy, 4) + 4.12041e-11 *lens_ipow(y, 8)*dy+0.0f;
const float dx42 =  + -0.162537 *dx + -0.00920896 *lens_ipow(y, 2)*dx + -11.3708 *dx*lens_ipow(dy, 2) + -0.000289712 *x*lens_ipow(y, 2) + -0.581198 *y*dx*dy + -0.308464 *x*lens_ipow(dy, 2) + -0.0176889 *x*y*dy + -1.0772e-06 *lens_ipow(x, 5) + -1.93345e-09 *lens_ipow(x, 7) + -7.5097e-07 *lens_ipow(x, 6)*dx + -9.55091e-08 *lens_ipow(x, 7)*lens_ipow(dx, 2)+0.0f;
const float dx43 =  + 0.00311549 *y + -0.658069 *y*lens_ipow(dy, 2) + -11.3708 *lens_ipow(dx, 2)*dy + -0.000280718 *lens_ipow(x, 2)*y + -8.63017 *lens_ipow(dy, 3) + -0.290599 *y*lens_ipow(dx, 2) + -0.0174395 *lens_ipow(y, 2)*dy + -0.616929 *x*dx*dy + -0.0176889 *x*y*dx + -0.00907805 *lens_ipow(x, 2)*dy + -0.000170743 *lens_ipow(y, 3) + -4.38812e-07 *lens_ipow(y, 6)*dy + -5.13004e-09 *lens_ipow(y, 7) + 3.1219e-06 *lens_ipow(y, 6)*lens_ipow(dy, 3) + 4.57823e-12 *lens_ipow(y, 9)+0.0f;
const float dx44 =  + 0.310193  + -0.424732 *lambda+0.0f;
} break;

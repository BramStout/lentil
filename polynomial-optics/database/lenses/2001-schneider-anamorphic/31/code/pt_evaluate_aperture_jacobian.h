case schneider_anamorphic_2001_31mm:
{
const float dx00 =  + 0.623429  + -0.000215689 *lens_ipow(x, 2) + -1.59481e-06 *lens_ipow(y, 4) + -0.00363608 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.0029953 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -2.24857e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -0.00025212 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -6.19285e-08 *lens_ipow(x, 4)*lens_ipow(y, 2) + -6.12171e-06 *lens_ipow(x, 5)*dx + -4.51433e-08 *lens_ipow(x, 6) + -6.40073e-07 *lens_ipow(y, 5)*dy*lambda + 0.00556099 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy*lambda + -4.93485e-06 *lens_ipow(x, 4)*y*dy*lambda+0.0f;
const float dx01 =  + -7.87573e-05 *lens_ipow(y, 3)*dx + -6.37924e-06 *x*lens_ipow(y, 3) + 0.500376 *y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -1.12428e-06 *lens_ipow(x, 4)*y*dx + -2.47714e-08 *lens_ipow(x, 5)*y + -3.20036e-06 *x*lens_ipow(y, 4)*dy*lambda + 0.00185366 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy*lambda + -9.86971e-07 *lens_ipow(x, 5)*dy*lambda+0.0f;
const float dx02 =  + 38.6869  + -15.5632 *lens_ipow(dy, 2) + -30.7948 *lens_ipow(dx, 2) + -1.96893e-05 *lens_ipow(y, 4) + 0.250188 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.00224648 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -5.62142e-07 *lens_ipow(x, 4)*lens_ipow(y, 2) + -0.000100848 *lens_ipow(x, 5)*dx + -1.02029e-06 *lens_ipow(x, 6) + 0.00370733 *lens_ipow(x, 3)*y*dx*dy*lambda+0.0f;
const float dx03 =  + -31.1265 *dx*dy + -0.00242406 *lens_ipow(x, 3)*dy + 0.500376 *lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 2) + -6.40073e-07 *x*lens_ipow(y, 5)*lambda + 0.00185366 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lambda + -9.86971e-07 *lens_ipow(x, 5)*y*lambda+0.0f;
const float dx04 =  + 0.500376 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lambda + -6.40073e-07 *x*lens_ipow(y, 5)*dy + 0.00185366 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*dy + -9.86971e-07 *lens_ipow(x, 5)*y*dy+0.0f;
const float dx10 =  + -6.58962e-06 *lens_ipow(x, 3)*y + 3.92133e-05 *lens_ipow(y, 4)*dx*dy + -1.94843e-08 *x*lens_ipow(y, 5) + -2.19037e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -1.55128e-06 *lens_ipow(x, 4)*y*dx + 0.00476083 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2)*lambda + -6.4367e-07 *lens_ipow(y, 5)*dx*lambda+0.0f;
const float dx11 =  + 0.599597  + 0.0442879 *lambda + -0.000272224 *lens_ipow(y, 2) + -1.6474e-06 *lens_ipow(x, 4) + -0.000105462 *lens_ipow(y, 4)*lens_ipow(dy, 2) + -3.18784e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -4.33431e-06 *lens_ipow(y, 5)*dy + -3.74577e-08 *lens_ipow(y, 6) + 0.000156853 *x*lens_ipow(y, 3)*dx*dy + -4.87107e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + -1.09519e-06 *lens_ipow(x, 4)*y*dy + -3.10257e-07 *lens_ipow(x, 5)*dx + 0.0142825 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lambda + -3.21835e-06 *x*lens_ipow(y, 4)*dx*lambda+0.0f;
const float dx12 =  + -434.165 *dx*lens_ipow(dy, 3) + -1.27514e-05 *lens_ipow(y, 5)*dx + 3.92133e-05 *x*lens_ipow(y, 4)*dy + -3.10257e-07 *lens_ipow(x, 5)*y + 0.00476083 *x*lens_ipow(y, 3)*lens_ipow(dy, 2)*lambda + -6.4367e-07 *x*lens_ipow(y, 5)*lambda+0.0f;
const float dx13 =  + 37.2224  + 1.83247 *lambda + -293.492 *lens_ipow(dy, 4) + -651.247 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -4.21849e-05 *lens_ipow(y, 5)*dy + -7.22385e-07 *lens_ipow(y, 6) + 3.92133e-05 *x*lens_ipow(y, 4)*dx + -5.47593e-07 *lens_ipow(x, 4)*lens_ipow(y, 2) + 0.00952165 *x*lens_ipow(y, 3)*dx*dy*lambda+0.0f;
const float dx14 =  + 1.83247 *dy + 0.0442879 *y + 0.00476083 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -6.4367e-07 *x*lens_ipow(y, 5)*dx+0.0f;
const float dx20 =  + -0.0219672  + -3.78391e-05 *lens_ipow(x, 2) + -1.269e-07 *lens_ipow(y, 4) + -9.86077e-06 *lens_ipow(x, 3)*dx + 0.0471803 *y*lens_ipow(dx, 2)*dy*lambda + 0.00177127 *x*y*dx*dy*lambda + -7.71641e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -2.38829e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + -1.39597e-09 *lens_ipow(x, 6) + -5.47469e-08 *lens_ipow(y, 5)*dy*lambda + -8.37846e-06 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lambda + -2.31272e-07 *lens_ipow(x, 5)*dx*lambda+0.0f;
const float dx21 =  + 0.000538662 *y*dx + -1.50344e-05 *lens_ipow(y, 3)*dx + -5.07602e-07 *x*lens_ipow(y, 3) + 0.5445 *lens_ipow(dx, 3)*dy*lambda + 0.0471803 *x*lens_ipow(dx, 2)*dy*lambda + 0.000885637 *lens_ipow(x, 2)*dx*dy*lambda + -3.85821e-08 *lens_ipow(x, 4)*y*dx + -9.55317e-10 *lens_ipow(x, 5)*y + -7.84486e-06 *lens_ipow(y, 4)*dx*dy*lambda + -2.73735e-07 *x*lens_ipow(y, 4)*dy*lambda+0.0f;
const float dx22 =  + 0.219524  + 0.000269331 *lens_ipow(y, 2) + -3.75861e-06 *lens_ipow(y, 4) + -2.46519e-06 *lens_ipow(x, 4) + 1.6335 *y*lens_ipow(dx, 2)*dy*lambda + 0.0943606 *x*y*dx*dy*lambda + 0.000885637 *lens_ipow(x, 2)*y*dy*lambda + -1.9291e-08 *lens_ipow(x, 4)*lens_ipow(y, 2) + -23.4807 *lens_ipow(dx, 4)*lens_ipow(lambda, 3) + -1.56897e-06 *lens_ipow(y, 5)*dy*lambda + -3.35138e-06 *lens_ipow(x, 5)*dx*lambda + -3.85454e-08 *lens_ipow(x, 6)*lambda+0.0f;
const float dx23 =  + 0.5445 *y*lens_ipow(dx, 3)*lambda + 0.0471803 *x*y*lens_ipow(dx, 2)*lambda + 0.000885637 *lens_ipow(x, 2)*y*dx*lambda + -1.56897e-06 *lens_ipow(y, 5)*dx*lambda + -5.47469e-08 *x*lens_ipow(y, 5)*lambda+0.0f;
const float dx24 =  + 0.5445 *y*lens_ipow(dx, 3)*dy + 0.0471803 *x*y*lens_ipow(dx, 2)*dy + 0.000885637 *lens_ipow(x, 2)*y*dx*dy + -14.0884 *lens_ipow(dx, 5)*lens_ipow(lambda, 2) + -1.56897e-06 *lens_ipow(y, 5)*dx*dy + -5.47469e-08 *x*lens_ipow(y, 5)*dy + -1.67569e-06 *lens_ipow(x, 5)*lens_ipow(dx, 2) + -3.85454e-08 *lens_ipow(x, 6)*dx+0.0f;
const float dx30 =  + -0.00610008 *x*lens_ipow(dy, 3) + -2.91736e-07 *x*lens_ipow(y, 3) + -3.31593e-07 *lens_ipow(x, 3)*y + 0.0269015 *y*dx*lens_ipow(dy, 2)*lambda + -1.26265e-05 *lens_ipow(y, 3)*dx*lambda + -1.40895e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -6.5542e-08 *lens_ipow(x, 4)*y*dx+0.0f;
const float dx31 =  + -0.0236691  + 0.00281601 *lambda + -0.026078 *lens_ipow(dy, 2)*lambda + -0.0175753 *y*lens_ipow(dy, 3) + -0.00177408 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -5.4249e-05 *lens_ipow(y, 3)*dy + -5.78879e-07 *lens_ipow(y, 4) + -4.37604e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -8.28982e-08 *lens_ipow(x, 4) + 0.0269015 *x*dx*lens_ipow(dy, 2)*lambda + -3.78794e-05 *x*lens_ipow(y, 2)*dx*lambda + 0.975691 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.00123688 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -7.04474e-08 *lens_ipow(x, 4)*y*dy + -1.31084e-08 *lens_ipow(x, 5)*dx+0.0f;
const float dx32 =  + 0.0269015 *x*y*lens_ipow(dy, 2)*lambda + -1.26265e-05 *x*lens_ipow(y, 3)*lambda + 1.95138 *y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.000824587 *lens_ipow(y, 3)*dx*lens_ipow(lambda, 2) + -1.31084e-08 *lens_ipow(x, 5)*y+0.0f;
const float dx33 =  + 0.227531  + -0.797097 *lens_ipow(dy, 2) + -0.052156 *y*dy*lambda + -0.0263629 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.00118272 *lens_ipow(y, 3)*dy + -1.35623e-05 *lens_ipow(y, 4) + -0.00915011 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.0538029 *x*y*dx*dy*lambda + 1.95138 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -3.52237e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)+0.0f;
const float dx34 =  + 0.00281601 *y + -0.026078 *y*lens_ipow(dy, 2) + 0.0269015 *x*y*dx*lens_ipow(dy, 2) + -1.26265e-05 *x*lens_ipow(y, 3)*dx + 1.95138 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.000824587 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lambda+0.0f;
const float dx40 =  + -0.000171665 *lens_ipow(y, 2)*dx + -0.00278012 *x*lens_ipow(dy, 2) + -6.42702e-06 *x*lens_ipow(y, 2) + -6.47114e-06 *x*lens_ipow(y, 3)*dy + -3.29481e-08 *x*lens_ipow(y, 4) + -1.1076e-06 *x*lens_ipow(y, 4)*lens_ipow(dy, 2) + -1.61916e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx*dy + -1.26474e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx + -5.331e-07 *lens_ipow(x, 5)*lens_ipow(dx, 2) + -7.75593e-09 *lens_ipow(x, 5)*y*dy + -2.28078e-08 *lens_ipow(x, 6)*dx + -2.1525e-10 *lens_ipow(x, 7)+0.0f;
const float dx41 =  + -0.00557534 *y*lens_ipow(dx, 2) + -0.00034333 *x*y*dx + -6.42702e-06 *lens_ipow(x, 2)*y + -9.7067e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -6.58962e-08 *lens_ipow(x, 2)*lens_ipow(y, 3) + -1.13119e-08 *lens_ipow(y, 6)*dy + -1.44878e-10 *lens_ipow(y, 7) + -2.2152e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dy, 2) + -1.61916e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy + -1.68631e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx + -1.29266e-09 *lens_ipow(x, 6)*dy+0.0f;
const float dx42 =  + -0.00557534 *lens_ipow(y, 2)*dx + -0.000171665 *x*lens_ipow(y, 2) + -5.39721e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dy + -4.21579e-09 *lens_ipow(x, 3)*lens_ipow(y, 4) + -1.777e-07 *lens_ipow(x, 6)*dx + -3.25826e-09 *lens_ipow(x, 7)+0.0f;
const float dx43 =  + -0.00278012 *lens_ipow(x, 2)*dy + -3.23557e-06 *lens_ipow(x, 2)*lens_ipow(y, 3) + -1.61599e-09 *lens_ipow(y, 7) + -1.1076e-06 *lens_ipow(x, 2)*lens_ipow(y, 4)*dy + -5.39721e-07 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx + -1.29266e-09 *lens_ipow(x, 6)*y+0.0f;
const float dx44 =  + 0.306179  + -0.415263 *lambda+0.0f;
} break;

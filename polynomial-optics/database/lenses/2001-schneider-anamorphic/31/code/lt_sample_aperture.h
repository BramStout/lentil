case schneider_anamorphic_2001_31mm:
{
//input: scene_[x,y,z] - point in scene, ap_[x,y] - point on aperture
//output: [x,y,dx,dy] point and direction on sensor
std::vector<float> view =
{
  scene_x,
  scene_y,
  scene_z + camera->lens_outer_pupil_curvature_radius
};
raytrace_normalise(view);
int error = 0;
if(1 || view[2] >= camera->lens_field_of_view)
{
  const float eps = 1e-8;
  float sqr_err = 1e30, sqr_ap_err = 1e30;
  float prev_sqr_err = 1e32, prev_sqr_ap_err = 1e32;
  for(int k=0;k<100&&(sqr_err>eps||sqr_ap_err>eps)&&error==0;k++)
  {
    prev_sqr_err = sqr_err, prev_sqr_ap_err = sqr_ap_err;
    const float begin_x = x;
    const float begin_y = y;
    const float begin_dx = dx;
    const float begin_dy = dy;
    const float begin_lambda = lambda;
    const std::vector<float> pred_ap = {
       + 38.2347 *begin_dx + 0.608387 *begin_x + 0.0455654 *begin_x*begin_lambda + 1.91347 *begin_dx*begin_lambda + -0.632497 *begin_y*begin_dx*begin_dy + -0.0180557 *begin_x*begin_y*begin_dy + -0.0165069 *lens_ipow(begin_x, 2)*begin_dx + -22.2374 *lens_ipow(begin_dx, 3) + -26.0661 *begin_dx*lens_ipow(begin_dy, 2) + -0.000297703 *begin_x*lens_ipow(begin_y, 2) + -0.402827 *begin_x*lens_ipow(begin_dy, 2) + -0.583709 *begin_x*lens_ipow(begin_dx, 2) + -0.00767851 *lens_ipow(begin_y, 2)*begin_dx + -1.93805e-06 *lens_ipow(begin_x, 5) + -0.00154447 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -6.70053e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx + -0.00456894 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2) + -7.48134e-07 *lens_ipow(begin_x, 6)*begin_dx + -0.000522748 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 3) + -1.52652e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4) + 0.00135115 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + -3.16492e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*begin_dx + -8.08346e-08 *lens_ipow(begin_x, 7)*lens_ipow(begin_dx, 2) + -1.58349e-11 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 2) + -3.68029e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 5)*begin_dy + -1.73945e-07 *lens_ipow(begin_x, 6)*begin_y*begin_dx*begin_dy*begin_lambda + -2.81396e-09 *lens_ipow(begin_x, 7)*begin_y*begin_dy*begin_lambda + -5.51406e-15 *lens_ipow(begin_x, 11),
       + 0.600935 *begin_y + 37.8097 *begin_dy + 1.90326 *begin_dy*begin_lambda + 0.044445 *begin_y*begin_lambda + -14.445 *lens_ipow(begin_dx, 2)*begin_dy + -14.2223 *lens_ipow(begin_dy, 3) + -0.0896367 *begin_y*lens_ipow(begin_dx, 2)*begin_lambda + -0.000209244 *lens_ipow(begin_y, 4)*begin_dy + -2.70094e-05 *lens_ipow(begin_x, 4)*begin_dy + -1.94845e-06 *lens_ipow(begin_x, 4)*begin_y + -1.64502e-06 *lens_ipow(begin_y, 5) + -0.00184781 *lens_ipow(begin_x, 3)*begin_dx*begin_dy + -0.0097277 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + 0.0278868 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 4) + -1.39182e-05 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2) + -6.81606e-07 *begin_x*lens_ipow(begin_y, 5)*begin_dx + -5.26405e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dy + -1.2304e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_lambda + -1.39145e-06 *lens_ipow(begin_x, 5)*begin_y*begin_dx*begin_lambda + -1.00513e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7) + -3.25049e-06 *lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 2)*begin_dy + 1.38572e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + 5.48732e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7)*begin_lambda + 9.74859e-06 *lens_ipow(begin_x, 5)*begin_y*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + -1.8263e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 8)*begin_dy + -1.01573e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 7)*begin_dx + -2.43852e-07 *lens_ipow(begin_x, 6)*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + 4.84324e-08 *begin_x*lens_ipow(begin_y, 7)*begin_dx*lens_ipow(begin_dy, 2)
    };
    const std::vector<float> delta_ap = {ap_x - pred_ap[0], ap_y - pred_ap[1]};
    sqr_ap_err = delta_ap[0]*delta_ap[0]+delta_ap[1]*delta_ap[1];
    Eigen::Matrix2f dx1_domega0;
    dx1_domega0(0, 0) =  + 38.2347  + 1.91347 *begin_lambda + -0.632497 *begin_y*begin_dy + -0.0165069 *lens_ipow(begin_x, 2) + -66.7121 *lens_ipow(begin_dx, 2) + -26.0661 *lens_ipow(begin_dy, 2) + -1.16742 *begin_x*begin_dx + -0.00767851 *lens_ipow(begin_y, 2) + -0.00308894 *begin_x*lens_ipow(begin_y, 2)*begin_dx + -6.70053e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -0.00913788 *lens_ipow(begin_x, 3)*begin_dx + -7.48134e-07 *lens_ipow(begin_x, 6) + -0.00156825 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2) + 0.00135115 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2)*begin_lambda + -3.16492e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4) + -1.61669e-07 *lens_ipow(begin_x, 7)*begin_dx + -1.73945e-07 *lens_ipow(begin_x, 6)*begin_y*begin_dy*begin_lambda+0.0f;
    dx1_domega0(0, 1) =  + -0.632497 *begin_y*begin_dx + -0.0180557 *begin_x*begin_y + -52.1322 *begin_dx*begin_dy + -0.805654 *begin_x*begin_dy + 0.0027023 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*begin_dy*begin_lambda + -3.68029e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 5) + -1.73945e-07 *lens_ipow(begin_x, 6)*begin_y*begin_dx*begin_lambda + -2.81396e-09 *lens_ipow(begin_x, 7)*begin_y*begin_lambda+0.0f;
    dx1_domega0(1, 0) =  + -28.89 *begin_dx*begin_dy + -0.179273 *begin_y*begin_dx*begin_lambda + -0.00184781 *lens_ipow(begin_x, 3)*begin_dy + -2.78364e-05 *lens_ipow(begin_y, 5)*begin_dx + -6.81606e-07 *begin_x*lens_ipow(begin_y, 5) + -1.39145e-06 *lens_ipow(begin_x, 5)*begin_y*begin_lambda + -6.50097e-06 *lens_ipow(begin_y, 6)*begin_dx*begin_dy + 2.77143e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dx*begin_dy*begin_lambda + 9.74859e-06 *lens_ipow(begin_x, 5)*begin_y*lens_ipow(begin_dy, 2)*begin_lambda + -1.01573e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 7) + -4.87704e-07 *lens_ipow(begin_x, 6)*begin_y*begin_dx*lens_ipow(begin_lambda, 2) + 4.84324e-08 *begin_x*lens_ipow(begin_y, 7)*lens_ipow(begin_dy, 2)+0.0f;
    dx1_domega0(1, 1) =  + 37.8097  + 1.90326 *begin_lambda + -14.445 *lens_ipow(begin_dx, 2) + -42.6669 *lens_ipow(begin_dy, 2) + -0.000209244 *lens_ipow(begin_y, 4) + -2.70094e-05 *lens_ipow(begin_x, 4) + -0.00184781 *lens_ipow(begin_x, 3)*begin_dx + -0.0194554 *lens_ipow(begin_y, 3)*begin_dy + 0.111547 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3) + -5.26405e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2) + -3.25049e-06 *lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 2) + 1.38572e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2)*begin_lambda + 1.94972e-05 *lens_ipow(begin_x, 5)*begin_y*begin_dx*begin_dy*begin_lambda + -1.8263e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 8) + 9.68647e-08 *begin_x*lens_ipow(begin_y, 7)*begin_dx*begin_dy+0.0f;
    Eigen::Matrix2f invApJ;
    const float invdetap = 1.0f/(dx1_domega0(0, 0)*dx1_domega0(1, 1) - dx1_domega0(0, 1)*dx1_domega0(1, 0));
    invApJ(0, 0) =  dx1_domega0(1, 1)*invdetap;
    invApJ(1, 1) =  dx1_domega0(0, 0)*invdetap;
    invApJ(0, 1) = -dx1_domega0(0, 1)*invdetap;
    invApJ(1, 0) = -dx1_domega0(1, 0)*invdetap;
    for(int i=0;i<2;i++)
    {
      dx += invApJ(0, i)*delta_ap[i];
      dy += invApJ(1, i)*delta_ap[i];
    }
    out[0] =  + 31.7099 *begin_dx + -1.23082 *begin_x + -0.000581031 *begin_x*lens_ipow(begin_y, 2) + -0.00738158 *lens_ipow(begin_y, 2)*begin_dx + -16.6613 *lens_ipow(begin_dx, 3)*begin_lambda + 0.000584374 *begin_x*lens_ipow(begin_y, 2)*begin_lambda + -34.0465 *begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + -0.000464957 *lens_ipow(begin_x, 4)*begin_dx + -0.256486 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3) + -1.36507 *begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -0.0012827 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + -5.79442e-06 *lens_ipow(begin_x, 5) + 0.0395179 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_lambda, 2) + -0.0176325 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2) + 2.80629e-06 *lens_ipow(begin_x, 5)*begin_lambda + -0.0916232 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4) + -3.73989e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dy + -5.04317e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4) + -0.00573675 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3) + -2.74857e-06 *lens_ipow(begin_x, 5)*begin_y*begin_dy*begin_lambda + -0.000114969 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2)*begin_lambda + -0.000397678 *lens_ipow(begin_x, 4)*begin_y*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -3.05309e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2)*begin_dx + -1.27083e-06 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -2.10945e-10 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 2) + 3.11524e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_dy + -0.0159637 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 3) + -4.46449e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 6)*begin_dx;
    out[1] =  + -0.968088 *begin_y + 61.3247 *begin_dy + 0.0658835 *begin_y*begin_lambda + -0.382888 *begin_x*begin_dx*begin_dy + -26.5336 *lens_ipow(begin_dx, 2)*begin_dy + -24.7367 *lens_ipow(begin_dy, 3) + 0.0222574 *lens_ipow(begin_y, 2)*begin_dy*begin_lambda + -0.00184699 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + -4.24166e-06 *lens_ipow(begin_x, 4)*begin_y + -1.48053e-06 *begin_x*lens_ipow(begin_y, 5)*begin_dx + -8.17321e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5) + -1.66586e-06 *lens_ipow(begin_x, 5)*begin_y*begin_dx*begin_lambda + -5.24712e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2) + -6.62859e-09 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2)*begin_dy + -6.50642e-09 *lens_ipow(begin_y, 8)*begin_dy + -1.17688e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 2) + -1.237e-10 *lens_ipow(begin_y, 9) + -2.94335e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 5)*begin_dx + -6.28255e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6)*begin_dy + 8.39478e-11 *lens_ipow(begin_y, 9)*begin_lambda + 3.48151e-05 *begin_x*lens_ipow(begin_y, 5)*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + 1.02518e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 8)*begin_dy + -2.28585e-11 *lens_ipow(begin_y, 10)*begin_dy + -1.58663e-09 *lens_ipow(begin_y, 9)*lens_ipow(begin_dy, 2) + 5.41866e-09 *lens_ipow(begin_y, 8)*begin_dy*lens_ipow(begin_lambda, 2) + -7.37736e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 6)*begin_dx*begin_dy + -0.000105134 *lens_ipow(begin_x, 4)*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 4) + -9.97643e-13 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 5);
    out[2] =  + 0.291583 *begin_dx + -0.0435433 *begin_x + 2.11235e-05 *lens_ipow(begin_x, 3)*begin_lambda + -1.32693e-07 *lens_ipow(begin_x, 5) + 3.98285e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 0.00159174 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_lambda, 3) + -4.72983e-08 *lens_ipow(begin_x, 6)*begin_dx + -1.63282e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4) + -6.71426e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dx + 3.5649e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*begin_lambda + -9.02216e-09 *lens_ipow(begin_x, 7)*lens_ipow(begin_dx, 2) + -6.29055e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 3)*begin_dy + -3.7483e-09 *begin_x*lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 2) + -1.96115e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5)*begin_dx*begin_dy*begin_lambda + -4.69179e-10 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 5)*begin_dy*begin_lambda + -2.48447e-08 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2)*begin_lambda + 0.116191 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 8) + -8.91203e-12 *lens_ipow(begin_x, 8)*lens_ipow(begin_y, 2)*begin_dx + -3.56106e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4) + -1.66193e-10 *lens_ipow(begin_y, 8)*lens_ipow(begin_dx, 3) + -2.99478e-09 *lens_ipow(begin_x, 7)*begin_y*lens_ipow(begin_dx, 2)*begin_dy + -7.17236e-10 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -2.58021e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3) + -6.73015e-10 *lens_ipow(begin_x, 8)*lens_ipow(begin_dx, 3) + -1.36666e-10 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 3)*begin_dx*begin_dy + -9.71742e-13 *lens_ipow(begin_x, 9)*begin_y*begin_dy + -4.35132e-14 *lens_ipow(begin_x, 9)*lens_ipow(begin_y, 2) + -1.06019e-10 *lens_ipow(begin_x, 8)*begin_y*begin_dx*begin_dy;
    out[3] =  + -0.0161792 *begin_y + -5.44241e-05 *lens_ipow(begin_y, 2)*begin_dy + -3.64799e-05 *lens_ipow(begin_x, 2)*begin_dy + -3.1467e-05 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 2) + -2.01666e-06 *lens_ipow(begin_x, 3)*begin_y*begin_dx*begin_lambda + -1.56749e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_lambda + 2.56353e-06 *lens_ipow(begin_y, 3)*lens_ipow(begin_lambda, 3) + -4.0535e-05 *lens_ipow(begin_x, 3)*begin_dx*begin_dy*begin_lambda + -8.60669e-09 *begin_x*lens_ipow(begin_y, 5)*begin_dx + -7.24665e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dy + 0.0119663 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 5)*begin_lambda + -1.20325e-09 *lens_ipow(begin_x, 6)*begin_dy*begin_lambda + -5.56797e-09 *lens_ipow(begin_y, 7)*lens_ipow(begin_dy, 2) + -3.35447e-13 *lens_ipow(begin_x, 8)*begin_y + -7.82873e-11 *lens_ipow(begin_y, 8)*begin_dy + -3.90522e-13 *lens_ipow(begin_y, 9) + -1.2287e-12 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5) + -2.04882e-09 *begin_x*lens_ipow(begin_y, 6)*begin_dx*begin_dy + -1.43078e-12 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7) + -1.39046e-07 *lens_ipow(begin_y, 6)*lens_ipow(begin_dy, 3) + -4.29806e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6)*begin_dy*begin_lambda + -1.65057e-09 *lens_ipow(begin_x, 6)*begin_y*lens_ipow(begin_dx, 2)*begin_lambda + -4.3965e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -1.18127e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7)*lens_ipow(begin_dx, 2) + -1.25665e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -5.50153e-13 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 7)*begin_dx + -1.02061e-13 *lens_ipow(begin_x, 9)*begin_y*begin_dx + -1.09543e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 2);
    std::vector<float> pred_out_cs_pos(3);
    std::vector<float> pred_out_cs_dir(3);
    std::vector<float> outpos = {out[0], out[1]};
    std::vector<float> outdir = {out[2], out[3]};
    if (camera->lens_outer_pupil_geometry == "cyl-y") cylinderToCs(outpos, outdir, pred_out_cs_pos, pred_out_cs_dir, - camera->lens_outer_pupil_curvature_radius, camera->lens_outer_pupil_curvature_radius, true);
    else if (camera->lens_outer_pupil_geometry == "cyl-x") cylinderToCs(outpos, outdir, pred_out_cs_pos, pred_out_cs_dir, - camera->lens_outer_pupil_curvature_radius, camera->lens_outer_pupil_curvature_radius, false);
    else sphereToCs(outpos, outdir, pred_out_cs_pos, pred_out_cs_dir, - camera->lens_outer_pupil_curvature_radius, camera->lens_outer_pupil_curvature_radius);
    std::vector<float> view =
    {
      scene_x - pred_out_cs_pos[0],
      scene_y - pred_out_cs_pos[1],
      scene_z - pred_out_cs_pos[2]
    };
    raytrace_normalise(view);
    std::vector<float> out_new(5);
    std::vector<float> out_new_pos(2);
    std::vector<float> out_new_dir(2);
    if (camera->lens_outer_pupil_geometry == "cyl-y") csToCylinder(pred_out_cs_pos, view, out_new_pos, out_new_dir, - camera->lens_outer_pupil_curvature_radius, camera->lens_outer_pupil_curvature_radius, true);
    else if (camera->lens_outer_pupil_geometry == "cyl-x") csToCylinder(pred_out_cs_pos, view, out_new_pos, out_new_dir, - camera->lens_outer_pupil_curvature_radius, camera->lens_outer_pupil_curvature_radius, false);
    else csToSphere(pred_out_cs_pos, view, out_new_pos, out_new_dir, - camera->lens_outer_pupil_curvature_radius, camera->lens_outer_pupil_curvature_radius);
    out_new[0] = out_new_pos[0];
    out_new[1] = out_new_pos[1];
    out_new[2] = out_new_dir[0];
    out_new[3] = out_new_dir[1];
    const std::vector<float> delta_out = {out_new[2] - out[2], out_new[3] - out[3]};
    sqr_err = delta_out[0]*delta_out[0]+delta_out[1]*delta_out[1];
    Eigen::Matrix2f domega2_dx0;
    domega2_dx0(0, 0) =  + -0.0435433  + 6.33704e-05 *lens_ipow(begin_x, 2)*begin_lambda + -6.63463e-07 *lens_ipow(begin_x, 4) + 3.98285e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + 0.00318347 *begin_x*begin_dx*lens_ipow(begin_lambda, 3) + -2.8379e-07 *lens_ipow(begin_x, 5)*begin_dx + -4.89846e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4) + -1.34285e-07 *begin_x*lens_ipow(begin_y, 4)*begin_dx + 1.78245e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_lambda + -6.31551e-08 *lens_ipow(begin_x, 6)*lens_ipow(begin_dx, 2) + -3.14528e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_dy + -3.7483e-09 *lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 2) + -3.9223e-08 *begin_x*lens_ipow(begin_y, 5)*begin_dx*begin_dy*begin_lambda + -1.40754e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5)*begin_dy*begin_lambda + -1.24223e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2)*begin_lambda + 0.116191 *lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 8) + -7.12963e-11 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 2)*begin_dx + -1.78053e-06 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4) + -2.09635e-08 *lens_ipow(begin_x, 6)*begin_y*lens_ipow(begin_dx, 2)*begin_dy + -5.02066e-09 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -1.54813e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3) + -5.38412e-09 *lens_ipow(begin_x, 7)*lens_ipow(begin_dx, 3) + -8.19996e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 3)*begin_dx*begin_dy + -8.74568e-12 *lens_ipow(begin_x, 8)*begin_y*begin_dy + -3.91619e-13 *lens_ipow(begin_x, 8)*lens_ipow(begin_y, 2) + -8.48148e-10 *lens_ipow(begin_x, 7)*begin_y*begin_dx*begin_dy+0.0f;
    domega2_dx0(0, 1) =  + 7.96569e-05 *begin_x*begin_y*lens_ipow(begin_dy, 2) + -6.53128e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3) + -2.6857e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx + 7.1298e-10 *lens_ipow(begin_x, 5)*begin_y*begin_lambda + -1.88717e-09 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*begin_dy + -2.24898e-08 *begin_x*lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2) + -9.80575e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dx*begin_dy*begin_lambda + -2.3459e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dy*begin_lambda + -4.96894e-08 *lens_ipow(begin_x, 5)*begin_y*lens_ipow(begin_dy, 2)*begin_lambda + -1.78241e-11 *lens_ipow(begin_x, 8)*begin_y*begin_dx + -7.12212e-07 *lens_ipow(begin_x, 5)*begin_y*lens_ipow(begin_dx, 4) + -1.32955e-09 *lens_ipow(begin_y, 7)*lens_ipow(begin_dx, 3) + -2.99478e-09 *lens_ipow(begin_x, 7)*lens_ipow(begin_dx, 2)*begin_dy + -1.43447e-09 *lens_ipow(begin_x, 7)*begin_y*lens_ipow(begin_dx, 2) + -5.16043e-08 *lens_ipow(begin_x, 6)*begin_y*lens_ipow(begin_dx, 3) + -4.09998e-10 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2)*begin_dx*begin_dy + -9.71742e-13 *lens_ipow(begin_x, 9)*begin_dy + -8.70265e-14 *lens_ipow(begin_x, 9)*begin_y + -1.06019e-10 *lens_ipow(begin_x, 8)*begin_dx*begin_dy+0.0f;
    domega2_dx0(1, 0) =  + -7.29598e-05 *begin_x*begin_dy + -6.2934e-05 *begin_x*begin_y*lens_ipow(begin_dy, 2) + -6.04997e-06 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_lambda + -0.000121605 *lens_ipow(begin_x, 2)*begin_dx*begin_dy*begin_lambda + -8.60669e-09 *lens_ipow(begin_y, 5)*begin_dx + -2.89866e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dy + -7.21952e-09 *lens_ipow(begin_x, 5)*begin_dy*begin_lambda + -2.68358e-12 *lens_ipow(begin_x, 7)*begin_y + -4.91481e-12 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 5) + -2.04882e-09 *lens_ipow(begin_y, 6)*begin_dx*begin_dy + -2.86156e-12 *begin_x*lens_ipow(begin_y, 7) + -8.59612e-10 *begin_x*lens_ipow(begin_y, 6)*begin_dy*begin_lambda + -9.9034e-09 *lens_ipow(begin_x, 5)*begin_y*lens_ipow(begin_dx, 2)*begin_lambda + -8.79299e-08 *begin_x*lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -2.36254e-11 *begin_x*lens_ipow(begin_y, 7)*lens_ipow(begin_dx, 2) + -3.76995e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -1.65046e-12 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7)*begin_dx + -9.18549e-13 *lens_ipow(begin_x, 8)*begin_y*begin_dx + -2.19086e-06 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 2)+0.0f;
    domega2_dx0(1, 1) =  + -0.0161792  + -0.000108848 *begin_y*begin_dy + -3.1467e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + -2.01666e-06 *lens_ipow(begin_x, 3)*begin_dx*begin_lambda + -4.70248e-05 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_lambda + 7.69058e-06 *lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 3) + -4.30335e-08 *begin_x*lens_ipow(begin_y, 4)*begin_dx + -1.44933e-08 *lens_ipow(begin_x, 4)*begin_y*begin_dy + 0.0239326 *begin_y*lens_ipow(begin_dy, 5)*begin_lambda + -3.89758e-08 *lens_ipow(begin_y, 6)*lens_ipow(begin_dy, 2) + -3.35447e-13 *lens_ipow(begin_x, 8) + -6.26298e-10 *lens_ipow(begin_y, 7)*begin_dy + -3.5147e-12 *lens_ipow(begin_y, 8) + -6.14351e-12 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4) + -1.22929e-08 *begin_x*lens_ipow(begin_y, 5)*begin_dx*begin_dy + -1.00154e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6) + -8.34274e-07 *lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 3) + -2.57883e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5)*begin_dy*begin_lambda + -1.65057e-09 *lens_ipow(begin_x, 6)*lens_ipow(begin_dx, 2)*begin_lambda + -2.19825e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -8.26891e-11 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 2) + -5.0266e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -3.85107e-12 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 6)*begin_dx + -1.02061e-13 *lens_ipow(begin_x, 9)*begin_dx + -4.38172e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 2)+0.0f;
    Eigen::Matrix2f invJ;
    const float invdet = 1.0f/(domega2_dx0(0, 0)*domega2_dx0(1, 1) - domega2_dx0(0, 1)*domega2_dx0(1, 0));
    invJ(0, 0) =  domega2_dx0(1, 1)*invdet;
    invJ(1, 1) =  domega2_dx0(0, 0)*invdet;
    invJ(0, 1) = -domega2_dx0(0, 1)*invdet;
    invJ(1, 0) = -domega2_dx0(1, 0)*invdet;
    for(int i=0;i<2;i++)
    {
      x += 0.72 * invJ(0, i) * delta_out[i];
      y += 0.72 * invJ(1, i) * delta_out[i];
    }
    if(sqr_err>prev_sqr_err) error |= 1;
    if(sqr_ap_err>prev_sqr_ap_err) error |= 2;
    if(out[0]!=out[0]) error |= 4;
    if(out[1]!=out[1]) error |= 8;
    // reset error code for first few iterations.
    if(k<10) error = 0;
  }
}
else
  error = 128;
if(out[0]*out[0]+out[1]*out[1] > camera->lens_outer_pupil_radius*camera->lens_outer_pupil_radius) error |= 16;
const float begin_x = x;
const float begin_y = y;
const float begin_dx = dx;
const float begin_dy = dy;
const float begin_lambda = lambda;
if(error==0)
  out[4] =  + 0.193902  + 0.361262 *begin_lambda + -0.00547707 *begin_y*begin_dy + -0.00561686 *begin_x*begin_dx + -7.47584e-05 *lens_ipow(begin_y, 2) + -0.121105 *lens_ipow(begin_dy, 2) + -6.94427e-05 *lens_ipow(begin_x, 2) + -0.122829 *lens_ipow(begin_dx, 2) + -0.244845 *lens_ipow(begin_lambda, 2) + -3.48015e-05 *begin_x*lens_ipow(begin_y, 2)*begin_dx + -0.000564401 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + -0.00177763 *begin_x*begin_y*begin_dx*begin_dy + -2.15673e-07 *lens_ipow(begin_x, 4)*begin_y*begin_dy + -8.16576e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4) + -2.43105e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -2.96867e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2) + -1.06297e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dy + -1.5643e-09 *lens_ipow(begin_x, 7)*begin_dx + -4.81692e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4) + -6.45812e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_dx + -1.60655e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dx*begin_dy + -5.84128e-08 *lens_ipow(begin_y, 6)*lens_ipow(begin_dy, 2) + -1.58202e-09 *lens_ipow(begin_y, 7)*begin_dy + -1.07901e-11 *lens_ipow(begin_y, 8) + -1.88744e-11 *lens_ipow(begin_x, 8) + -1.28862e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2) + -1.70394e-10 *lens_ipow(begin_x, 8)*lens_ipow(begin_dx, 2) + 2.34318e-14 *lens_ipow(begin_x, 10);
else
  out[4] = 0.0f;
} break;

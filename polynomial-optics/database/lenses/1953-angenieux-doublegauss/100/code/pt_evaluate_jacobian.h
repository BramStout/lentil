const float dx00 =  + -0.606384  + 0.593166 *lambda + 0.00392189 *y*dy + -0.422081 *lens_ipow(lambda, 2) + -0.000314401 *lens_ipow(y, 2) + -0.000719259 *lens_ipow(x, 2) + 0.2425 *lens_ipow(dy, 2) + 0.211985 *lens_ipow(dx, 2)*lambda + 0.000116327 *lens_ipow(y, 2)*lambda + 0.0325856 *x*dx*lambda + 2.53345 *lens_ipow(dx, 4) + 4.25018 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 0.117375 *y*lens_ipow(dx, 2)*dy*lambda + 0.391376 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.348433 *x*lens_ipow(dx, 5) + -0.000316232 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 5)+0.0f;
const float dx01 =  + 0.00392189 *x*dy + -0.000628803 *x*y + 0.00637906 *y*dx + 0.000232654 *x*y*lambda + 0.117375 *x*lens_ipow(dx, 2)*dy*lambda + 3.05549 *lens_ipow(dx, 3)*dy*lambda + 2.70561 *dx*lens_ipow(dy, 3)*lambda + 0.398046 *y*dx*lens_ipow(dy, 4)*lambda + 0.535359 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda+0.0f;
const float dx02 =  + 99.0482  + 1.06088 *lambda + -145.532 *lens_ipow(dx, 2) + -46.9432 *lens_ipow(dy, 2) + 0.00318953 *lens_ipow(y, 2) + 0.423971 *x*dx*lambda + 0.0162928 *lens_ipow(x, 2)*lambda + 10.1338 *x*lens_ipow(dx, 3) + 189.955 *lens_ipow(dx, 4) + 29.7718 *lens_ipow(dy, 4) + 8.50035 *x*dx*lens_ipow(dy, 2)*lambda + 0.23475 *x*y*dx*dy*lambda + 9.16646 *y*lens_ipow(dx, 2)*dy*lambda + 343.155 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 2.70561 *y*lens_ipow(dy, 3)*lambda + 0.587064 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.871083 *lens_ipow(x, 2)*lens_ipow(dx, 4) + 0.199023 *lens_ipow(y, 2)*lens_ipow(dy, 4)*lambda + 0.803039 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -7.90581e-05 *lens_ipow(x, 4)*lens_ipow(lambda, 5)+0.0f;
const float dx03 =  + 0.00392189 *x*y + -93.8864 *dx*dy + 0.485 *x*dy + 119.087 *dx*lens_ipow(dy, 3) + 8.50035 *x*lens_ipow(dx, 2)*dy*lambda + 0.117375 *x*y*lens_ipow(dx, 2)*lambda + 3.05549 *y*lens_ipow(dx, 3)*lambda + 228.77 *lens_ipow(dx, 3)*dy*lambda + 8.11684 *y*dx*lens_ipow(dy, 2)*lambda + 0.391376 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + 0.796091 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3)*lambda + 0.535359 *lens_ipow(y, 2)*lens_ipow(dx, 3)*dy*lambda+0.0f;
const float dx04 =  + 0.593166 *x + 1.06088 *dx + -0.844161 *x*lambda + 0.211985 *x*lens_ipow(dx, 2) + 0.000116327 *x*lens_ipow(y, 2) + 0.0162928 *lens_ipow(x, 2)*dx + 4.25018 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.117375 *x*y*lens_ipow(dx, 2)*dy + 3.05549 *y*lens_ipow(dx, 3)*dy + 114.385 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + 2.70561 *y*dx*lens_ipow(dy, 3) + 0.199023 *lens_ipow(y, 2)*dx*lens_ipow(dy, 4) + 0.26768 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.000395291 *lens_ipow(x, 4)*dx*lens_ipow(lambda, 4)+0.0f;
const float dx10 =  + 0.0039041 *y*dx + -0.000483178 *x*y + 0.00656044 *x*dy + 1.49664 *lens_ipow(dx, 3)*dy + 3.06362 *dx*lens_ipow(dy, 3)*lambda + 0.117856 *y*dx*lens_ipow(dy, 2)*lambda + 0.263421 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 0.226535 *x*lens_ipow(dx, 4)*dy + -1.53983e-14 *lens_ipow(x, 3)*lens_ipow(y, 7)+0.0f;
const float dx11 =  + -0.615568  + 0.613505 *lambda + 0.240035 *lens_ipow(dx, 2) + 0.0039041 *x*dx + -0.432397 *lens_ipow(lambda, 2) + -0.000241589 *lens_ipow(x, 2) + -0.000700212 *lens_ipow(y, 2) + 0.202037 *lens_ipow(dy, 2)*lambda + 0.0327039 *y*dy*lambda + 2.56474 *lens_ipow(dy, 4) + 4.36412 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 0.117856 *x*dx*lens_ipow(dy, 2)*lambda + 0.350251 *y*lens_ipow(dy, 5) + 0.406533 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.000325067 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 5) + -2.6947e-14 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const float dx12 =  + 0.480071 *y*dx + 0.0039041 *x*y + -93.6007 *dx*dy + 4.48991 *x*lens_ipow(dx, 2)*dy + 115.936 *lens_ipow(dx, 3)*dy + 231.275 *dx*lens_ipow(dy, 3)*lambda + 8.72824 *y*dx*lens_ipow(dy, 2)*lambda + 3.06362 *x*lens_ipow(dy, 3)*lambda + 0.117856 *x*y*lens_ipow(dy, 2)*lambda + 0.263421 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3) + 0.45307 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + 0.406533 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3)+0.0f;
const float dx13 =  + 99.0341  + 1.07734 *lambda + -46.8003 *lens_ipow(dx, 2) + 0.00328022 *lens_ipow(x, 2) + -146.078 *lens_ipow(dy, 2) + 0.404074 *y*dy*lambda + 0.0163519 *lens_ipow(y, 2)*lambda + 1.49664 *x*lens_ipow(dx, 3) + 194.585 *lens_ipow(dy, 4) + 10.2589 *y*lens_ipow(dy, 3) + 28.984 *lens_ipow(dx, 4) + 346.913 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 8.72824 *y*lens_ipow(dx, 2)*dy*lambda + 9.19087 *x*dx*lens_ipow(dy, 2)*lambda + 0.235711 *x*y*dx*dy*lambda + 0.395132 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.113267 *lens_ipow(x, 2)*lens_ipow(dx, 4) + 0.875628 *lens_ipow(y, 2)*lens_ipow(dy, 4) + 0.6098 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -8.12667e-05 *lens_ipow(y, 4)*lens_ipow(lambda, 5)+0.0f;
const float dx14 =  + 1.07734 *dy + 0.613505 *y + -0.864794 *y*lambda + 0.202037 *y*lens_ipow(dy, 2) + 0.0163519 *lens_ipow(y, 2)*dy + 115.638 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + 4.36412 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 3.06362 *x*dx*lens_ipow(dy, 3) + 0.117856 *x*y*dx*lens_ipow(dy, 2) + -0.000406334 *lens_ipow(y, 4)*dy*lens_ipow(lambda, 4)+0.0f;
const float dx20 =  + -0.00635209  + -0.00344005 *lambda + -2.99306e-05 *y*dy + -7.96644e-05 *x*dx + 0.0023866 *lens_ipow(lambda, 2) + 1.63786e-06 *lens_ipow(y, 2) + 5.16823e-06 *lens_ipow(x, 2) + -0.00104249 *lens_ipow(dy, 2) + -0.00356735 *lens_ipow(dx, 4) + 0.000122482 *y*lens_ipow(dy, 3) + 1.26996e-05 *x*y*dx*dy + 0.000379792 *x*dx*lens_ipow(dy, 2) + 2.68629e-06 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.000339661 *y*lens_ipow(dx, 2)*dy*lambda + 0.000795005 *x*lens_ipow(dx, 3)*lambda + 4.27397e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.000135414 *lens_ipow(x, 2)*lens_ipow(dx, 4)*lens_ipow(lambda, 2) + -2.61813e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 4)*lambda+0.0f;
const float dx21 =  + -2.99306e-05 *x*dy + 3.27571e-06 *x*y + 0.000207951 *y*dx*lens_ipow(dy, 2) + 0.000134065 *y*lens_ipow(dx, 3) + 0.000122482 *x*lens_ipow(dy, 3) + 6.3498e-06 *lens_ipow(x, 2)*dx*dy + 5.37258e-06 *x*y*lens_ipow(dy, 2) + 0.000339661 *x*lens_ipow(dx, 2)*dy*lambda + 2.84932e-08 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + 1.86832e-08 *lens_ipow(y, 4)*dx*dy + -1.74542e-07 *lens_ipow(x, 3)*y*lens_ipow(dx, 4)*lambda+0.0f;
const float dx22 =  + -0.610878  + 0.00725679 *lambda + -3.98322e-05 *lens_ipow(x, 2) + 0.840933 *lens_ipow(dx, 2) + 0.555934 *lens_ipow(dy, 2)*lambda + -0.0142694 *x*lens_ipow(dx, 3) + -0.912086 *lens_ipow(dx, 4) + -0.49354 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.000103975 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.000201098 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 6.3498e-06 *lens_ipow(x, 2)*y*dy + 0.000189896 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.444146 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.000679322 *x*y*dx*dy*lambda + 0.00119251 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 2.84932e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 3.73663e-09 *lens_ipow(y, 5)*dy + 0.000180552 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -3.49084e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 3)*lambda+0.0f;
const float dx23 =  + -2.99306e-05 *x*y + -0.00208499 *x*dy + 1.11187 *dx*dy*lambda + -0.987081 *dx*dy*lens_ipow(lambda, 2) + 0.000207951 *lens_ipow(y, 2)*dx*dy + 0.000367445 *x*y*lens_ipow(dy, 2) + 6.3498e-06 *lens_ipow(x, 2)*y*dx + 0.000379792 *lens_ipow(x, 2)*dx*dy + 5.37258e-06 *x*lens_ipow(y, 2)*dy + -0.296097 *lens_ipow(dx, 3)*dy + 0.000339661 *x*y*lens_ipow(dx, 2)*lambda + 3.73663e-09 *lens_ipow(y, 5)*dx+0.0f;
const float dx24 =  + -0.00344005 *x + 0.00725679 *dx + 0.0047732 *x*lambda + 0.555934 *dx*lens_ipow(dy, 2) + -0.987081 *dx*lens_ipow(dy, 2)*lambda + 0.000339661 *x*y*lens_ipow(dx, 2)*dy + 0.000397502 *lens_ipow(x, 2)*lens_ipow(dx, 3) + 9.0276e-05 *lens_ipow(x, 3)*lens_ipow(dx, 4)*lambda + -8.72709e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 4)+0.0f;
const float dx30 =  + 0.00185104 *dx*dy + -2.87514e-05 *y*dx + 3.65279e-06 *x*y + 2.55092e-06 *lens_ipow(y, 2)*dx*dy + 5.60702e-05 *y*lens_ipow(dx, 3) + -9.75831e-08 *x*lens_ipow(y, 2)*dy + -2.97941e-05 *x*y*lens_ipow(dy, 4)*lambda + -0.36068 *lens_ipow(dx, 3)*lens_ipow(dy, 5) + 0.00388978 *x*lens_ipow(dx, 6)*dy+0.0f;
const float dx31 =  + -0.00637173  + -0.00340738 *lambda + -0.00177599 *lens_ipow(dx, 2) + -6.76243e-05 *y*dy + -2.87514e-05 *x*dx + 0.00236802 *lens_ipow(lambda, 2) + 1.82639e-06 *lens_ipow(x, 2) + 5.11265e-06 *lens_ipow(y, 2) + 5.10184e-06 *x*y*dx*dy + 5.60702e-05 *x*lens_ipow(dx, 3) + 0.000356355 *y*lens_ipow(dy, 3) + 0.000299834 *y*lens_ipow(dx, 2)*dy + -9.75831e-08 *lens_ipow(x, 2)*y*dy + 4.27884e-05 *lens_ipow(y, 2)*lens_ipow(dy, 4) + -0.0394256 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -0.0145111 *lens_ipow(dy, 6) + -1.48971e-05 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lambda+0.0f;
const float dx32 =  + -0.00355198 *y*dx + 0.00185104 *x*dy + -2.87514e-05 *x*y + 0.835182 *dx*dy + 2.55092e-06 *x*lens_ipow(y, 2)*dy + -1.25906 *dx*lens_ipow(dy, 3) + 0.000168211 *x*y*lens_ipow(dx, 2) + 0.000299834 *lens_ipow(y, 2)*dx*dy + -1.38903 *lens_ipow(dx, 3)*dy + -0.0788512 *y*dx*lens_ipow(dy, 4) + -1.08204 *x*lens_ipow(dx, 2)*lens_ipow(dy, 5) + 0.0116693 *lens_ipow(x, 2)*lens_ipow(dx, 5)*dy+0.0f;
const float dx33 =  + -0.624157  + 0.0456478 *lambda + -3.38122e-05 *lens_ipow(y, 2) + 0.00185104 *x*dx + 0.417591 *lens_ipow(dx, 2) + -0.0324662 *lens_ipow(lambda, 2) + 0.917974 *lens_ipow(dy, 2) + 2.55092e-06 *x*lens_ipow(y, 2)*dx + -1.88859 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1.21999 *lens_ipow(dy, 4) + 0.000534532 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.000149917 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.347258 *lens_ipow(dx, 4) + -4.87916e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 5.70511e-05 *lens_ipow(y, 3)*lens_ipow(dy, 3) + -0.157702 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.0870664 *y*lens_ipow(dy, 5) + -5.95883e-05 *lens_ipow(x, 2)*y*lens_ipow(dy, 3)*lambda + -1.8034 *x*lens_ipow(dx, 3)*lens_ipow(dy, 4) + 0.00194489 *lens_ipow(x, 2)*lens_ipow(dx, 6)+0.0f;
const float dx34 =  + 0.0456478 *dy + -0.00340738 *y + 0.00473603 *y*lambda + -0.0649324 *dy*lambda + -1.48971e-05 *lens_ipow(x, 2)*y*lens_ipow(dy, 4)+0.0f;
const float dx40 =  + -3.51178e-06 *x + -0.00502322 *lens_ipow(dx, 3) + -0.000151185 *x*lens_ipow(dx, 2) + -0.000122169 *y*dx*dy + -0.00976566 *dx*lens_ipow(dy, 2)*lambda + -0.000276874 *x*lens_ipow(dy, 4) + -0.00286597 *x*lens_ipow(dx, 6) + -0.0101761 *x*lens_ipow(dx, 4)*lens_ipow(dy, 2)*lambda + -0.0123271 *y*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 0.117385 *dx*lens_ipow(dy, 6)*lens_ipow(lambda, 3) + -0.000531491 *lens_ipow(x, 2)*lens_ipow(dx, 7)*lambda+0.0f;
const float dx41 =  + -0.00500031 *lens_ipow(dy, 3) + -0.000195046 *y*lens_ipow(dy, 2) + -0.000122169 *x*dx*dy + -0.000127318 *y*lens_ipow(dx, 2)*lambda + -0.00859308 *lens_ipow(dx, 2)*dy*lambda + -0.00165068 *y*lens_ipow(dy, 6) + -2.39272e-05 *lens_ipow(y, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -0.00633028 *y*lens_ipow(dx, 2)*lens_ipow(dy, 4)*lambda + -0.0123271 *x*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const float dx42 =  + -0.872172 *lens_ipow(dx, 3) + -0.0150697 *x*lens_ipow(dx, 2) + -0.000151185 *lens_ipow(x, 2)*dx + -0.000122169 *x*y*dy + -0.00976566 *x*lens_ipow(dy, 2)*lambda + -0.000127318 *lens_ipow(y, 2)*dx*lambda + -0.0171862 *y*dx*dy*lambda + -2.89776 *dx*lens_ipow(dy, 2)*lambda + 2.05328 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.00859791 *lens_ipow(x, 2)*lens_ipow(dx, 5) + -0.00633028 *lens_ipow(y, 2)*dx*lens_ipow(dy, 4)*lambda + -2.05879 *lens_ipow(dx, 5)*lens_ipow(lambda, 3) + -0.0203522 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + -0.0369814 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 0.117385 *x*lens_ipow(dy, 6)*lens_ipow(lambda, 3) + -0.00124015 *lens_ipow(x, 3)*lens_ipow(dx, 6)*lambda+0.0f;
const float dx43 =  + -0.0150009 *y*lens_ipow(dy, 2) + -0.716989 *lens_ipow(dy, 3) + -0.000195046 *lens_ipow(y, 2)*dy + -0.000122169 *x*y*dx + -0.0195313 *x*dx*dy*lambda + -0.376074 *lens_ipow(dy, 3)*lambda + -0.00859308 *y*lens_ipow(dx, 2)*lambda + -2.89776 *lens_ipow(dx, 2)*dy*lambda + 2.05328 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -0.000553747 *lens_ipow(x, 2)*lens_ipow(dy, 3) + -0.00495203 *lens_ipow(y, 2)*lens_ipow(dy, 5) + -2.39272e-05 *lens_ipow(y, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.0126606 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda + -0.0101761 *lens_ipow(x, 2)*lens_ipow(dx, 4)*dy*lambda + -0.0369814 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.704313 *x*dx*lens_ipow(dy, 5)*lens_ipow(lambda, 3)+0.0f;
const float dx44 =  + 0.854223  + -2.34043 *lambda + 1.69855 *lens_ipow(lambda, 2) + -0.00976566 *x*dx*lens_ipow(dy, 2) + -0.0940186 *lens_ipow(dy, 4) + -6.36589e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.00859308 *y*lens_ipow(dx, 2)*dy + -1.44888 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 2.05328 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -1.59515e-05 *lens_ipow(y, 3)*lens_ipow(dy, 3)*lambda + -0.00316514 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 4) + -1.0294 *lens_ipow(dx, 6)*lens_ipow(lambda, 2) + -0.00508804 *lens_ipow(x, 2)*lens_ipow(dx, 4)*lens_ipow(dy, 2) + -0.0246543 *x*y*lens_ipow(dx, 3)*lens_ipow(dy, 3)*lambda + 0.352156 *x*dx*lens_ipow(dy, 6)*lens_ipow(lambda, 2) + -0.000177164 *lens_ipow(x, 3)*lens_ipow(dx, 7)+0.0f;

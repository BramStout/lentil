const float dx00 =  + 0.154777  + 0.261528 *lambda + -0.179304 *lens_ipow(lambda, 2) + -0.000100913 *lens_ipow(y, 2) + -0.000294359 *lens_ipow(x, 2) + -0.172202 *lens_ipow(dy, 2) + -0.194791 *lens_ipow(dx, 2) + 0.00394594 *x*dx*lambda + 0.0128352 *y*lens_ipow(dx, 2)*dy + 0.272568 *lens_ipow(dx, 4) + 0.477671 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.262767 *lens_ipow(dy, 4) + -0.000276312 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -0.00043675 *x*y*dx*dy*lambda + -0.0234945 *x*dx*lens_ipow(dy, 2)*lambda + -3.22983e-12 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const float dx01 =  + -0.0224505 *dx*dy + -0.000201826 *x*y + 0.00270885 *y*dx*lambda + 0.0128352 *x*lens_ipow(dx, 2)*dy + 0.00910634 *y*dx*lens_ipow(dy, 2) + -0.000218375 *lens_ipow(x, 2)*dx*dy*lambda + -0.0218131 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -2.58386e-12 *lens_ipow(x, 5)*lens_ipow(y, 3)+0.0f;
const float dx02 =  + 53.3813  + 13.3025 *lambda + -0.0224505 *y*dy + -100.545 *lens_ipow(dx, 2) + -33.3313 *lens_ipow(dy, 2) + -0.389581 *x*dx + -9.15742 *lens_ipow(lambda, 2) + 0.00197297 *lens_ipow(x, 2)*lambda + 0.00135443 *lens_ipow(y, 2)*lambda + 0.0256703 *x*y*dx*dy + 1.09027 *x*lens_ipow(dx, 3) + 78.6746 *lens_ipow(dx, 4) + 0.955343 *x*dx*lens_ipow(dy, 2) + 14.5467 *lens_ipow(dy, 4) + 0.00455317 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000184208 *lens_ipow(x, 3)*dx + 89.8741 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.000218375 *lens_ipow(x, 2)*y*dy*lambda + -0.0117472 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -0.0327196 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2)+0.0f;
const float dx03 =  + -0.0224505 *y*dx + -66.6625 *dx*dy + -0.344403 *x*dy + 0.0128352 *x*y*lens_ipow(dx, 2) + 0.955343 *x*lens_ipow(dx, 2)*dy + 58.1867 *dx*lens_ipow(dy, 3) + 1.05107 *x*lens_ipow(dy, 3) + 0.00910634 *lens_ipow(y, 2)*dx*dy + 59.916 *lens_ipow(dx, 3)*dy + -0.000218375 *lens_ipow(x, 2)*y*dx*lambda + -0.0234945 *lens_ipow(x, 2)*dx*dy*lambda+0.0f;
const float dx04 =  + 0.261528 *x + 13.3025 *dx + -0.358608 *x*lambda + -18.3148 *dx*lambda + 0.00197297 *lens_ipow(x, 2)*dx + 0.00135443 *lens_ipow(y, 2)*dx + -0.000218375 *lens_ipow(x, 2)*y*dx*dy + -0.0117472 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2) + -0.0218131 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lambda+0.0f;
const float dx10 =  + -0.0226905 *dx*dy + -0.000202513 *x*y + 0.00272339 *x*dy*lambda + 0.00875033 *x*lens_ipow(dx, 2)*dy + -0.000123302 *lens_ipow(y, 2)*dx*dy + 0.0125992 *y*dx*lens_ipow(dy, 2) + -0.0219187 *x*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -2.4049e-12 *lens_ipow(x, 3)*lens_ipow(y, 5)+0.0f;
const float dx11 =  + 0.154573  + 0.262502 *lambda + -0.172232 *lens_ipow(dx, 2) + -0.194729 *lens_ipow(dy, 2) + -0.180011 *lens_ipow(lambda, 2) + -0.000101256 *lens_ipow(x, 2) + -0.000296321 *lens_ipow(y, 2) + 0.00395513 *y*dy*lambda + -0.000246603 *x*y*dx*dy + 0.262752 *lens_ipow(dx, 4) + 0.0125992 *x*dx*lens_ipow(dy, 2) + 0.27136 *lens_ipow(dy, 4) + 0.468323 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.000261949 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.0231946 *y*lens_ipow(dx, 2)*dy*lambda + -3.00612e-12 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const float dx12 =  + -0.344465 *y*dx + -0.0226905 *x*dy + -66.6064 *dx*dy + 0.00875033 *lens_ipow(x, 2)*dx*dy + -0.000123302 *x*lens_ipow(y, 2)*dy + 59.3282 *dx*lens_ipow(dy, 3) + 1.05101 *y*lens_ipow(dx, 3) + 0.0125992 *x*y*lens_ipow(dy, 2) + 0.936647 *y*dx*lens_ipow(dy, 2) + 58.0145 *lens_ipow(dx, 3)*dy + -0.0231946 *lens_ipow(y, 2)*dx*dy*lambda+0.0f;
const float dx13 =  + 53.3816  + 13.2961 *lambda + -0.389458 *y*dy + -0.0226905 *x*dx + -33.3032 *lens_ipow(dx, 2) + -9.14292 *lens_ipow(lambda, 2) + -100.61 *lens_ipow(dy, 2) + 0.00136169 *lens_ipow(x, 2)*lambda + 0.00197757 *lens_ipow(y, 2)*lambda + 0.00437516 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -0.000123302 *x*lens_ipow(y, 2)*dx + 88.9923 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 79.1057 *lens_ipow(dy, 4) + 0.0251984 *x*y*dx*dy + 1.08544 *y*lens_ipow(dy, 3) + 0.936647 *y*lens_ipow(dx, 2)*dy + 14.5036 *lens_ipow(dx, 4) + -0.000174633 *lens_ipow(y, 3)*dy + -0.0115973 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -0.032878 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const float dx14 =  + 13.2961 *dy + 0.262502 *y + -0.360023 *y*lambda + -18.2858 *dy*lambda + 0.00136169 *lens_ipow(x, 2)*dy + 0.00197757 *lens_ipow(y, 2)*dy + -0.0115973 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -0.0219187 *lens_ipow(x, 2)*lens_ipow(dy, 3)*lambda+0.0f;
const float dx20 =  + -0.0177451  + 0.0065151 *lambda + 6.01178e-05 *y*dy + 0.000116899 *x*dx + -0.00455593 *lens_ipow(lambda, 2) + -2.82159e-06 *lens_ipow(y, 2) + -8.24862e-06 *lens_ipow(x, 2) + -0.00566831 *lens_ipow(dy, 2) + -0.0142906 *lens_ipow(dx, 2) + -1.68075e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.00399362 *lens_ipow(dy, 4) + 2.18356e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -1.44085e-08 *lens_ipow(y, 4)*lens_ipow(dx, 2) + 1.19201e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -1.47033e-07 *lens_ipow(x, 4)*lens_ipow(dx, 2) + 1.61509e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 0.00151553 *y*lens_ipow(dx, 4)*dy + -0.0246004 *lens_ipow(dx, 6)*lambda + -1.25596e-10 *lens_ipow(x, 6)*lens_ipow(dy, 2) + 5.06341e-10 *lens_ipow(x, 6)*lens_ipow(dx, 2)*lambda+0.0f;
const float dx21 =  + -0.00972886 *dx*dy + 6.01178e-05 *x*dy + -5.64317e-06 *x*y + -1.1205e-08 *lens_ipow(x, 3)*y + 1.45571e-08 *lens_ipow(x, 3)*y*lambda + -5.76341e-08 *x*lens_ipow(y, 3)*lens_ipow(dx, 2) + 1.19201e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -0.028671 *dx*lens_ipow(dy, 5) + 8.07543e-10 *lens_ipow(x, 4)*y*dx + 0.00151553 *x*lens_ipow(dx, 4)*dy + -0.000823796 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
const float dx22 =  + 0.400102  + -0.00972886 *y*dy + 5.84495e-05 *lens_ipow(x, 2) + -1.60488 *lens_ipow(dx, 2) + -0.512289 *lens_ipow(dy, 2) + -0.0285813 *x*dx + 0.715362 *lens_ipow(dx, 4) + 1.4197 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -2.8817e-08 *x*lens_ipow(y, 4)*dx + -0.028671 *y*lens_ipow(dy, 5) + -5.8813e-08 *lens_ipow(x, 5)*dx + 4.03772e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + 0.00606214 *x*y*lens_ipow(dx, 3)*dy + -0.147603 *x*lens_ipow(dx, 5)*lambda + -0.000823796 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 1.44669e-10 *lens_ipow(x, 7)*dx*lambda+0.0f;
const float dx23 =  + -0.00972886 *y*dx + 6.01178e-05 *x*y + -1.02458 *dx*dy + -0.0113366 *x*dy + 0.0159745 *x*lens_ipow(dy, 3) + 0.946466 *lens_ipow(dx, 3)*dy*lambda + 3.97335e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.143355 *y*dx*lens_ipow(dy, 4) + 0.00151553 *x*y*lens_ipow(dx, 4) + -3.58846e-11 *lens_ipow(x, 7)*dy + -0.000823796 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const float dx24 =  + 0.0065151 *x + -0.00911187 *x*lambda + 0.473233 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + 7.27853e-09 *lens_ipow(x, 3)*lens_ipow(y, 2) + -0.0246004 *x*lens_ipow(dx, 6) + 7.23344e-11 *lens_ipow(x, 7)*lens_ipow(dx, 2)+0.0f;
const float dx30 =  + -0.00974129 *dx*dy + 5.99651e-05 *y*dx + -5.66457e-06 *x*y + -1.12202e-08 *x*lens_ipow(y, 3) + 1.45758e-08 *x*lens_ipow(y, 3)*lambda + -5.27419e-08 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + 1.201e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 0.00154966 *y*dx*lens_ipow(dy, 4) + 8.32557e-10 *x*lens_ipow(y, 4)*dy + -0.0286077 *lens_ipow(dx, 5)*dy + -0.00078876 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
const float dx31 =  + -0.0177516  + 0.00653363 *lambda + -0.00564628 *lens_ipow(dx, 2) + 0.000116262 *y*dy + -0.0142844 *lens_ipow(dy, 2) + 5.99651e-05 *x*dx + -0.00456705 *lens_ipow(lambda, 2) + -2.83229e-06 *lens_ipow(x, 2) + -8.23529e-06 *lens_ipow(y, 2) + 0.00412116 *lens_ipow(dx, 4) + -1.68304e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 2.18638e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -1.31855e-08 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -2.84287e-08 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -1.47367e-07 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 1.201e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 0.00154966 *x*dx*lens_ipow(dy, 4) + 1.66511e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -0.025514 *lens_ipow(dy, 6)*lambda + 4.96402e-10 *lens_ipow(y, 6)*lens_ipow(dy, 2)*lambda+0.0f;
const float dx32 =  + -0.0112926 *y*dx + -0.00974129 *x*dy + 5.99651e-05 *x*y + -1.0236 *dx*dy + 0.0164846 *y*lens_ipow(dx, 3) + 0.92941 *dx*lens_ipow(dy, 3)*lambda + -1.13715e-08 *lens_ipow(y, 5)*dx + 4.00332e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + 0.00154966 *x*y*lens_ipow(dy, 4) + -0.143039 *x*lens_ipow(dx, 4)*dy + -0.00078876 *lens_ipow(x, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3)+0.0f;
const float dx33 =  + 0.400086  + 5.81312e-05 *lens_ipow(y, 2) + -0.0285688 *y*dy + -0.00974129 *x*dx + -0.5118 *lens_ipow(dx, 2) + -1.60293 *lens_ipow(dy, 2) + 0.70084 *lens_ipow(dy, 4) + 1.39412 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -2.6371e-08 *lens_ipow(x, 4)*y*dy + -5.89466e-08 *lens_ipow(y, 5)*dy + 0.00619863 *x*y*dx*lens_ipow(dy, 3) + 4.16278e-10 *lens_ipow(x, 2)*lens_ipow(y, 4) + -0.0286077 *x*lens_ipow(dx, 5) + -0.153084 *y*lens_ipow(dy, 5)*lambda + -0.00078876 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 1.41829e-10 *lens_ipow(y, 7)*dy*lambda+0.0f;
const float dx34 =  + 0.00653363 *y + -0.00913409 *y*lambda + 0.464705 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + 7.28792e-09 *lens_ipow(x, 2)*lens_ipow(y, 3) + -0.025514 *y*lens_ipow(dy, 6) + 7.09145e-11 *lens_ipow(y, 7)*lens_ipow(dy, 2)+0.0f;
const float dx40 =  + -1.89193e-08 *x*lens_ipow(y, 2) + -3.43139e-05 *x*lens_ipow(dx, 2) + -1.36943e-07 *lens_ipow(x, 3)*lens_ipow(dy, 2) + 0.00744756 *lens_ipow(dx, 5) + 0.00925466 *dx*lens_ipow(dy, 4) + -0.00019486 *y*lens_ipow(dx, 3)*dy + 2.07004e-05 *x*y*lens_ipow(dy, 5) + 0.0739488 *lens_ipow(dx, 3)*lens_ipow(dy, 4) + 0.000786252 *lens_ipow(x, 2)*lens_ipow(dx, 5)*lens_ipow(dy, 2) + 1.64493e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 5)+0.0f;
const float dx41 =  + -2.27756e-05 *y*lens_ipow(dx, 2) + -1.89193e-08 *lens_ipow(x, 2)*y + -3.31678e-07 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 0.023203 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + 0.0028952 *lens_ipow(dy, 5) + -0.00019486 *x*lens_ipow(dx, 3)*dy + 0.0212423 *lens_ipow(dy, 7) + 1.03502e-05 *lens_ipow(x, 2)*lens_ipow(dy, 5) + 0.000118428 *y*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + 0.000368256 *lens_ipow(y, 2)*lens_ipow(dx, 6)*dy + 1.09662e-07 *lens_ipow(x, 3)*y*lens_ipow(dx, 5)+0.0f;
const float dx42 =  + -0.728608 *lens_ipow(dx, 3) + -2.27756e-05 *lens_ipow(y, 2)*dx + -0.800229 *dx*lens_ipow(dy, 2) + -3.43139e-05 *lens_ipow(x, 2)*dx + 0.0372378 *x*lens_ipow(dx, 4) + 0.0464059 *y*dx*lens_ipow(dy, 3) + 0.00925466 *x*lens_ipow(dy, 4) + -0.00058458 *x*y*lens_ipow(dx, 2)*dy + -1.1773 *lens_ipow(dx, 5)*lambda + -3.81853 *lens_ipow(dx, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.221846 *x*lens_ipow(dx, 2)*lens_ipow(dy, 4) + 0.000736512 *lens_ipow(y, 3)*lens_ipow(dx, 5)*dy + 0.00131042 *lens_ipow(x, 3)*lens_ipow(dx, 4)*lens_ipow(dy, 2) + 2.74155e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 4)+0.0f;
const float dx43 =  + -0.800229 *lens_ipow(dx, 2)*dy + -0.68155 *lens_ipow(dy, 3) + -0.28444 *lens_ipow(dy, 3)*lambda + -1.65839e-07 *lens_ipow(y, 4)*dy + -6.84716e-08 *lens_ipow(x, 4)*dy + 0.0696089 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.0370186 *x*dx*lens_ipow(dy, 3) + 0.014476 *y*lens_ipow(dy, 4) + -0.00019486 *x*y*lens_ipow(dx, 3) + 0.148696 *y*lens_ipow(dy, 6) + 5.17511e-05 *lens_ipow(x, 2)*y*lens_ipow(dy, 4) + -1.90926 *lens_ipow(dx, 4)*dy*lens_ipow(lambda, 2) + 0.295795 *x*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 0.000118428 *lens_ipow(y, 2)*dy*lens_ipow(lambda, 5) + 0.000122752 *lens_ipow(y, 3)*lens_ipow(dx, 6) + 0.000524168 *lens_ipow(x, 3)*lens_ipow(dx, 5)*dy+0.0f;
const float dx44 =  + 1.18306  + -4.91774 *lambda + 7.22026 *lens_ipow(lambda, 2) + -3.65321 *lens_ipow(lambda, 3) + -0.07111 *lens_ipow(dy, 4) + -0.196217 *lens_ipow(dx, 6) + -1.90926 *lens_ipow(dx, 4)*lens_ipow(dy, 2)*lambda + 0.000296069 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 4)+0.0f;

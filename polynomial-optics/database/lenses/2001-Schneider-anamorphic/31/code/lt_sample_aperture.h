case Schneider_anamorphic_2001_31mm:
{
//input: scene_[x,y,z] - point in scene, ap_[x,y] - point on aperture
//output: [x,y,dx,dy] point and direction on sensor
float view[3] =
{
  scene_x,
  scene_y,
  scene_z + camera->lens_outer_pupil_curvature_radius
};
normalise(view);
int error = 0;
if(1 || view[2] >= camera->lens_field_of_view)
{
  const float eps = 1e-8;
  float sqr_err = 1e30, sqr_ap_err = 1e30;
  float prev_sqr_err = 1e32, prev_sqr_ap_err = 1e32;
  for(int k=0;k<100&&(sqr_err>eps||sqr_ap_err>eps)&&error==0;k++)
  {
    prev_sqr_err = sqr_err, prev_sqr_ap_err = sqr_ap_err;
    const float begin_x = x;
    const float begin_y = y;
    const float begin_dx = dx;
    const float begin_dy = dy;
    const float begin_lambda = lambda;
    const float pred_ap[2] = {
       + 38.1292 *begin_dx + 0.609883 *begin_x + 1.87968 *begin_dx*begin_lambda + 0.0437844 *begin_x*begin_lambda + -17.76 *begin_dx*lens_ipow(begin_dy, 2) + -22.2757 *lens_ipow(begin_dx, 3) + -0.243603 *begin_y*begin_dx*begin_dy + -0.765068 *begin_x*lens_ipow(begin_dx, 2) + -0.0163891 *lens_ipow(begin_x, 2)*begin_dx + -0.000209958 *lens_ipow(begin_x, 3) + -5.55513e-05 *lens_ipow(begin_y, 4)*begin_dx + -0.00342574 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -0.000172488 *begin_x*lens_ipow(begin_y, 3)*begin_dy + -2.95078e-06 *begin_x*lens_ipow(begin_y, 4) + -0.00139012 *lens_ipow(begin_x, 3)*lens_ipow(begin_dy, 2) + -5.71781e-07 *lens_ipow(begin_x, 6)*begin_dx + -4.77639e-09 *lens_ipow(begin_x, 7) + -4.51097e-05 *lens_ipow(begin_y, 5)*begin_dx*begin_dy*begin_lambda + 5.10669e-09 *begin_x*lens_ipow(begin_y, 6)*begin_lambda + -7.04006e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6)*begin_dx + -1.84303e-07 *lens_ipow(begin_x, 7)*lens_ipow(begin_dx, 2) + -3.3471e-09 *lens_ipow(begin_x, 7)*begin_y*begin_dy + -5.91817e-11 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 2) + -9.8157e-10 *lens_ipow(begin_x, 8)*begin_dx + -1.1835e-05 *lens_ipow(begin_y, 6)*begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -1.36608e-08 *lens_ipow(begin_x, 8)*lens_ipow(begin_dx, 3) + -7.06675e-10 *lens_ipow(begin_x, 8)*begin_y*begin_dx*begin_dy + -1.34421e-11 *lens_ipow(begin_x, 8)*lens_ipow(begin_y, 2)*begin_dx,
       + 37.2218 *begin_dy + 0.600366 *begin_y + 2.57287 *begin_dy*begin_lambda + 0.0506333 *begin_y*begin_lambda + -0.219304 *begin_y*lens_ipow(begin_dx, 2) + -0.00011761 *lens_ipow(begin_y, 3) + -0.0076665 *begin_x*begin_y*begin_dx + -0.00300007 *lens_ipow(begin_x, 2)*begin_dy + -0.0178301 *lens_ipow(begin_y, 2)*begin_dy*begin_lambda + -176.653 *lens_ipow(begin_dx, 4)*begin_dy + -4.59828 *begin_x*lens_ipow(begin_dx, 3)*begin_dy + -7.39776e-05 *begin_x*lens_ipow(begin_y, 3)*begin_dx + -3.03696e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3) + -1.28209e-06 *lens_ipow(begin_x, 4)*begin_y + -285.885 *lens_ipow(begin_dy, 5)*begin_lambda + -363.426 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 3)*begin_lambda + 0.403648 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + -18.2665 *begin_y*lens_ipow(begin_dy, 4)*lens_ipow(begin_lambda, 2) + -0.00866947 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 4) + -5.59834e-09 *lens_ipow(begin_y, 7) + -4.94397e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dy + -2.56829e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dx + -1.74027e-07 *lens_ipow(begin_x, 5)*begin_y*begin_dx + -1.69844e-06 *lens_ipow(begin_y, 6)*begin_dy*begin_lambda + -6.45941e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_dy*begin_lambda + 0.000314963 *lens_ipow(begin_y, 4)*begin_dy*lens_ipow(begin_lambda, 4) + -0.000164985 *lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -0.0118865 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 4)
    };
    const float delta_ap[] = {ap_x - pred_ap[0], ap_y - pred_ap[1]};
    sqr_ap_err = delta_ap[0]*delta_ap[0]+delta_ap[1]*delta_ap[1];
    float dx1_domega0[2][2];
    dx1_domega0[0][0] =  + 38.1292  + 1.87968 *begin_lambda + -17.76 *lens_ipow(begin_dy, 2) + -66.8272 *lens_ipow(begin_dx, 2) + -0.243603 *begin_y*begin_dy + -1.53014 *begin_x*begin_dx + -0.0163891 *lens_ipow(begin_x, 2) + -5.55513e-05 *lens_ipow(begin_y, 4) + -5.71781e-07 *lens_ipow(begin_x, 6) + -4.51097e-05 *lens_ipow(begin_y, 5)*begin_dy*begin_lambda + -7.04006e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6) + -3.68607e-07 *lens_ipow(begin_x, 7)*begin_dx + -9.8157e-10 *lens_ipow(begin_x, 8) + -1.1835e-05 *lens_ipow(begin_y, 6)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -4.09824e-08 *lens_ipow(begin_x, 8)*lens_ipow(begin_dx, 2) + -7.06675e-10 *lens_ipow(begin_x, 8)*begin_y*begin_dy + -1.34421e-11 *lens_ipow(begin_x, 8)*lens_ipow(begin_y, 2)+0.0f;
    dx1_domega0[0][1] =  + -35.52 *begin_dx*begin_dy + -0.243603 *begin_y*begin_dx + -0.00685148 *begin_x*lens_ipow(begin_y, 2)*begin_dy + -0.000172488 *begin_x*lens_ipow(begin_y, 3) + -0.00278024 *lens_ipow(begin_x, 3)*begin_dy + -4.51097e-05 *lens_ipow(begin_y, 5)*begin_dx*begin_lambda + -3.3471e-09 *lens_ipow(begin_x, 7)*begin_y + -2.36701e-05 *lens_ipow(begin_y, 6)*begin_dx*begin_dy*lens_ipow(begin_lambda, 2) + -7.06675e-10 *lens_ipow(begin_x, 8)*begin_y*begin_dx+0.0f;
    dx1_domega0[1][0] =  + -0.438608 *begin_y*begin_dx + -0.0076665 *begin_x*begin_y + -706.611 *lens_ipow(begin_dx, 3)*begin_dy + -13.7948 *begin_x*lens_ipow(begin_dx, 2)*begin_dy + -7.39776e-05 *begin_x*lens_ipow(begin_y, 3) + -726.851 *begin_dx*lens_ipow(begin_dy, 3)*begin_lambda + 0.403648 *begin_x*begin_y*lens_ipow(begin_dy, 2)*begin_lambda + -0.0346779 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3) + -2.56829e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3) + -1.74027e-07 *lens_ipow(begin_x, 5)*begin_y+0.0f;
    dx1_domega0[1][1] =  + 37.2218  + 2.57287 *begin_lambda + -0.00300007 *lens_ipow(begin_x, 2) + -0.0178301 *lens_ipow(begin_y, 2)*begin_lambda + -176.653 *lens_ipow(begin_dx, 4) + -4.59828 *begin_x*lens_ipow(begin_dx, 3) + -1429.43 *lens_ipow(begin_dy, 4)*begin_lambda + -1090.28 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*begin_lambda + 0.807297 *begin_x*begin_y*begin_dx*begin_dy*begin_lambda + -73.0659 *begin_y*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 2) + -4.94397e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4) + -1.69844e-06 *lens_ipow(begin_y, 6)*begin_lambda + -6.45941e-07 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*begin_lambda + 0.000314963 *lens_ipow(begin_y, 4)*lens_ipow(begin_lambda, 4) + -0.000329969 *lens_ipow(begin_y, 5)*begin_dy*lens_ipow(begin_lambda, 2) + -0.0356594 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4)+0.0f;
    float invApJ[2][2];
    const float invdetap = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
    invApJ[0][0] =  dx1_domega0[1][1]*invdetap;
    invApJ[1][1] =  dx1_domega0[0][0]*invdetap;
    invApJ[0][1] = -dx1_domega0[0][1]*invdetap;
    invApJ[1][0] = -dx1_domega0[1][0]*invdetap;
    for(int i=0;i<2;i++)
    {
      dx += invApJ[0][i]*delta_ap[i];
      dy += invApJ[1][i]*delta_ap[i];
    }
    out[0] =  + 31.4721 *begin_dx + -1.24942 *begin_x + -8.62363 *begin_dx*lens_ipow(begin_dy, 2) + -8.08154 *lens_ipow(begin_dx, 3) + 1.92711 *begin_x*lens_ipow(begin_dx, 2)*begin_lambda + 0.0965951 *lens_ipow(begin_x, 2)*begin_dx*begin_lambda + 0.00100401 *lens_ipow(begin_x, 3)*begin_lambda + -12.7656 *begin_x*lens_ipow(begin_dx, 4) + -1.15776 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3) + -0.000272352 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx + -0.0447099 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2) + -5.65657e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2) + -0.000873516 *lens_ipow(begin_x, 4)*begin_dx + -7.10532e-06 *lens_ipow(begin_x, 5) + -0.0302932 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4) + -5.73157e-05 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2) + -8.65597e-09 *begin_x*lens_ipow(begin_y, 6) + -3.44891e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dx + -5.04907e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4) + -0.000489032 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx*begin_dy*begin_lambda + -1.0078e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dy*begin_lambda + -0.0220119 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 4)*begin_dy + -2.28423e-09 *begin_x*lens_ipow(begin_y, 7)*begin_dy + -3.57035e-09 *lens_ipow(begin_x, 7)*begin_y*begin_dy + -0.000571271 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 3) + -3.22394e-07 *lens_ipow(begin_x, 6)*begin_y*begin_dx*begin_dy*begin_lambda + -6.60252e-09 *lens_ipow(begin_y, 8)*lens_ipow(begin_dx, 3) + -0.0354233 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 4);
    out[1] =  + 61.6535 *begin_dy + -0.929108 *begin_y + -32.9208 *lens_ipow(begin_dy, 3) + -29.7135 *lens_ipow(begin_dx, 2)*begin_dy + -0.612 *begin_y*lens_ipow(begin_dy, 2) + -0.793736 *begin_x*begin_dx*begin_dy*begin_lambda + -0.002766 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + 0.000686615 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_lambda, 2) + -4.56655e-06 *lens_ipow(begin_x, 4)*begin_y + -3.33538e-08 *lens_ipow(begin_y, 7) + -8.35234e-07 *begin_x*lens_ipow(begin_y, 5)*begin_dx + -8.43292e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5) + 4.76629e-08 *lens_ipow(begin_y, 7)*begin_lambda + -0.0159298 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 3) + -2.01893e-06 *lens_ipow(begin_x, 5)*begin_y*begin_dx*begin_lambda + 1.86178e-06 *lens_ipow(begin_y, 6)*begin_dy*lens_ipow(begin_lambda, 2) + -1.10874e-08 *lens_ipow(begin_y, 8)*begin_dy + -4.5589e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6)*begin_dy + -4.54487e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 5)*begin_dx + -2.75121e-10 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5) + -1.5817e-08 *lens_ipow(begin_x, 6)*begin_y*lens_ipow(begin_lambda, 2) + -8.21278e-11 *lens_ipow(begin_y, 9)*begin_lambda + -1.17121e-09 *lens_ipow(begin_y, 9)*lens_ipow(begin_dy, 2) + -8.82038e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7)*lens_ipow(begin_dy, 2) + -1.473e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 6)*begin_dx*begin_dy + -4.83948e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2) + -1.19667e-10 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 6)*begin_dy + -2.7797e-11 *lens_ipow(begin_x, 8)*lens_ipow(begin_y, 2)*begin_dy;
    out[2] =  + 0.293479 *begin_dx + -0.0433309 *begin_x + -0.000738011 *lens_ipow(begin_x, 2)*begin_dx + 2.10863e-05 *lens_ipow(begin_x, 3)*begin_lambda + 0.0292307 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + 0.00162677 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_lambda, 2) + -8.60128e-08 *lens_ipow(begin_x, 5) + -7.58294e-05 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_dy + -2.02014e-06 *begin_x*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2) + -4.40985e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx*begin_dy + -9.87928e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dx + -0.00230272 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 4) + -9.08377e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dy + -1.47038e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4) + -0.000177774 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 3) + -5.21531e-06 *lens_ipow(begin_x, 5)*lens_ipow(begin_dx, 2) + -4.07573e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2) + -6.91901e-08 *lens_ipow(begin_x, 6)*begin_dx + 5.17608e-10 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*begin_lambda + -1.76835e-07 *lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 3) + -8.4765e-13 *begin_x*lens_ipow(begin_y, 8) + -9.2759e-11 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2)*begin_dx + -5.45227e-13 *lens_ipow(begin_x, 9) + 7.55821e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3)*begin_lambda + -4.26747e-08 *lens_ipow(begin_y, 7)*lens_ipow(begin_dx, 3)*begin_dy + -2.83241e-13 *begin_x*lens_ipow(begin_y, 9)*begin_dy + 1.07121e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 3) + -1.40982e-13 *lens_ipow(begin_x, 9)*begin_y*begin_dy;
    out[3] =  + -0.0161861 *begin_y + -0.00360374 *begin_dy*begin_lambda + -0.00258321 *begin_y*lens_ipow(begin_dx, 2) + -2.89929e-06 *lens_ipow(begin_y, 3) + -0.00319904 *begin_x*begin_dx*begin_dy + -4.43202e-05 *lens_ipow(begin_x, 2)*begin_dy + -2.6502e-06 *lens_ipow(begin_x, 2)*begin_y + -0.000715848 *lens_ipow(begin_y, 2)*begin_dy*begin_lambda + 7.67678e-06 *lens_ipow(begin_y, 3)*begin_lambda + -0.0345408 *begin_y*lens_ipow(begin_dy, 4) + 0.00123768 *lens_ipow(begin_y, 2)*begin_dy*lens_ipow(begin_lambda, 2) + -2.77182e-05 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 3) + -1.25742e-06 *lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 2) + -1.93824e-08 *lens_ipow(begin_y, 6)*begin_dy + -1.07784e-10 *lens_ipow(begin_y, 7) + -2.29357e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dx*begin_lambda + -3.03255e-09 *begin_x*lens_ipow(begin_y, 6)*begin_dx*begin_dy + -4.49879e-11 *begin_x*lens_ipow(begin_y, 7)*begin_dx + -1.1516e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + -1.20758e-12 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7) + -1.99146e-12 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 3) + -0.0117512 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 6) + -8.96345e-13 *lens_ipow(begin_y, 9)*lens_ipow(begin_dx, 2) + -0.000543455 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -3.27775e-13 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 8)*begin_dy + 1.4906e-09 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2) + -7.576e-13 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 4)*begin_dy + -3.61168e-13 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 3)*begin_dx;
    float pred_out_cs[7] = {0.0f};
    if (camera->lens_outer_pupil_geometry == "cyl-y") lens_cylinderToCs(out, out+2, pred_out_cs, pred_out_cs+3, - camera->lens_outer_pupil_curvature_radius, camera->lens_outer_pupil_curvature_radius, true);
    else if (camera->lens_outer_pupil_geometry == "cyl-x") lens_cylinderToCs(out, out+2, pred_out_cs, pred_out_cs+3, - camera->lens_outer_pupil_curvature_radius, camera->lens_outer_pupil_curvature_radius, false);
    else lens_sphereToCs(out, out+2, pred_out_cs, pred_out_cs+3, - camera->lens_outer_pupil_curvature_radius, camera->lens_outer_pupil_curvature_radius);
    float view[3] =
    {
      scene_x - pred_out_cs[0],
      scene_y - pred_out_cs[1],
      scene_z - pred_out_cs[2]
    };
    normalise(view);
    float out_new[5];
    if (camera->lens_outer_pupil_geometry == "cyl-y") lens_csToCylinder(pred_out_cs, view, out_new, out_new+2, - camera->lens_outer_pupil_curvature_radius, camera->lens_outer_pupil_curvature_radius, true);
    else if (camera->lens_outer_pupil_geometry == "cyl-x") lens_csToCylinder(pred_out_cs, view, out_new, out_new+2, - camera->lens_outer_pupil_curvature_radius, camera->lens_outer_pupil_curvature_radius, false);
    else lens_csToSphere(pred_out_cs, view, out_new, out_new+2, - camera->lens_outer_pupil_curvature_radius, camera->lens_outer_pupil_curvature_radius);
    const float delta_out[] = {out_new[2] - out[2], out_new[3] - out[3]};
    sqr_err = delta_out[0]*delta_out[0]+delta_out[1]*delta_out[1];
    float domega2_dx0[2][2];
    domega2_dx0[0][0] =  + -0.0433309  + -0.00147602 *begin_x*begin_dx + 6.3259e-05 *lens_ipow(begin_x, 2)*begin_lambda + 0.0292307 *lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + 0.00325354 *begin_x*begin_dx*lens_ipow(begin_lambda, 2) + -4.30064e-07 *lens_ipow(begin_x, 4) + -7.58294e-05 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_dy + -2.02014e-06 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2) + -8.81969e-06 *begin_x*lens_ipow(begin_y, 3)*begin_dx*begin_dy + -1.97586e-07 *begin_x*lens_ipow(begin_y, 4)*begin_dx + -0.00690817 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 4) + -2.72513e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dy + -4.41113e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4) + -0.000711096 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 3) + -2.60766e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2) + -2.03787e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2) + -4.15141e-07 *lens_ipow(begin_x, 5)*begin_dx + 1.55282e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_lambda + -8.4765e-13 *lens_ipow(begin_y, 8) + -5.56554e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*begin_dx + -4.90704e-12 *lens_ipow(begin_x, 8) + 2.26746e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3)*begin_lambda + -2.83241e-13 *lens_ipow(begin_y, 9)*begin_dy + 2.14242e-09 *begin_x*lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 3) + -1.26884e-12 *lens_ipow(begin_x, 8)*begin_y*begin_dy+0.0f;
    domega2_dx0[0][1] =  + -0.000227488 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + -8.08057e-06 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2) + -1.32295e-05 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx*begin_dy + -3.95171e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx + -2.72513e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dy + -5.88151e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3) + -8.15147e-10 *lens_ipow(begin_x, 5)*begin_y + 2.07043e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_lambda + -1.06101e-06 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 3) + -6.7812e-12 *begin_x*lens_ipow(begin_y, 7) + -1.85518e-10 *lens_ipow(begin_x, 6)*begin_y*begin_dx + 2.26746e-06 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 3)*begin_lambda + -2.98723e-07 *lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 3)*begin_dy + -2.54917e-12 *begin_x*lens_ipow(begin_y, 8)*begin_dy + 6.42725e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 3) + -1.40982e-13 *lens_ipow(begin_x, 9)*begin_dy+0.0f;
    domega2_dx0[1][0] =  + -0.00319904 *begin_dx*begin_dy + -8.86404e-05 *begin_x*begin_dy + -5.30039e-06 *begin_x*begin_y + -6.8807e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dx*begin_lambda + -3.03255e-09 *lens_ipow(begin_y, 6)*begin_dx*begin_dy + -4.49879e-11 *lens_ipow(begin_y, 7)*begin_dx + -2.30321e-06 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + -2.41516e-12 *begin_x*lens_ipow(begin_y, 7) + -1.19488e-11 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 3) + -0.000543455 *lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -6.55549e-13 *begin_x*lens_ipow(begin_y, 8)*begin_dy + 7.45302e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3)*begin_dx*lens_ipow(begin_dy, 2) + -4.5456e-12 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 4)*begin_dy + -2.52818e-12 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 3)*begin_dx+0.0f;
    domega2_dx0[1][1] =  + -0.0161861  + -0.00258321 *lens_ipow(begin_dx, 2) + -8.69786e-06 *lens_ipow(begin_y, 2) + -2.6502e-06 *lens_ipow(begin_x, 2) + -0.0014317 *begin_y*begin_dy*begin_lambda + 2.30304e-05 *lens_ipow(begin_y, 2)*begin_lambda + -0.0345408 *lens_ipow(begin_dy, 4) + 0.00247535 *begin_y*begin_dy*lens_ipow(begin_lambda, 2) + -0.000110873 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 3) + -6.28708e-06 *lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + -1.16295e-07 *lens_ipow(begin_y, 5)*begin_dy + -7.54486e-10 *lens_ipow(begin_y, 6) + -6.8807e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dx*begin_lambda + -1.81953e-08 *begin_x*lens_ipow(begin_y, 5)*begin_dx*begin_dy + -3.14915e-10 *begin_x*lens_ipow(begin_y, 6)*begin_dx + -3.45481e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 2) + -8.45306e-12 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 6) + -5.97439e-12 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 2) + -0.0235023 *begin_y*lens_ipow(begin_dy, 3)*lens_ipow(begin_lambda, 6) + -8.06711e-12 *lens_ipow(begin_y, 8)*lens_ipow(begin_dx, 2) + -0.00163037 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -2.6222e-12 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 7)*begin_dy + 4.47181e-09 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + -3.0304e-12 *lens_ipow(begin_x, 6)*lens_ipow(begin_y, 3)*begin_dy + -1.0835e-12 *lens_ipow(begin_x, 7)*lens_ipow(begin_y, 2)*begin_dx+0.0f;
    float invJ[2][2];
    const float invdet = 1.0f/(domega2_dx0[0][0]*domega2_dx0[1][1] - domega2_dx0[0][1]*domega2_dx0[1][0]);
    invJ[0][0] =  domega2_dx0[1][1]*invdet;
    invJ[1][1] =  domega2_dx0[0][0]*invdet;
    invJ[0][1] = -domega2_dx0[0][1]*invdet;
    invJ[1][0] = -domega2_dx0[1][0]*invdet;
    for(int i=0;i<2;i++)
    {
      x += 0.72 * invJ[0][i] * delta_out[i];
      y += 0.72 * invJ[1][i] * delta_out[i];
    }
    if(sqr_err>prev_sqr_err) error |= 1;
    if(sqr_ap_err>prev_sqr_ap_err) error |= 2;
    if(out[0]!=out[0]) error |= 4;
    if(out[1]!=out[1]) error |= 8;
    // reset error code for first few iterations.
    if(k<10) error = 0;
  }
}
else
  error = 128;
if(out[0]*out[0]+out[1]*out[1] > camera->lens_outer_pupil_radius*camera->lens_outer_pupil_radius) error |= 16;
const float begin_x = x;
const float begin_y = y;
const float begin_dx = dx;
const float begin_dy = dy;
const float begin_lambda = lambda;
if(error==0)
  out[4] =  + 0.191524  + 0.361439 *begin_lambda + -0.243566 *lens_ipow(begin_lambda, 2) + -0.0810706 *lens_ipow(begin_dx, 2) + -0.00407108 *begin_x*begin_dx + -0.213413 *lens_ipow(begin_dy, 2)*begin_lambda + -0.00941468 *begin_y*begin_dy*begin_lambda + -0.000764146 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -4.26506e-07 *lens_ipow(begin_y, 4) + -0.00209159 *begin_x*begin_y*begin_dx*begin_dy + -6.03785e-05 *begin_x*lens_ipow(begin_y, 2)*begin_dx + -0.000952859 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + -2.26752e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2) + -0.00168104 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2)*lens_ipow(begin_lambda, 2) + -1.11775e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 3)*begin_dy + -7.20214e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*begin_dx + -2.01871e-07 *lens_ipow(begin_x, 4)*begin_y*begin_dy + -4.46989e-09 *lens_ipow(begin_x, 6) + -1.96065e-09 *lens_ipow(begin_y, 7)*begin_dy + -9.9893e-12 *lens_ipow(begin_y, 8) + -2.12143e-07 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*lens_ipow(begin_dy, 2) + -9.33122e-08 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -1.90923e-11 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4) + -2.0423e-09 *lens_ipow(begin_x, 7)*begin_dx + -2.8273e-07 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dx*begin_dy*begin_lambda + -2.52677e-10 *lens_ipow(begin_y, 8)*lens_ipow(begin_dy, 2) + -5.69299e-09 *lens_ipow(begin_x, 7)*lens_ipow(begin_dx, 3) + -3.37139e-10 *lens_ipow(begin_x, 8)*lens_ipow(begin_dx, 2);
else
  out[4] = 0.0f;
} break;

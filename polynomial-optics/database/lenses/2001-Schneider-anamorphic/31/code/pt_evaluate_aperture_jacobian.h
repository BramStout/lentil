case Schneider_anamorphic_2001_31mm:
{
const float dx00 =  + 0.609883  + 0.0437844 *lambda + -0.765068 *lens_ipow(dx, 2) + -0.0327781 *x*dx + -0.000629873 *lens_ipow(x, 2) + -0.00342574 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000172488 *lens_ipow(y, 3)*dy + -2.95078e-06 *lens_ipow(y, 4) + -0.00417036 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -3.43068e-06 *lens_ipow(x, 5)*dx + -3.34347e-08 *lens_ipow(x, 6) + 5.10669e-09 *lens_ipow(y, 6)*lambda + -1.40801e-09 *x*lens_ipow(y, 6)*dx + -1.29012e-06 *lens_ipow(x, 6)*lens_ipow(dx, 2) + -2.34297e-08 *lens_ipow(x, 6)*y*dy + -4.14272e-10 *lens_ipow(x, 6)*lens_ipow(y, 2) + -7.85256e-09 *lens_ipow(x, 7)*dx + -1.09286e-07 *lens_ipow(x, 7)*lens_ipow(dx, 3) + -5.6534e-09 *lens_ipow(x, 7)*y*dx*dy + -1.07537e-10 *lens_ipow(x, 7)*lens_ipow(y, 2)*dx+0.0f;
const float dx01 =  + -0.243603 *dx*dy + -0.000222205 *lens_ipow(y, 3)*dx + -0.00685148 *x*y*lens_ipow(dy, 2) + -0.000517463 *x*lens_ipow(y, 2)*dy + -1.18031e-05 *x*lens_ipow(y, 3) + -0.000225549 *lens_ipow(y, 4)*dx*dy*lambda + 3.06401e-08 *x*lens_ipow(y, 5)*lambda + -4.22404e-09 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx + -3.3471e-09 *lens_ipow(x, 7)*dy + -1.18363e-10 *lens_ipow(x, 7)*y + -7.10103e-05 *lens_ipow(y, 5)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -7.06675e-10 *lens_ipow(x, 8)*dx*dy + -2.68842e-11 *lens_ipow(x, 8)*y*dx+0.0f;
const float dx02 =  + 38.1292  + 1.87968 *lambda + -17.76 *lens_ipow(dy, 2) + -66.8272 *lens_ipow(dx, 2) + -0.243603 *y*dy + -1.53014 *x*dx + -0.0163891 *lens_ipow(x, 2) + -5.55513e-05 *lens_ipow(y, 4) + -5.71781e-07 *lens_ipow(x, 6) + -4.51097e-05 *lens_ipow(y, 5)*dy*lambda + -7.04006e-10 *lens_ipow(x, 2)*lens_ipow(y, 6) + -3.68607e-07 *lens_ipow(x, 7)*dx + -9.8157e-10 *lens_ipow(x, 8) + -1.1835e-05 *lens_ipow(y, 6)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -4.09824e-08 *lens_ipow(x, 8)*lens_ipow(dx, 2) + -7.06675e-10 *lens_ipow(x, 8)*y*dy + -1.34421e-11 *lens_ipow(x, 8)*lens_ipow(y, 2)+0.0f;
const float dx03 =  + -35.52 *dx*dy + -0.243603 *y*dx + -0.00685148 *x*lens_ipow(y, 2)*dy + -0.000172488 *x*lens_ipow(y, 3) + -0.00278024 *lens_ipow(x, 3)*dy + -4.51097e-05 *lens_ipow(y, 5)*dx*lambda + -3.3471e-09 *lens_ipow(x, 7)*y + -2.36701e-05 *lens_ipow(y, 6)*dx*dy*lens_ipow(lambda, 2) + -7.06675e-10 *lens_ipow(x, 8)*y*dx+0.0f;
const float dx04 =  + 1.87968 *dx + 0.0437844 *x + -4.51097e-05 *lens_ipow(y, 5)*dx*dy + 5.10669e-09 *x*lens_ipow(y, 6) + -2.36701e-05 *lens_ipow(y, 6)*dx*lens_ipow(dy, 2)*lambda+0.0f;
const float dx10 =  + -0.0076665 *y*dx + -0.00600015 *x*dy + -4.59828 *lens_ipow(dx, 3)*dy + -7.39776e-05 *lens_ipow(y, 3)*dx + -6.07391e-06 *x*lens_ipow(y, 3) + -5.12835e-06 *lens_ipow(x, 3)*y + 0.403648 *y*dx*lens_ipow(dy, 2)*lambda + -9.88794e-07 *x*lens_ipow(y, 4)*dy + -7.70486e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -8.70135e-07 *lens_ipow(x, 4)*y*dx + -2.58376e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy*lambda+0.0f;
const float dx11 =  + 0.600366  + 0.0506333 *lambda + -0.219304 *lens_ipow(dx, 2) + -0.00035283 *lens_ipow(y, 2) + -0.0076665 *x*dx + -0.0356602 *y*dy*lambda + -0.000221933 *x*lens_ipow(y, 2)*dx + -9.11087e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -1.28209e-06 *lens_ipow(x, 4) + 0.403648 *x*dx*lens_ipow(dy, 2)*lambda + -18.2665 *lens_ipow(dy, 4)*lens_ipow(lambda, 2) + -0.0260084 *lens_ipow(y, 2)*lens_ipow(dx, 4) + -3.91884e-08 *lens_ipow(y, 6) + -1.97759e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -7.70486e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -1.74027e-07 *lens_ipow(x, 5)*dx + -1.01906e-05 *lens_ipow(y, 5)*dy*lambda + -1.29188e-06 *lens_ipow(x, 4)*y*dy*lambda + 0.00125985 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 4) + -0.000824923 *lens_ipow(y, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.0475459 *lens_ipow(y, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 4)+0.0f;
const float dx12 =  + -0.438608 *y*dx + -0.0076665 *x*y + -706.611 *lens_ipow(dx, 3)*dy + -13.7948 *x*lens_ipow(dx, 2)*dy + -7.39776e-05 *x*lens_ipow(y, 3) + -726.851 *dx*lens_ipow(dy, 3)*lambda + 0.403648 *x*y*lens_ipow(dy, 2)*lambda + -0.0346779 *lens_ipow(y, 3)*lens_ipow(dx, 3) + -2.56829e-07 *lens_ipow(x, 3)*lens_ipow(y, 3) + -1.74027e-07 *lens_ipow(x, 5)*y+0.0f;
const float dx13 =  + 37.2218  + 2.57287 *lambda + -0.00300007 *lens_ipow(x, 2) + -0.0178301 *lens_ipow(y, 2)*lambda + -176.653 *lens_ipow(dx, 4) + -4.59828 *x*lens_ipow(dx, 3) + -1429.43 *lens_ipow(dy, 4)*lambda + -1090.28 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 0.807297 *x*y*dx*dy*lambda + -73.0659 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -4.94397e-07 *lens_ipow(x, 2)*lens_ipow(y, 4) + -1.69844e-06 *lens_ipow(y, 6)*lambda + -6.45941e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda + 0.000314963 *lens_ipow(y, 4)*lens_ipow(lambda, 4) + -0.000329969 *lens_ipow(y, 5)*dy*lens_ipow(lambda, 2) + -0.0356594 *lens_ipow(y, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 4)+0.0f;
const float dx14 =  + 2.57287 *dy + 0.0506333 *y + -0.0178301 *lens_ipow(y, 2)*dy + -285.885 *lens_ipow(dy, 5) + -363.426 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + 0.403648 *x*y*dx*lens_ipow(dy, 2) + -36.5329 *y*lens_ipow(dy, 4)*lambda + -1.69844e-06 *lens_ipow(y, 6)*dy + -6.45941e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*dy + 0.00125985 *lens_ipow(y, 4)*dy*lens_ipow(lambda, 3) + -0.000329969 *lens_ipow(y, 5)*lens_ipow(dy, 2)*lambda + -0.0475459 *lens_ipow(y, 4)*lens_ipow(dy, 3)*lens_ipow(lambda, 3)+0.0f;
const float dx20 =  + -0.0230885  + 0.00175023 *lambda + -1.36499e-05 *lens_ipow(x, 2) + -0.000392075 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -9.30842e-08 *lens_ipow(y, 4) + -0.0164622 *x*dx*lens_ipow(dy, 2) + -0.000915287 *x*y*dx*dy + -3.04341e-05 *x*lens_ipow(y, 2)*dx + -0.000568334 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -2.9206e-05 *lens_ipow(x, 2)*y*dy + -6.83161e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.440931 *lens_ipow(dx, 4)*lambda + -1.26107e-05 *lens_ipow(y, 3)*dy*lambda + -0.000658749 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -3.26235e-05 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -5.85742e-07 *lens_ipow(x, 5)*dx + -4.96104e-09 *lens_ipow(x, 6) + -0.000783663 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 3.0318e-09 *lens_ipow(x, 6)*lambda + -0.0162145 *lens_ipow(x, 2)*lens_ipow(dx, 6) + 1.33476e-05 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 4.01131e-07 *lens_ipow(x, 5)*dx*lens_ipow(lambda, 3)+0.0f;
const float dx21 =  + -0.00891547 *y*lens_ipow(dx, 3) + -0.000482634 *lens_ipow(y, 2)*dx*dy + -7.33038e-06 *lens_ipow(y, 3)*dx + -0.00078415 *x*y*lens_ipow(dx, 2) + -3.72337e-07 *x*lens_ipow(y, 3) + -0.000457644 *lens_ipow(x, 2)*dx*dy + -3.04341e-05 *lens_ipow(x, 2)*y*dx + -9.73534e-06 *lens_ipow(x, 3)*dy + -4.55441e-07 *lens_ipow(x, 3)*y + -3.7832e-05 *x*lens_ipow(y, 2)*dy*lambda + -0.00156733 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const float dx22 =  + 0.22924  + -0.258797 *lens_ipow(dy, 2) + -0.0133732 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.000160878 *lens_ipow(y, 3)*dy + -1.8326e-06 *lens_ipow(y, 4) + -0.00078415 *x*lens_ipow(y, 2)*dx + -0.00823111 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.000457644 *lens_ipow(x, 2)*y*dy + -1.5217e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + -43.7799 *lens_ipow(dx, 4)*lambda + -1.76372 *x*lens_ipow(dx, 3)*lambda + -0.000494062 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -1.30494e-05 *lens_ipow(x, 5)*dx + -9.76237e-08 *lens_ipow(x, 6) + -0.0324289 *lens_ipow(x, 3)*lens_ipow(dx, 5) + 5.33906e-06 *lens_ipow(x, 5)*dx*lens_ipow(lambda, 3) + 6.68551e-08 *lens_ipow(x, 6)*lens_ipow(lambda, 3)+0.0f;
const float dx23 =  + -0.517594 *dx*dy + -0.000160878 *lens_ipow(y, 3)*dx + -0.0164622 *lens_ipow(x, 2)*dx*dy + -0.000457644 *lens_ipow(x, 2)*y*dx + -0.000378889 *lens_ipow(x, 3)*dy + -9.73534e-06 *lens_ipow(x, 3)*y + -1.26107e-05 *x*lens_ipow(y, 3)*lambda + -0.00156733 *x*lens_ipow(y, 2)*dy*lens_ipow(lambda, 3)+0.0f;
const float dx24 =  + 0.00175023 *x + -8.75598 *lens_ipow(dx, 5) + -0.440931 *x*lens_ipow(dx, 4) + -1.26107e-05 *x*lens_ipow(y, 3)*dy + -0.00235099 *x*lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 4.33115e-10 *lens_ipow(x, 7) + 8.00859e-06 *lens_ipow(x, 5)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 2.00565e-07 *lens_ipow(x, 6)*dx*lens_ipow(lambda, 2)+0.0f;
const float dx30 =  + -0.0265569 *dx*dy + -0.000740748 *x*dy + -9.44931e-06 *lens_ipow(y, 3)*dx + -3.67173e-07 *x*lens_ipow(y, 3) + -4.17412e-07 *lens_ipow(x, 3)*y + -1.16105e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 0.000168133 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2)*lambda + -6.92187e-08 *x*lens_ipow(y, 4)*dy*lambda + -2.85975e-07 *lens_ipow(x, 4)*y*dx*lambda + 3.43019e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -6.54596e-08 *lens_ipow(x, 5)*y*lens_ipow(dx, 2)*lens_ipow(lambda, 2)+0.0f;
const float dx31 =  + -0.0228907  + 0.00208052 *lambda + -0.00219241 *y*dy + -3.12695e-05 *lens_ipow(y, 2) + -0.0893952 *lens_ipow(dy, 2)*lambda + -0.000557685 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000545879 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -2.83479e-05 *x*lens_ipow(y, 2)*dx + -5.50759e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -1.04353e-07 *lens_ipow(x, 4) + -0.0275384 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -2.36839e-09 *lens_ipow(y, 6) + -5.80526e-08 *lens_ipow(x, 4)*y*dy + 0.00990782 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -3.26213e-07 *lens_ipow(y, 5)*dy*lambda + 0.000504399 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lambda + -1.38437e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + -5.7195e-08 *lens_ipow(x, 5)*dx*lambda + -4.16433e-10 *lens_ipow(y, 7)*dy + -1.09563e-07 *lens_ipow(y, 6)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 1.71509e-06 *lens_ipow(x, 4)*y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -1.09099e-08 *lens_ipow(x, 6)*lens_ipow(dx, 2)*lens_ipow(lambda, 2)+0.0f;
const float dx32 =  + -1.24434 *dx*dy + -0.0265569 *x*dy + -0.000363919 *lens_ipow(y, 3)*dx + -9.44931e-06 *x*lens_ipow(y, 3) + 0.00660521 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2)*lambda + 0.000168133 *x*lens_ipow(y, 3)*lens_ipow(dy, 2)*lambda + -5.7195e-08 *lens_ipow(x, 5)*y*lambda + 1.71509e-06 *lens_ipow(x, 4)*lens_ipow(y, 2)*dx*dy*lens_ipow(lambda, 2) + -2.18199e-08 *lens_ipow(x, 6)*y*dx*lens_ipow(lambda, 2)+0.0f;
const float dx33 =  + 0.247936  + -0.62217 *lens_ipow(dx, 2) + -0.0010962 *lens_ipow(y, 2) + -0.0265569 *x*dx + -0.000370374 *lens_ipow(x, 2) + -4.37117 *lens_ipow(dy, 2)*lambda + -0.17879 *y*dy*lambda + 0.0540778 *lens_ipow(lambda, 4) + -0.00037179 *lens_ipow(y, 3)*dy + -0.0413075 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -2.90263e-08 *lens_ipow(x, 4)*lens_ipow(y, 2) + 0.00660521 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy*lambda + -5.43689e-08 *lens_ipow(y, 6)*lambda + 0.000336266 *x*lens_ipow(y, 3)*dx*dy*lambda + -3.46093e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda + -5.20541e-11 *lens_ipow(y, 8) + -3.13038e-08 *lens_ipow(y, 7)*dy*lens_ipow(lambda, 2) + 8.57546e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2)+0.0f;
const float dx34 =  + 0.00208052 *y + -1.45706 *lens_ipow(dy, 3) + -0.0893952 *y*lens_ipow(dy, 2) + 0.216311 *dy*lens_ipow(lambda, 3) + -0.0275384 *lens_ipow(y, 2)*lens_ipow(dy, 3)*lambda + 0.00330261 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -5.43689e-08 *lens_ipow(y, 6)*dy + 0.000168133 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -3.46093e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dy + -5.7195e-08 *lens_ipow(x, 5)*y*dx + -3.13038e-08 *lens_ipow(y, 7)*lens_ipow(dy, 2)*lambda + 1.71509e-06 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lambda + -2.18199e-08 *lens_ipow(x, 6)*y*lens_ipow(dx, 2)*lambda+0.0f;
const float dx40 =  + -0.109165 *dx*lens_ipow(dy, 2) + -0.195941 *lens_ipow(dx, 3) + -0.00797539 *y*dx*dy + -0.000150901 *lens_ipow(y, 2)*dx + -0.00591542 *x*lens_ipow(dy, 2) + -0.0191953 *x*lens_ipow(dx, 2) + -0.000415625 *x*y*dy + -7.74462e-06 *x*lens_ipow(y, 2) + -0.000460359 *lens_ipow(x, 2)*dx + 0.0123243 *x*lens_ipow(dx, 4) + -4.87427e-08 *lens_ipow(x, 5) + -7.19019e-07 *lens_ipow(y, 4)*dx*lambda + -1.71546e-08 *lens_ipow(x, 6)*dx + 2.33569e-05 *lens_ipow(y, 4)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -2.22508e-09 *lens_ipow(x, 7)*lens_ipow(dx, 2)+0.0f;
const float dx41 =  + -0.201251 *lens_ipow(dy, 3) + -0.0166631 *y*lens_ipow(dy, 2) + -0.000408313 *lens_ipow(y, 2)*dy + -0.00797539 *x*dx*dy + -0.000301803 *x*y*dx + -0.000207812 *lens_ipow(x, 2)*dy + -7.74462e-06 *lens_ipow(x, 2)*y + -5.34016e-08 *lens_ipow(y, 5) + -0.000128657 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lambda + -2.87608e-06 *x*lens_ipow(y, 3)*dx*lambda + -2.41213e-08 *lens_ipow(y, 6)*dy + -6.12493e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -4.10748e-09 *lens_ipow(y, 7)*lens_ipow(dy, 2) + 9.34276e-05 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const float dx42 =  + -9.33725 *lens_ipow(dx, 3) + -0.109165 *x*lens_ipow(dy, 2) + -0.587824 *x*lens_ipow(dx, 2) + -0.00797539 *x*y*dy + -0.000150901 *x*lens_ipow(y, 2) + -0.0191953 *lens_ipow(x, 2)*dx + -0.000153453 *lens_ipow(x, 3) + 0.0246485 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -6.43285e-05 *lens_ipow(y, 4)*dx*lambda + -7.19019e-07 *x*lens_ipow(y, 4)*lambda + -2.45065e-09 *lens_ipow(x, 7) + -2.44997e-05 *lens_ipow(y, 5)*dx*dy*lens_ipow(lambda, 2) + 2.33569e-05 *x*lens_ipow(y, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -5.56269e-10 *lens_ipow(x, 8)*dx+0.0f;
const float dx43 =  + -9.26038 *lens_ipow(dy, 3) + -0.603753 *y*lens_ipow(dy, 2) + -0.0166631 *lens_ipow(y, 2)*dy + -0.000136104 *lens_ipow(y, 3) + -0.218331 *x*dx*dy + -0.00797539 *x*y*dx + -0.00591542 *lens_ipow(x, 2)*dy + -0.000207812 *lens_ipow(x, 2)*y + -3.4459e-09 *lens_ipow(y, 7) + -1.22499e-05 *lens_ipow(y, 5)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -1.02687e-09 *lens_ipow(y, 8)*dy + 4.67138e-05 *x*lens_ipow(y, 4)*dx*dy*lens_ipow(lambda, 2)+0.0f;
const float dx44 =  + 0.318465  + -0.438431 *lambda + -3.21642e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -7.19019e-07 *x*lens_ipow(y, 4)*dx + -2.44997e-05 *lens_ipow(y, 5)*lens_ipow(dx, 2)*dy*lambda + 4.67138e-05 *x*lens_ipow(y, 4)*dx*lens_ipow(dy, 2)*lambda+0.0f;
} break;

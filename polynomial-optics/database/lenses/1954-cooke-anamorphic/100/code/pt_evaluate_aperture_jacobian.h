case cooke_anamorphic_1954_100mm:
{
const float dx00 =  + 0.072029  + 0.230691 *y*dy + 0.0018659 *lens_ipow(y, 2) + 1.15105 *lens_ipow(dx, 2) + 3.19087 *lens_ipow(dx, 2)*lambda + 18.7122 *lens_ipow(dy, 2)*lambda + 0.0202041 *lens_ipow(lambda, 3) + 0.288439 *x*dx*lambda + 1.46138e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.0141452 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 0.0393111 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -9.73852e-07 *lens_ipow(y, 4) + 0.0017079 *x*lens_ipow(y, 2)*dx + -15.758 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.180565 *x*dx*lens_ipow(lambda, 3) + -0.0155527 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + 9.21776e-05 *x*lens_ipow(y, 3)*dx*dy + -1.42609 *x*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + 0.0022023 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 3) + 5.40222e-05 *lens_ipow(x, 4)*lens_ipow(lambda, 5)+0.0f;
const float dx01 =  + 10.5615 *dx*dy + 0.230691 *x*dy + 0.00373179 *x*y + 0.172461 *y*dx + 9.74256e-06 *lens_ipow(x, 3)*y + 0.0786222 *x*y*lens_ipow(dx, 2) + -3.89541e-06 *x*lens_ipow(y, 3) + 0.0017079 *lens_ipow(x, 2)*y*dx + 1.0397 *y*lens_ipow(dx, 3) + 0.000138266 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy+0.0f;
const float dx02 =  + 45.8346  + 10.5615 *y*dy + 2.3021 *x*dx + 0.0862307 *lens_ipow(y, 2) + 6.38174 *x*dx*lambda + 0.144219 *lens_ipow(x, 2)*lambda + 591.545 *lens_ipow(dy, 2)*lambda + 210.572 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.0786222 *x*lens_ipow(y, 2)*dx + 0.000853952 *lens_ipow(x, 2)*lens_ipow(y, 2) + 1.55955 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -545.774 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -0.0902823 *lens_ipow(x, 2)*lens_ipow(lambda, 3) + 1324.69 *lens_ipow(dx, 4)*lambda + 4.60888e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -2.13913 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.000550574 *lens_ipow(x, 4)*lens_ipow(lambda, 3)+0.0f;
const float dx03 =  + 10.5615 *y*dx + 0.230691 *x*y + 37.4244 *x*dy*lambda + 1183.09 *dx*dy*lambda + -31.516 *x*dy*lens_ipow(lambda, 2) + -1091.55 *dx*dy*lens_ipow(lambda, 3) + 4.60888e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx+0.0f;
const float dx04 =  + 3.19087 *x*lens_ipow(dx, 2) + 18.7122 *x*lens_ipow(dy, 2) + 0.0606124 *x*lens_ipow(lambda, 2) + 0.144219 *lens_ipow(x, 2)*dx + 591.545 *dx*lens_ipow(dy, 2) + 140.381 *lens_ipow(dx, 3)*lambda + 0.00943012 *lens_ipow(x, 3)*lambda + -31.516 *x*lens_ipow(dy, 2)*lambda + -1637.32 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.270847 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 2) + -0.0155527 *lens_ipow(x, 3)*lens_ipow(lambda, 2) + 264.939 *lens_ipow(dx, 5) + -1.42609 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lambda + 0.00165172 *lens_ipow(x, 4)*dx*lens_ipow(lambda, 2) + 5.40222e-05 *lens_ipow(x, 5)*lens_ipow(lambda, 4)+0.0f;
const float dx10 =  + 0.993006 *x*dy*lambda + 0.754668 *y*dx*lambda + 46.4296 *dx*dy*lambda + 0.0164455 *x*y*lambda + 0.0160401 *lens_ipow(y, 2)*dx*dy + 0.0037117 *lens_ipow(y, 3)*dx + 6.78509e-05 *x*lens_ipow(y, 3) + -0.00598473 *lens_ipow(y, 3)*dx*lambda + -0.000126282 *x*lens_ipow(y, 3)*lambda + 0.054157 *x*y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.00151324 *lens_ipow(x, 2)*y*dx*lens_ipow(lambda, 2)+0.0f;
const float dx11 =  + -0.120491 *lambda + 0.65693 *y*dy + 15.961 *lens_ipow(dy, 2) + 0.00561719 *lens_ipow(y, 2) + 17.125 *lens_ipow(dx, 2)*lambda + 0.754668 *x*dx*lambda + 0.00822273 *lens_ipow(x, 2)*lambda + 0.0320801 *x*y*dx*dy + 0.0111351 *x*lens_ipow(y, 2)*dx + 0.000101776 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.281422 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -1.13891e-05 *lens_ipow(y, 4) + -0.424918 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -0.0179542 *x*lens_ipow(y, 2)*dx*lambda + -0.000189424 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 0.739985 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 0.0041098 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 2) + 0.0270785 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 0.000504414 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 2) + 35.9169 *y*lens_ipow(dy, 3)*lens_ipow(lambda, 3) + 0.00371644 *lens_ipow(y, 2)*lens_ipow(lambda, 6)+0.0f;
const float dx12 =  + 34.2501 *y*dx*lambda + 2161.23 *dx*dy*lambda + 0.754668 *x*y*lambda + 46.4296 *x*dy*lambda + 0.0160401 *x*lens_ipow(y, 2)*dy + 0.0037117 *x*lens_ipow(y, 3) + 0.187614 *lens_ipow(y, 3)*dx + -0.283278 *lens_ipow(y, 3)*dx*lambda + -0.00598473 *x*lens_ipow(y, 3)*lambda + 0.054157 *lens_ipow(x, 2)*y*dx*lens_ipow(lambda, 2) + 0.000504414 *lens_ipow(x, 3)*y*lens_ipow(lambda, 2)+0.0f;
const float dx13 =  + 110.39  + -32.8199 *lambda + 0.328465 *lens_ipow(y, 2) + 31.922 *y*dy + 18.2262 *lens_ipow(lambda, 2) + 946.849 *lens_ipow(dy, 2) + 1080.62 *lens_ipow(dx, 2)*lambda + 0.496503 *lens_ipow(x, 2)*lambda + 46.4296 *x*dx*lambda + 0.0160401 *x*lens_ipow(y, 2)*dx + 0.493323 *lens_ipow(y, 3)*dy*lens_ipow(lambda, 2) + 0.00102745 *lens_ipow(y, 4)*lens_ipow(lambda, 2) + 53.8753 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const float dx14 =  + -32.8199 *dy + -0.120491 *y + 36.4524 *dy*lambda + 17.125 *y*lens_ipow(dx, 2) + 1080.62 *lens_ipow(dx, 2)*dy + 0.496503 *lens_ipow(x, 2)*dy + 0.754668 *x*y*dx + 46.4296 *x*dx*dy + 0.00822273 *lens_ipow(x, 2)*y + -0.141639 *lens_ipow(y, 3)*lens_ipow(dx, 2) + -0.00598473 *x*lens_ipow(y, 3)*dx + -6.31412e-05 *lens_ipow(x, 2)*lens_ipow(y, 3) + 0.493323 *lens_ipow(y, 3)*lens_ipow(dy, 2)*lambda + 0.0020549 *lens_ipow(y, 4)*dy*lambda + 0.054157 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lambda + 0.00100883 *lens_ipow(x, 3)*y*dx*lambda + 53.8753 *lens_ipow(y, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 0.00743289 *lens_ipow(y, 3)*lens_ipow(lambda, 5)+0.0f;
const float dx20 =  + -0.0233336  + -0.00138497 *lambda + -0.000104767 *y*dy + -0.0020969 *x*dx + 0.000961846 *lens_ipow(lambda, 2) + -1.91372e-06 *lens_ipow(y, 2) + -2.57858e-05 *lens_ipow(x, 2) + -0.01779 *lens_ipow(dy, 2) + -0.0513223 *lens_ipow(dx, 2) + -0.0677653 *lens_ipow(dx, 4) + -0.000513771 *x*y*dx*dy*lambda + 0.000144294 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + 2.20595e-08 *lens_ipow(x, 5)*dx + 4.07891e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + 3.8538e-10 *lens_ipow(x, 6) + -0.0234065 *x*lens_ipow(dx, 5)*lambda + 7.72826e-10 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda + 3.80447e-13 *lens_ipow(y, 8)*lambda + 8.23962e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*lens_ipow(dx, 2)*dy+0.0f;
const float dx21 =  + 0.0183302 *dx*dy + -0.000104767 *x*dy + -3.82744e-06 *x*y + -0.000362633 *y*dx + 0.00546325 *y*lens_ipow(dx, 3) + 0.573932 *lens_ipow(dx, 3)*dy*lambda + -0.000256885 *lens_ipow(x, 2)*dx*dy*lambda + 3.323e-06 *lens_ipow(y, 3)*dx*lambda + 1.63156e-10 *lens_ipow(x, 5)*y + 1.03043e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*lambda + 3.04358e-12 *x*lens_ipow(y, 7)*lambda + 4.94377e-09 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy+0.0f;
const float dx22 =  + -1.17521  + 0.0183302 *y*dy + -0.00104845 *lens_ipow(x, 2) + -0.571159 *lens_ipow(dy, 2) + -0.102645 *x*dx + -0.000181317 *lens_ipow(y, 2) + -2.06763 *lens_ipow(dx, 2)*lambda + -0.271061 *x*lens_ipow(dx, 3) + 0.00819487 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 1.72179 *y*lens_ipow(dx, 2)*dy*lambda + -0.000256885 *lens_ipow(x, 2)*y*dy*lambda + 8.3075e-07 *lens_ipow(y, 4)*lambda + 3.67658e-09 *lens_ipow(x, 6) + 1.75984 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -0.0585162 *lens_ipow(x, 2)*lens_ipow(dx, 4)*lambda + 3.29585e-09 *lens_ipow(x, 5)*lens_ipow(y, 3)*dx*dy+0.0f;
const float dx23 =  + 0.0183302 *y*dx + -0.000104767 *x*y + -1.14232 *dx*dy + -0.0355799 *x*dy + 0.573932 *y*lens_ipow(dx, 3)*lambda + -0.000256885 *lens_ipow(x, 2)*y*dx*lambda + 9.61961e-05 *lens_ipow(x, 3)*dy*lambda + 1.64792e-09 *lens_ipow(x, 5)*lens_ipow(y, 3)*lens_ipow(dx, 2)+0.0f;
const float dx24 =  + -0.00138497 *x + 0.00192369 *x*lambda + -0.68921 *lens_ipow(dx, 3) + 0.573932 *y*lens_ipow(dx, 3)*dy + -0.000256885 *lens_ipow(x, 2)*y*dx*dy + 8.3075e-07 *lens_ipow(y, 4)*dx + 4.8098e-05 *lens_ipow(x, 3)*lens_ipow(dy, 2) + 2.34646 *lens_ipow(dx, 3)*lens_ipow(lambda, 3) + -0.0117032 *lens_ipow(x, 2)*lens_ipow(dx, 5) + 2.57609e-10 *lens_ipow(x, 3)*lens_ipow(y, 4) + 3.80447e-13 *x*lens_ipow(y, 8)+0.0f;
const float dx30 =  + 0.00483743 *y*dx + 0.000104458 *x*y + 7.17245e-06 *lens_ipow(y, 3)*dx + -0.00252462 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + 0.0468842 *x*dy*lens_ipow(lambda, 4) + 2.25606 *dx*dy*lens_ipow(lambda, 4) + -8.37176e-05 *x*lens_ipow(y, 3)*lens_ipow(dy, 2)*lambda + 209.165 *lens_ipow(x, 2)*dx*lens_ipow(dy, 5) + 4.35701 *lens_ipow(x, 3)*lens_ipow(dy, 5) + 3.19115 *y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + 0.0784678 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + -262.545 *lens_ipow(x, 3)*lens_ipow(dy, 7) + 521391 *x*lens_ipow(dx, 2)*lens_ipow(dy, 7)+0.0f;
const float dx31 =  + -0.00986932  + -0.00135389 *lambda + 0.113656 *lens_ipow(dx, 2) + 0.00911416 *y*dy + 0.201375 *lens_ipow(dy, 2) + 0.00483743 *x*dx + 5.22289e-05 *lens_ipow(x, 2) + 7.38511e-05 *lens_ipow(y, 2) + 2.15174e-05 *x*lens_ipow(y, 2)*dx + 0.000909941 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.00148328 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.195519 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.00757387 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -0.000125576 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -1.97413e-09 *lens_ipow(y, 6)*lambda + 70.3648 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + 3.19115 *x*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + 0.0392339 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 5)+0.0f;
const float dx32 =  + 0.227311 *y*dx + 0.00483743 *x*y + 7.17245e-06 *x*lens_ipow(y, 3) + 0.000606627 *lens_ipow(y, 3)*dx + 106.644 *dx*dy*lens_ipow(lambda, 4) + -0.130346 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -0.00252462 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + 2.25606 *x*dy*lens_ipow(lambda, 4) + 69.7216 *lens_ipow(x, 3)*lens_ipow(dy, 5) + 140.73 *y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + 3.19115 *x*y*lens_ipow(dy, 2)*lens_ipow(lambda, 5) + 521391 *lens_ipow(x, 2)*dx*lens_ipow(dy, 7)+0.0f;
const float dx33 =  + 1.00882  + -0.319099 *lambda + 0.00455708 *lens_ipow(y, 2) + 0.402751 *y*dy + 22.5699 *lens_ipow(dy, 2)*lambda + 0.000988852 *lens_ipow(y, 3)*dy + 53.3221 *lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -0.130346 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + -0.00504925 *x*lens_ipow(y, 3)*dx*dy + 0.0234421 *lens_ipow(x, 2)*lens_ipow(lambda, 4) + 2.25606 *x*dx*lens_ipow(lambda, 4) + -8.37176e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + 348.608 *lens_ipow(x, 3)*dx*lens_ipow(dy, 4) + 5.44627 *lens_ipow(x, 4)*lens_ipow(dy, 4) + 140.73 *y*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 5) + 6.38229 *x*y*dx*dy*lens_ipow(lambda, 5) + 0.0784678 *lens_ipow(x, 2)*y*dy*lens_ipow(lambda, 5) + -459.454 *lens_ipow(x, 4)*lens_ipow(dy, 6) + 1.82487e+06 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 6)+0.0f;
const float dx34 =  + -0.319099 *dy + -0.00135389 *y + 7.52329 *lens_ipow(dy, 3) + 213.288 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3) + 0.0937684 *lens_ipow(x, 2)*dy*lens_ipow(lambda, 3) + 9.02425 *x*dx*dy*lens_ipow(lambda, 3) + -4.18588e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dy, 2) + -2.82019e-10 *lens_ipow(y, 7) + 351.824 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 15.9557 *x*y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 0.196169 *lens_ipow(x, 2)*y*lens_ipow(dy, 2)*lens_ipow(lambda, 4)+0.0f;
const float dx40 =  + -0.0226925 *dx + -0.000443737 *x + -0.00581064 *x*lens_ipow(dx, 2) + -0.000287932 *lens_ipow(x, 2)*dx + 2.95483 *dx*lens_ipow(dy, 2) + -3.42898e-06 *lens_ipow(x, 3) + 0.0574628 *x*lens_ipow(dy, 2) + -0.550793 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2) + 0.00670806 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -2.02577e-08 *lens_ipow(x, 3)*lens_ipow(y, 2) + -28.4578 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.00355084 *lens_ipow(x, 3)*lens_ipow(dy, 2) + 4.18385e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 2) + -485.97 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.000167391 *lens_ipow(y, 3)*dx*dy + -1.64296e-10 *x*lens_ipow(y, 6)+0.0f;
const float dx41 =  + -0.0110328 *dy + -0.000186261 *y + 0.15533 *lens_ipow(dx, 2)*dy + 0.0134161 *x*y*dx*lens_ipow(dy, 2) + -1.01289e-08 *lens_ipow(x, 4)*y + 4.18385e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 2) + 0.000502172 *x*lens_ipow(y, 2)*dx*dy + 0.187098 *lens_ipow(y, 2)*lens_ipow(dx, 4)*dy + -4.92889e-10 *lens_ipow(x, 2)*lens_ipow(y, 5)+0.0f;
const float dx42 =  + -0.0226925 *x + -1.1363 *dx + 145.358 *dx*lens_ipow(dy, 2) + -0.00581064 *lens_ipow(x, 2)*dx + 0.31066 *y*dx*dy + -9.59772e-05 *lens_ipow(x, 3) + 2.95483 *x*lens_ipow(dy, 2) + -0.183598 *lens_ipow(x, 3)*lens_ipow(dy, 2) + 0.00670806 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + -28.4578 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2) + 4.18385e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx + -1457.91 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -23961.1 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.000167391 *x*lens_ipow(y, 3)*dy + 0.249464 *lens_ipow(y, 3)*lens_ipow(dx, 3)*dy+0.0f;
const float dx43 =  + -0.0110328 *y + -0.818127 *dy + 145.358 *lens_ipow(dx, 2)*dy + 0.15533 *y*lens_ipow(dx, 2) + 5.90966 *x*dx*dy + 0.0574628 *lens_ipow(x, 2)*dy + -0.367195 *lens_ipow(x, 3)*dx*dy + 0.0134161 *x*lens_ipow(y, 2)*dx*dy + -28.4578 *lens_ipow(x, 2)*lens_ipow(dx, 2)*dy + -0.00177542 *lens_ipow(x, 4)*dy + -971.939 *x*lens_ipow(dx, 3)*dy + -11980.5 *lens_ipow(dx, 4)*dy + 0.000167391 *x*lens_ipow(y, 3)*dx + 0.062366 *lens_ipow(y, 3)*lens_ipow(dx, 4)+0.0f;
const float dx44 =  + 0.830007  + -2.27658 *lambda + 1.65041 *lens_ipow(lambda, 2)+0.0f;
} break;

case unsure_fisheye_1954_0mm:
{
const double dx00 =  + 0.707004  + -0.00188551 *lens_ipow(y, 2) + -0.00626693 *lens_ipow(x, 2) + -0.201269 *y*dy + -6.30137 *lens_ipow(dx, 2) + -0.396479 *x*dx + -6.72922 *lens_ipow(dy, 2) + 7.83146e-06 *lens_ipow(x, 4) + 0.0324302 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + 3.46491e-06 *lens_ipow(x, 4)*lambda + -0.000156886 *lens_ipow(y, 4)*lens_ipow(dx, 2) + 6.6599e-07 *lens_ipow(y, 5)*dy + 1.23244e-05 *lens_ipow(x, 4)*y*dy + 6.57771e-06 *lens_ipow(x, 5)*dx+0.0f;
const double dx01 =  + -0.00377103 *x*y + -0.201269 *x*dy + -0.000627545 *x*lens_ipow(y, 3)*lens_ipow(dx, 2) + 3.32995e-06 *x*lens_ipow(y, 4)*dy + 2.46488e-06 *lens_ipow(x, 5)*dy+0.0f;
const double dx02 =  + 23.4208  + 0.776572 *lens_ipow(lambda, 2) + -12.6027 *x*dx + -0.19824 *lens_ipow(x, 2) + -0.000313773 *x*lens_ipow(y, 4)*dx + 1.09629e-06 *lens_ipow(x, 6)+0.0f;
const double dx03 =  + -0.201269 *x*y + -13.4584 *x*dy + 0.0216202 *lens_ipow(x, 3)*dy*lambda + 6.6599e-07 *x*lens_ipow(y, 5) + 2.46488e-06 *lens_ipow(x, 5)*y+0.0f;
const double dx04 =  + 1.55314 *dx*lambda + 0.0108101 *lens_ipow(x, 3)*lens_ipow(dy, 2) + 6.92983e-07 *lens_ipow(x, 5)+0.0f;
const double dx10 =  + -0.146057 *y*dx + -0.00304959 *x*y + -0.000299504 *x*lens_ipow(y, 2)*dy*lambda + 5.03157e-06 *x*lens_ipow(y, 4)*dy + 7.02687e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 3.41356e-06 *lens_ipow(x, 4)*y*dx+0.0f;
const double dx11 =  + 0.682822  + -0.146057 *x*dx + -3.16666 *lens_ipow(dx, 2) + -0.0015248 *lens_ipow(x, 2) + -0.0046375 *lens_ipow(y, 2) + -5.31451 *lens_ipow(dy, 2) + -0.318253 *y*dy + -0.995533 *lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.000299504 *lens_ipow(x, 2)*y*dy*lambda + -0.000441986 *lens_ipow(y, 3)*dy*lambda + 5.16784e-06 *lens_ipow(y, 5)*dy + 1.00631e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 7.02687e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 6.82711e-07 *lens_ipow(x, 5)*dx+0.0f;
const double dx12 =  + -0.146057 *x*y + -6.33332 *y*dx + 180.107 *dx*dy + 2.34229e-06 *lens_ipow(x, 3)*lens_ipow(y, 3) + 6.82711e-07 *lens_ipow(x, 5)*y+0.0f;
const double dx13 =  + 22.3736  + -10.629 *y*dy + -0.159127 *lens_ipow(y, 2) + 90.0535 *lens_ipow(dx, 2) + -1.99107 *y*dy*lens_ipow(lambda, 2) + -0.000149752 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -0.000110497 *lens_ipow(y, 4)*lambda + 8.61306e-07 *lens_ipow(y, 6) + 2.51578e-06 *lens_ipow(x, 2)*lens_ipow(y, 4)+0.0f;
const double dx14 =  + -1.99107 *y*lens_ipow(dy, 2)*lambda + -0.000149752 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -0.000110497 *lens_ipow(y, 4)*dy+0.0f;
const double dx20 =  + -0.0319212  + -0.000812328 *lens_ipow(y, 2) + -0.00306471 *lens_ipow(x, 2) + -0.0852385 *y*dy + -0.181043 *x*dx + 0.000728616 *lens_ipow(x, 3)*dx + 1.33789e-05 *lens_ipow(x, 4) + 0.839644 *y*lens_ipow(dy, 3) + 4.12376e-09 *lens_ipow(y, 6) + -0.81328 *lens_ipow(x, 2)*lens_ipow(dy, 4) + -3.05566e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -0.000271553 *lens_ipow(x, 3)*y*dx*dy + 6.11785e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)+0.0f;
const double dx21 =  + -0.00162466 *x*y + -0.0852385 *x*dy + 0.839644 *x*lens_ipow(dy, 3) + 2.47426e-08 *x*lens_ipow(y, 5) + -3.05566e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -6.78883e-05 *lens_ipow(x, 4)*dx*dy + 2.44714e-08 *lens_ipow(x, 5)*y+0.0f;
const double dx22 =  + 284.452 *lens_ipow(dx, 2) + 119.055 *lens_ipow(dy, 2) + -0.0905213 *lens_ipow(x, 2) + 0.000182154 *lens_ipow(x, 4) + -2381.26 *lens_ipow(dy, 4) + -6.78883e-05 *lens_ipow(x, 4)*y*dy+0.0f;
const double dx23 =  + 238.11 *dx*dy + -0.0852385 *x*y + -9525.02 *dx*lens_ipow(dy, 3) + 2.51893 *x*y*lens_ipow(dy, 2) + -1.08437 *lens_ipow(x, 3)*lens_ipow(dy, 3) + -1.01855e-06 *lens_ipow(x, 3)*lens_ipow(y, 3) + -6.78883e-05 *lens_ipow(x, 4)*y*dx+0.0f;
const double dx24 = +0.0f;
const double dx30 =  + -0.0981654 *y*dx + -0.00209256 *x*y + 5.47466e-06 *lens_ipow(x, 3)*y + 5.90362e-06 *x*lens_ipow(y, 3) + -0.293993 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + 0.00992788 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -0.246405 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy+0.0f;
const double dx31 =  + -0.027436  + -0.0981654 *x*dx + -2.45392 *lens_ipow(dx, 2) + -0.00104628 *lens_ipow(x, 2) + -0.0028554 *lens_ipow(y, 2) + -0.172142 *y*dy + -0.400583 *y*lens_ipow(dy, 3) + 1.36866e-06 *lens_ipow(x, 4) + 8.85543e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.000213252 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 4.89979e-08 *lens_ipow(y, 6) + -0.587987 *x*y*dx*lens_ipow(dy, 3) + 0.00992788 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy+0.0f;
const double dx32 =  + -0.0981654 *x*y + -4.90784 *y*dx + -0.293993 *x*lens_ipow(y, 2)*lens_ipow(dy, 3) + 0.00992788 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + -0.246405 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy+0.0f;
const double dx33 =  + 0.170672 *lambda + 350.325 *lens_ipow(dy, 2) + -0.086071 *lens_ipow(y, 2) + -0.600874 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -8.5301e-05 *lens_ipow(y, 5)*dy + -0.88198 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 0.00496394 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.0821351 *lens_ipow(x, 3)*lens_ipow(dx, 3)+0.0f;
const double dx34 =  + 0.170672 *dy+0.0f;
const double dx40 =  + -0.00705509 *lens_ipow(y, 2)*dx + -1.34745e-05 *lens_ipow(x, 3) + -0.000111344 *x*lens_ipow(y, 2) + -0.748183 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -0.0394008 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -0.00065451 *lens_ipow(x, 4)*dx + -3.46316e-06 *lens_ipow(x, 5)+0.0f;
const double dx41 =  + -0.0141102 *x*y*dx + -1.30002e-05 *lens_ipow(y, 3) + -0.45137 *y*lens_ipow(dx, 2) + -0.000111344 *lens_ipow(x, 2)*y + -0.757601 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -0.0400734 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.000668431 *lens_ipow(y, 4)*dy + -3.55379e-06 *lens_ipow(y, 5)+0.0f;
const double dx42 =  + -0.00705509 *x*lens_ipow(y, 2) + -0.45137 *lens_ipow(y, 2)*dx + -0.748183 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -0.0197004 *lens_ipow(x, 4)*dx + -0.000130902 *lens_ipow(x, 5)+0.0f;
const double dx43 =  + -0.757601 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.0200367 *lens_ipow(y, 4)*dy + -0.000133686 *lens_ipow(y, 5)+0.0f;
const double dx44 =  + 0.469957  + -0.633725 *lambda+0.0f;
} break;

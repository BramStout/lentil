case angenieux_double_gauss_9999_50mm:
{
const float dx00 =  + -0.625383  + 0.70729 *lambda + -0.558055 *lens_ipow(lambda, 2) + 0.243664 *lens_ipow(dy, 2) + 0.233536 *lens_ipow(dx, 2) + 0.00539894 *y*dy + -0.00125972 *lens_ipow(y, 2) + -0.00388182 *lens_ipow(x, 2) + 0.000547845 *lens_ipow(y, 2)*lambda + 0.0450494 *x*dx*lambda + 0.00177639 *lens_ipow(x, 2)*lambda + 0.0981907 *y*lens_ipow(dx, 2)*dy + -7.28386e-07 *lens_ipow(y, 4) + 0.150354 *x*lens_ipow(dx, 3) + 3.21257 *lens_ipow(dx, 4)*lambda + 5.37895 *lens_ipow(dx, 2)*lens_ipow(dy, 4) + -0.000193197 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 2) + -4.71258e-08 *lens_ipow(x, 4)*lens_ipow(y, 2) + -1.99889e-08 *lens_ipow(x, 6) + -8.79329e-11 *lens_ipow(x, 2)*lens_ipow(y, 6)+0.0f;
const float dx01 =  + 0.157666 *dx*dy + 0.0122851 *y*dx + 0.00539894 *x*dy + -0.00251943 *x*y + 0.00109569 *x*y*lambda + 0.0981907 *x*lens_ipow(dx, 2)*dy + -2.91354e-06 *x*lens_ipow(y, 3) + 0.000980358 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -1.88503e-08 *lens_ipow(x, 5)*y + 4.76941 *lens_ipow(dx, 5)*dy*lambda + -1.75866e-10 *lens_ipow(x, 3)*lens_ipow(y, 5)+0.0f;
const float dx02 =  + 50.0087  + -19.0752 *lens_ipow(dy, 2) + -69.9453 *lens_ipow(dx, 2) + 0.157666 *y*dy + 0.00614257 *lens_ipow(y, 2) + 0.467072 *x*dx + 0.0225247 *lens_ipow(x, 2)*lambda + 0.196381 *x*y*dx*dy + 0.22553 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 156.802 *lens_ipow(dx, 4)*lambda + 12.8503 *x*lens_ipow(dx, 3)*lambda + 0.000245089 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 10.7579 *x*dx*lens_ipow(dy, 4) + -4.82991e-05 *lens_ipow(x, 4)*lens_ipow(lambda, 2) + 23.8471 *y*lens_ipow(dx, 4)*dy*lambda+0.0f;
const float dx03 =  + -38.1505 *dx*dy + 0.157666 *y*dx + 0.487328 *x*dy + 0.00539894 *x*y + 0.0981907 *x*y*lens_ipow(dx, 2) + 0.000490179 *lens_ipow(y, 4)*dx*dy + 21.5158 *x*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 4.76941 *y*lens_ipow(dx, 5)*lambda+0.0f;
const float dx04 =  + 0.70729 *x + -1.11611 *x*lambda + 0.000547845 *x*lens_ipow(y, 2) + 0.0225247 *lens_ipow(x, 2)*dx + 0.000592132 *lens_ipow(x, 3) + 31.3603 *lens_ipow(dx, 5) + 3.21257 *x*lens_ipow(dx, 4) + -9.65983e-05 *lens_ipow(x, 4)*dx*lambda + 4.76941 *y*lens_ipow(dx, 5)*dy+0.0f;
const float dx10 =  + 0.180395 *dx*dy + 0.00786971 *y*dx + 0.0105303 *x*dy + -0.0025832 *x*y + 0.00110678 *x*y*lambda + 0.0612953 *y*dx*lens_ipow(dy, 2) + -0.000952124 *lens_ipow(y, 2)*dx*dy + -1.88183e-05 *lens_ipow(y, 3)*dx + -1.60211e-08 *x*lens_ipow(y, 5) + 0.00112837 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + -1.68819e-05 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + -3.38319e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + -5.98202e-11 *lens_ipow(x, 7)*y+0.0f;
const float dx11 =  + -0.631852  + 0.7031 *lambda + -0.543383 *lens_ipow(lambda, 2) + 0.534516 *lens_ipow(dy, 2) + 0.259969 *lens_ipow(dx, 2) + 0.0351681 *y*dy + -0.00362233 *lens_ipow(y, 2) + 0.00786971 *x*dx + -0.0012916 *lens_ipow(x, 2) + 0.00150077 *lens_ipow(y, 2)*lambda + 0.000553391 *lens_ipow(x, 2)*lambda + -0.00667683 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000175369 *lens_ipow(y, 3)*dy + 0.0612953 *x*dx*lens_ipow(dy, 2) + -0.00190425 *x*y*dx*dy + -5.64549e-05 *x*lens_ipow(y, 2)*dx + -2.33203e-08 *lens_ipow(y, 6) + -4.00527e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + -4.22047e-06 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -2.5374e-08 *lens_ipow(x, 4)*lens_ipow(y, 2) + -7.47753e-12 *lens_ipow(x, 8)+0.0f;
const float dx12 =  + -39.5459 *dx*dy + 0.519938 *y*dx + 0.180395 *x*dy + 0.00786971 *x*y + 0.0612953 *x*y*lens_ipow(dy, 2) + -0.000952124 *x*lens_ipow(y, 2)*dy + -1.88183e-05 *x*lens_ipow(y, 3) + 0.000564185 *lens_ipow(x, 4)*dx*dy+0.0f;
const float dx13 =  + 49.4517  + 0.858956 *lambda + -58.1659 *lens_ipow(dy, 2) + -19.773 *lens_ipow(dx, 2) + 1.06903 *y*dy + 0.0175841 *lens_ipow(y, 2) + 0.180395 *x*dx + 0.00526514 *lens_ipow(x, 2) + -0.00445122 *lens_ipow(y, 3)*dy + -4.38423e-05 *lens_ipow(y, 4) + 0.122591 *x*y*dx*dy + -0.000952124 *x*lens_ipow(y, 2)*dx + 0.000282092 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -8.44094e-06 *lens_ipow(x, 4)*y*dy+0.0f;
const float dx14 =  + 0.858956 *dy + 0.7031 *y + -1.08677 *y*lambda + 0.000500256 *lens_ipow(y, 3) + 0.000553391 *lens_ipow(x, 2)*y+0.0f;
const float dx20 =  + -0.0123227  + -0.00885177 *lambda + 0.00725753 *lens_ipow(lambda, 2) + -0.00107725 *lens_ipow(dy, 2) + -5.80527e-05 *y*dy + 1.66458e-05 *lens_ipow(y, 2) + 5.32509e-05 *lens_ipow(x, 2) + -7.90104e-06 *lens_ipow(y, 2)*lambda + -0.000474204 *x*dx*lambda + -2.6362e-05 *lens_ipow(x, 2)*lambda + -0.00437584 *lens_ipow(dy, 4) + -2.56472e-07 *lens_ipow(y, 3)*dy + 7.27616e-05 *x*y*dx*dy + 4.31298e-05 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 8.87845e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.0128176 *lens_ipow(dx, 4)*lambda + 0.00222156 *x*dx*lens_ipow(dy, 2)*lambda + 0.0017619 *x*lens_ipow(dx, 3)*lambda + 4.80978e-11 *lens_ipow(y, 6) + 2.78902e-10 *lens_ipow(x, 6) + 1.29602e-14 *lens_ipow(x, 6)*lens_ipow(y, 4)+0.0f;
const float dx21 =  + -5.80527e-05 *x*dy + 3.32917e-05 *x*y + -1.58021e-05 *x*y*lambda + 0.000538801 *y*lens_ipow(dx, 3) + -7.69416e-07 *x*lens_ipow(y, 2)*dy + 3.63808e-05 *lens_ipow(x, 2)*dx*dy + 5.91897e-08 *lens_ipow(x, 3)*y + 2.88587e-10 *x*lens_ipow(y, 5) + 9.22679e-10 *lens_ipow(y, 6)*dx*dy + 7.40583e-15 *lens_ipow(x, 7)*lens_ipow(y, 3)+0.0f;
const float dx22 =  + -0.617487  + 0.0185685 *lambda + 0.153116 *lens_ipow(dy, 2) + 0.837758 *lens_ipow(dx, 2) + -0.000237102 *lens_ipow(x, 2)*lambda + 0.000808201 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 3.63808e-05 *lens_ipow(x, 2)*y*dy + 2.87532e-05 *lens_ipow(x, 3)*dx + -1.54876 *lens_ipow(dx, 4)*lambda + -0.0512705 *x*lens_ipow(dx, 3)*lambda + 0.00111078 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + 0.00264286 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 1.31811e-10 *lens_ipow(y, 7)*dy+0.0f;
const float dx23 =  + 0.306232 *dx*dy + -0.0021545 *x*dy + -5.80527e-05 *x*y + -0.0175034 *x*lens_ipow(dy, 3) + -2.56472e-07 *x*lens_ipow(y, 3) + 3.63808e-05 *lens_ipow(x, 2)*y*dx + 0.00222156 *lens_ipow(x, 2)*dx*dy*lambda + 1.31811e-10 *lens_ipow(y, 7)*dx+0.0f;
const float dx24 =  + 0.0185685 *dx + -0.00885177 *x + 0.0145151 *x*lambda + -7.90104e-06 *x*lens_ipow(y, 2) + -0.000237102 *lens_ipow(x, 2)*dx + -8.78732e-06 *lens_ipow(x, 3) + -0.309751 *lens_ipow(dx, 5) + -0.0128176 *x*lens_ipow(dx, 4) + 0.00111078 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2) + 0.000880952 *lens_ipow(x, 2)*lens_ipow(dx, 3)+0.0f;
const float dx30 =  + 0.00289076 *dx*dy + -0.000110164 *y*dx + 2.90099e-05 *x*y + -1.56415e-05 *x*y*lambda + 2.56728e-05 *lens_ipow(y, 2)*dx*dy + 8.26041e-08 *x*lens_ipow(y, 3) + 8.4731e-08 *lens_ipow(x, 3)*y + 1.99151e-06 *lens_ipow(y, 3)*lens_ipow(dx, 3) + -6.00708e-09 *lens_ipow(x, 5)*dy + -9.8098e-14 *x*lens_ipow(y, 8)*dy + 1.84606e-10 *lens_ipow(x, 7)*lens_ipow(dy, 3)+0.0f;
const float dx31 =  + -0.0119668  + -0.00911808 *lambda + 0.00703676 *lens_ipow(lambda, 2) + -0.00377317 *lens_ipow(dx, 2) + -0.000258236 *y*dy + 3.076e-05 *lens_ipow(y, 2) + -0.000110164 *x*dx + 1.4505e-05 *lens_ipow(x, 2) + -7.82077e-06 *lens_ipow(x, 2)*lambda + 0.00156292 *y*lens_ipow(dx, 2)*dy + 1.60429e-07 *lens_ipow(y, 4) + 5.13455e-05 *x*y*dx*dy + 1.23906e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + 2.11827e-08 *lens_ipow(x, 4) + -1.22252e-07 *lens_ipow(y, 4)*lambda + -0.0473817 *lens_ipow(dy, 6) + 5.97453e-06 *x*lens_ipow(y, 2)*lens_ipow(dx, 3) + -3.92392e-13 *lens_ipow(x, 2)*lens_ipow(y, 7)*dy+0.0f;
const float dx32 =  + 0.8099 *dx*dy + -0.00754634 *y*dx + 0.00289076 *x*dy + -0.000110164 *x*y + -0.865465 *dx*lens_ipow(dy, 3) + -1.19771 *lens_ipow(dx, 3)*dy + 0.00156292 *lens_ipow(y, 2)*dx*dy + 2.56728e-05 *x*lens_ipow(y, 2)*dy + 5.97453e-06 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)+0.0f;
const float dx33 =  + -0.61682  + 0.0113263 *lambda + 0.9863 *lens_ipow(dy, 2) + 0.40495 *lens_ipow(dx, 2) + -0.000129118 *lens_ipow(y, 2) + 0.00289076 *x*dx + -1.51599 *lens_ipow(dy, 4) + -1.2982 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.299426 *lens_ipow(dx, 4) + 0.000781458 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 2.56728e-05 *x*lens_ipow(y, 2)*dx + -0.28429 *y*lens_ipow(dy, 5) + -1.00118e-09 *lens_ipow(x, 6) + -4.9049e-14 *lens_ipow(x, 2)*lens_ipow(y, 8) + 6.92274e-11 *lens_ipow(x, 8)*lens_ipow(dy, 2)+0.0f;
const float dx34 =  + 0.0113263 *dy + -0.00911808 *y + 0.0140735 *y*lambda + -7.82077e-06 *lens_ipow(x, 2)*y + -2.44504e-08 *lens_ipow(y, 5)+0.0f;
const float dx40 =  + -0.0105681 *dx*lens_ipow(dy, 2) + -0.0101157 *lens_ipow(dx, 3) + -0.000127847 *y*dx*dy + -0.000224093 *x*lens_ipow(dx, 2) + -1.71489e-07 *x*lens_ipow(y, 2) + -1.86459e-07 *lens_ipow(x, 3) + -0.00252304 *y*dx*lens_ipow(dy, 3) + -0.00225779 *y*lens_ipow(dx, 3)*dy + -0.00410055 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.00303666 *x*lens_ipow(dx, 4) + -9.98696e-07 *lens_ipow(x, 3)*lens_ipow(dy, 2) + -0.00144744 *x*lens_ipow(dy, 4)*lambda + -7.96234e-12 *lens_ipow(x, 3)*lens_ipow(y, 4)+0.0f;
const float dx41 =  + -0.010597 *lens_ipow(dy, 3) + -0.0100229 *lens_ipow(dx, 2)*dy + -0.000337487 *y*lens_ipow(dy, 2) + -0.000245496 *y*lens_ipow(dx, 2) + -0.000127847 *x*dx*dy + -1.71489e-07 *lens_ipow(x, 2)*y + -0.00284392 *y*lens_ipow(dy, 4) + -0.00291708 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -9.77987e-10 *lens_ipow(y, 5) + -0.00252304 *x*dx*lens_ipow(dy, 3) + -0.00225779 *x*lens_ipow(dx, 3)*dy + -7.96234e-12 *lens_ipow(x, 4)*lens_ipow(y, 3)+0.0f;
const float dx42 =  + -0.941535 *lens_ipow(dx, 3) + -0.0200459 *y*dx*dy + -0.000245496 *lens_ipow(y, 2)*dx + -0.0105681 *x*lens_ipow(dy, 2) + -0.0303471 *x*lens_ipow(dx, 2) + -0.000127847 *x*y*dy + -0.000224093 *lens_ipow(x, 2)*dx + -2.76475 *dx*lens_ipow(dy, 2)*lambda + 1.91357 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.00291708 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -0.00252304 *x*y*lens_ipow(dy, 3) + -0.00677336 *x*y*lens_ipow(dx, 2)*dy + -0.00410055 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2) + -0.00607332 *lens_ipow(x, 2)*lens_ipow(dx, 3)+0.0f;
const float dx43 =  + -0.948636 *lens_ipow(dy, 3) + -0.0317909 *y*lens_ipow(dy, 2) + -0.0100229 *y*lens_ipow(dx, 2) + -0.000337487 *lens_ipow(y, 2)*dy + -0.0211363 *x*dx*dy + -0.000127847 *x*y*dx + -2.76475 *lens_ipow(dx, 2)*dy*lambda + 1.91357 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -0.00568784 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -0.00291708 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -0.00756913 *x*y*dx*lens_ipow(dy, 2) + -0.00225779 *x*y*lens_ipow(dx, 3) + -0.00410055 *lens_ipow(x, 2)*lens_ipow(dx, 2)*dy + -4.99348e-07 *lens_ipow(x, 4)*dy + -0.00289487 *lens_ipow(x, 2)*lens_ipow(dy, 3)*lambda+0.0f;
const float dx44 =  + 0.860742  + -2.35928 *lambda + 1.71093 *lens_ipow(lambda, 2) + -1.38237 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 1.91357 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.000723719 *lens_ipow(x, 2)*lens_ipow(dy, 4)+0.0f;
} break;

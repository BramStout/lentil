case angenieux_double_gauss_9999_50mm:
{
float pred_x;
float pred_y;
float pred_dx;
float pred_dy;
float sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const float begin_x = x + dist * dx;
  const float begin_y = y + dist * dy;
  const float begin_dx = dx;
  const float begin_dy = dy;
  const float begin_lambda = lambda;
  pred_x =  + 26.6197 *begin_dx + 7.28377 *begin_dx*begin_lambda + 1.08139 *begin_x*begin_lambda + -5.01205 *begin_dx*lens_ipow(begin_lambda, 2) + -14.6075 *begin_dx*lens_ipow(begin_dy, 2) + -15.7402 *lens_ipow(begin_dx, 3) + -1.60964 *begin_x*lens_ipow(begin_lambda, 2) + -0.180071 *begin_x*lens_ipow(begin_dy, 2) + -0.148274 *begin_x*lens_ipow(begin_dx, 2) + -0.000400788 *begin_x*lens_ipow(begin_y, 2) + 0.00185361 *lens_ipow(begin_x, 2)*begin_dx + -0.00039852 *lens_ipow(begin_x, 3) + 0.829158 *begin_x*lens_ipow(begin_lambda, 3) + -0.302493 *begin_y*lens_ipow(begin_dx, 3)*begin_dy + 7.1982e-06 *lens_ipow(begin_y, 4)*begin_dx + 0.296662 *begin_x*lens_ipow(begin_dy, 4) + -3.36856e-07 *begin_x*lens_ipow(begin_y, 4) + -0.0245448 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 2) + -0.000970578 *lens_ipow(begin_x, 2)*begin_y*begin_dx*begin_dy + -0.000461262 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2) + 11.7284 *lens_ipow(begin_dx, 7) + 0.0894363 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 4) + 0.000170292 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)*begin_dy + -1.0516e-08 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2) + -1.2545e-09 *lens_ipow(begin_x, 7) + 1.03998e-08 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2)*begin_lambda + -1.94162e-07 *lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 3) + -1.51297e-11 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 6);
  pred_y =  + 26.6948 *begin_dy + 7.01455 *begin_dy*begin_lambda + 1.13586 *begin_y*begin_lambda + -4.9092 *begin_dy*lens_ipow(begin_lambda, 2) + -15.9962 *lens_ipow(begin_dy, 3) + -14.3695 *lens_ipow(begin_dx, 2)*begin_dy + -1.76618 *begin_y*lens_ipow(begin_lambda, 2) + -0.130576 *begin_y*lens_ipow(begin_dy, 2) + -0.172393 *begin_y*lens_ipow(begin_dx, 2) + -0.000509892 *lens_ipow(begin_y, 3) + 0.00184984 *lens_ipow(begin_x, 2)*begin_dy + -0.000510953 *lens_ipow(begin_x, 2)*begin_y + 0.927801 *begin_y*lens_ipow(begin_lambda, 3) + 0.00349273 *lens_ipow(begin_y, 2)*begin_dy*begin_lambda + 0.000214599 *lens_ipow(begin_y, 3)*begin_lambda + 0.000195456 *lens_ipow(begin_x, 2)*begin_y*begin_lambda + 5.37529 *lens_ipow(begin_dy, 5) + 0.286436 *begin_y*lens_ipow(begin_dx, 4) + -0.0212604 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2)*begin_dy + -0.00053484 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2) + 0.031169 *begin_x*begin_y*begin_dx*lens_ipow(begin_dy, 2) + -0.000804279 *begin_x*lens_ipow(begin_y, 2)*begin_dx*begin_dy + -0.00874076 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 3) + -1.33511e-09 *lens_ipow(begin_y, 7) + -4.04232e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5) + -3.90863e-09 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 3) + -1.30944e-09 *lens_ipow(begin_x, 6)*begin_y + 1.51024 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3);
  pred_dx =  + 0.398681 *begin_dx + -0.0363638 *begin_x + 0.0180832 *begin_x*begin_lambda + -0.472729 *begin_dx*lens_ipow(begin_dy, 2) + -0.49175 *lens_ipow(begin_dx, 3) + -0.0201577 *begin_y*begin_dx*begin_dy + -0.0144351 *begin_x*lens_ipow(begin_lambda, 2) + -0.0090353 *begin_x*lens_ipow(begin_dy, 2) + -0.0315266 *begin_x*lens_ipow(begin_dx, 2) + 0.000264107 *begin_x*begin_y*begin_dy + -2.06891e-05 *begin_x*lens_ipow(begin_y, 2) + -3.26096e-05 *lens_ipow(begin_x, 3) + 1.51413e-05 *lens_ipow(begin_x, 3)*begin_lambda + -2.60519e-05 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -7.09764e-08 *begin_x*lens_ipow(begin_y, 4) + 2.34527e-06 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dx + 1.97031e-06 *lens_ipow(begin_x, 4)*begin_dx + 5.82862e-08 *begin_x*lens_ipow(begin_y, 4)*begin_lambda + -1.35723e-07 *lens_ipow(begin_y, 5)*begin_dx*begin_dy + 1.30794e-05 *lens_ipow(begin_x, 3)*begin_y*lens_ipow(begin_dx, 2)*begin_dy + 7.63043e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 2)*lens_ipow(begin_lambda, 2) + 1.35139e-08 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 3)*begin_dy + 7.1362e-06 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 3) + -1.19816e-07 *lens_ipow(begin_x, 5)*lens_ipow(begin_dy, 2) + -4.62921e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 2) + -3.72643e-09 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 2) + -2.17571e-13 *lens_ipow(begin_x, 9) + -2.88068e-15 *lens_ipow(begin_x, 3)*lens_ipow(begin_y, 8);
  pred_dy =  + 0.396192 *begin_dy + -0.0358346 *begin_y + 0.0171271 *begin_y*begin_lambda + -0.485814 *lens_ipow(begin_dy, 3) + -0.494404 *lens_ipow(begin_dx, 2)*begin_dy + -0.0140934 *begin_y*lens_ipow(begin_lambda, 2) + -0.0299414 *begin_y*lens_ipow(begin_dy, 2) + -0.01177 *begin_y*lens_ipow(begin_dx, 2) + 0.00026728 *lens_ipow(begin_y, 2)*begin_dy + -3.43741e-05 *lens_ipow(begin_y, 3) + -0.0216017 *begin_x*begin_dx*begin_dy + 0.000296267 *begin_x*begin_y*begin_dx + -3.45233e-05 *lens_ipow(begin_x, 2)*begin_y + 1.82715e-05 *lens_ipow(begin_y, 3)*begin_lambda + 1.97249e-05 *lens_ipow(begin_x, 2)*begin_y*begin_lambda + 0.00978365 *begin_y*lens_ipow(begin_dx, 4) + -4.50436e-05 *lens_ipow(begin_x, 2)*begin_y*lens_ipow(begin_dy, 2) + -2.38915e-07 *lens_ipow(begin_y, 5)*lens_ipow(begin_dy, 2) + -9.0005e-08 *lens_ipow(begin_y, 5)*lens_ipow(begin_dx, 2) + 2.88356e-09 *lens_ipow(begin_y, 6)*begin_dy + 2.87698e-09 *begin_x*lens_ipow(begin_y, 5)*begin_dx + -3.57622e-10 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 5) + 4.36136e-06 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 2)*begin_dy + -1.15155e-10 *lens_ipow(begin_x, 6)*begin_y + -2.24323e-13 *lens_ipow(begin_y, 9) + 1.40496e-10 *lens_ipow(begin_x, 4)*lens_ipow(begin_y, 4)*begin_dy + 1.07304e-10 *lens_ipow(begin_x, 5)*lens_ipow(begin_y, 3)*begin_dx + 3.40308e-12 *lens_ipow(begin_x, 8)*begin_dy;
  Eigen::Matrix2f dx1_domega0;
  dx1_domega0(0, 0) =  + 26.6197  + 7.28377 *begin_lambda + -5.01205 *lens_ipow(begin_lambda, 2) + -14.6075 *lens_ipow(begin_dy, 2) + -47.2207 *lens_ipow(begin_dx, 2) + -0.296547 *begin_x*begin_dx + 0.00185361 *lens_ipow(begin_x, 2) + -0.907479 *begin_y*lens_ipow(begin_dx, 2)*begin_dy + 7.1982e-06 *lens_ipow(begin_y, 4) + -0.0245448 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + -0.000970578 *lens_ipow(begin_x, 2)*begin_y*begin_dy + -0.000922523 *lens_ipow(begin_x, 3)*begin_dx + 82.0987 *lens_ipow(begin_dx, 6) + 0.0894363 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 4) + 0.000340585 *begin_x*lens_ipow(begin_y, 3)*begin_dx*begin_dy + -5.82485e-07 *lens_ipow(begin_y, 6)*lens_ipow(begin_dx, 2)+0.0f;
  dx1_domega0(0, 1) =  + -29.2149 *begin_dx*begin_dy + -0.360141 *begin_x*begin_dy + -0.302493 *begin_y*lens_ipow(begin_dx, 3) + 1.18665 *begin_x*lens_ipow(begin_dy, 3) + -0.0490897 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + -0.000970578 *lens_ipow(begin_x, 2)*begin_y*begin_dx + 0.357745 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 3) + 0.000170292 *begin_x*lens_ipow(begin_y, 3)*lens_ipow(begin_dx, 2)+0.0f;
  dx1_domega0(1, 0) =  + -28.739 *begin_dx*begin_dy + -0.344787 *begin_y*begin_dx + 1.14574 *begin_y*lens_ipow(begin_dx, 3) + -0.0425207 *lens_ipow(begin_y, 2)*begin_dx*begin_dy + 0.031169 *begin_x*begin_y*lens_ipow(begin_dy, 2) + -0.000804279 *begin_x*lens_ipow(begin_y, 2)*begin_dy + 6.04094 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3)+0.0f;
  dx1_domega0(1, 1) =  + 26.6948  + 7.01455 *begin_lambda + -4.9092 *lens_ipow(begin_lambda, 2) + -47.9885 *lens_ipow(begin_dy, 2) + -14.3695 *lens_ipow(begin_dx, 2) + -0.261152 *begin_y*begin_dy + 0.00184984 *lens_ipow(begin_x, 2) + 0.00349273 *lens_ipow(begin_y, 2)*begin_lambda + 26.8765 *lens_ipow(begin_dy, 4) + -0.0212604 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 2) + -0.00106968 *lens_ipow(begin_y, 3)*begin_dy + 0.062338 *begin_x*begin_y*begin_dx*begin_dy + -0.000804279 *begin_x*lens_ipow(begin_y, 2)*begin_dx + -0.0262223 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + 4.53071 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 2)+0.0f;
  Eigen::Matrix2f invJ;
  const float invdet = 1.0f/(dx1_domega0(0, 0)*dx1_domega0(1, 1) - dx1_domega0(0, 1)*dx1_domega0(1, 0));
  invJ(0, 0) =  dx1_domega0(1, 1)*invdet;
  invJ(1, 1) =  dx1_domega0(0, 0)*invdet;
  invJ(0, 1) = -dx1_domega0(0, 1)*invdet;
  invJ(1, 0) = -dx1_domega0(1, 0)*invdet;
  const std::vector<float> dx1 = {out_x - pred_x, out_y - pred_y};
  for(int i=0;i<2;i++)
  {
    dx += invJ(0, i)*dx1[i];
    dy += invJ(1, i)*dx1[i];
  }
  sqr_err = dx1[0]*dx1[0] + dx1[1]*dx1[1];
}
out_dx = pred_dx;
out_dy = pred_dy;
} break;

case angenieux_double_gauss_1953_49mm:
{
const float dx00 =  + 0.14819  + 0.312482 *lambda + -0.238972 *lens_ipow(lambda, 2) + -0.131913 *lens_ipow(dy, 2) + -0.193622 *lens_ipow(dx, 2) + -0.000578872 *lens_ipow(y, 2) + -0.00164558 *lens_ipow(x, 2) + 0.000183062 *lens_ipow(y, 2)*lambda + 0.000598897 *lens_ipow(x, 2)*lambda + 8.25363e-05 *lens_ipow(x, 3)*dx*lambda + 6.59632e-08 *lens_ipow(y, 5)*dy + 2.35198e-07 *x*lens_ipow(y, 4)*dx + 0.000924873 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + -8.29224e-09 *lens_ipow(x, 6) + -0.216652 *y*lens_ipow(dy, 7) + 0.00924303 *lens_ipow(y, 2)*lens_ipow(dx, 6) + -6.77506e-11 *lens_ipow(x, 2)*lens_ipow(y, 6) + -0.00277692 *lens_ipow(x, 3)*dx*lens_ipow(dy, 4) + -2.08978e-10 *lens_ipow(x, 6)*lens_ipow(y, 2) + 7.94211e-13 *lens_ipow(x, 8)*lens_ipow(y, 2)*lambda+0.0f;
const float dx01 =  + -0.0582372 *dx*dy + -0.00115774 *x*y + 0.000366125 *x*y*lambda + 0.0245292 *y*dx*lens_ipow(dy, 2) + 3.29816e-07 *x*lens_ipow(y, 4)*dy + 4.70397e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 0.000308291 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + -0.216652 *x*lens_ipow(dy, 7) + 0.0184861 *x*y*lens_ipow(dx, 6) + -1.35501e-10 *lens_ipow(x, 3)*lens_ipow(y, 5) + -5.9708e-11 *lens_ipow(x, 7)*y + 1.76491e-13 *lens_ipow(x, 9)*y*lambda+0.0f;
const float dx02 =  + 26.1763  + 7.14375 *lambda + -5.001 *lens_ipow(lambda, 2) + -15.0851 *lens_ipow(dy, 2) + -48.0029 *lens_ipow(dx, 2) + -0.0582372 *y*dy + -0.387245 *x*dx + 21.7565 *lens_ipow(dx, 4) + 0.0122646 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 2.06341e-05 *lens_ipow(x, 4)*lambda + 1.17599e-07 *lens_ipow(x, 2)*lens_ipow(y, 4) + 0.000616582 *lens_ipow(x, 3)*y*dx*dy + 0.0554582 *x*lens_ipow(y, 2)*lens_ipow(dx, 5) + -0.00069423 *lens_ipow(x, 4)*lens_ipow(dy, 4)+0.0f;
const float dx03 =  + -30.1702 *dx*dy + -0.0582372 *y*dx + -0.263826 *x*dy + 0.0245292 *lens_ipow(y, 2)*dx*dy + 6.59632e-08 *x*lens_ipow(y, 5) + 0.000308291 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + -1.51656 *x*y*lens_ipow(dy, 6) + -0.00277692 *lens_ipow(x, 4)*dx*lens_ipow(dy, 3)+0.0f;
const float dx04 =  + 7.14375 *dx + 0.312482 *x + -10.002 *dx*lambda + -0.477943 *x*lambda + 0.000183062 *x*lens_ipow(y, 2) + 0.000199632 *lens_ipow(x, 3) + 2.06341e-05 *lens_ipow(x, 4)*dx + 8.82456e-14 *lens_ipow(x, 9)*lens_ipow(y, 2)+0.0f;
const float dx10 =  + -0.00098783 *x*y + -0.303622 *dx*lens_ipow(dy, 3) + -0.00108222 *lens_ipow(y, 2)*dx*dy + 0.027564 *x*lens_ipow(dx, 2)*dy + 1.77976e-05 *lens_ipow(x, 3)*dy + 3.25118e-06 *x*lens_ipow(y, 3)*lens_ipow(lambda, 2) + -1.28576e-08 *x*lens_ipow(y, 5) + -0.000709922 *lens_ipow(x, 3)*lens_ipow(dy, 5) + 5.29188e-06 *lens_ipow(x, 4)*y*dx*lens_ipow(dy, 2) + -1.69565e-10 *lens_ipow(x, 5)*lens_ipow(y, 3)+0.0f;
const float dx11 =  + 1.10029 *lambda + -1.64836 *lens_ipow(lambda, 2) + -0.144102 *lens_ipow(dy, 2) + -0.175288 *lens_ipow(dx, 2) + -0.00126195 *lens_ipow(y, 2) + -0.000493915 *lens_ipow(x, 2) + 0.846195 *lens_ipow(lambda, 3) + 0.290532 *lens_ipow(dx, 4) + -0.00288306 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.00216444 *x*y*dx*dy + -1.69214e-08 *lens_ipow(y, 6) + 4.87677e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 2) + -3.21439e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + 1.26354e-08 *lens_ipow(y, 6)*lambda + -0.00681004 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 1.05838e-06 *lens_ipow(x, 5)*dx*lens_ipow(dy, 2) + -8.47826e-11 *lens_ipow(x, 6)*lens_ipow(y, 2)+0.0f;
const float dx12 =  + -31.9157 *dx*dy + -0.350576 *y*dx + 1.16213 *y*lens_ipow(dx, 3) + -0.303622 *x*lens_ipow(dy, 3) + -0.00108222 *x*lens_ipow(y, 2)*dy + 0.027564 *lens_ipow(x, 2)*dx*dy + 393.747 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + -0.00340502 *lens_ipow(y, 4)*dx*lens_ipow(dy, 3) + 1.05838e-06 *lens_ipow(x, 5)*y*lens_ipow(dy, 2)+0.0f;
const float dx13 =  + 26.2498  + 7.10235 *lambda + -4.89017 *lens_ipow(lambda, 2) + -51.3712 *lens_ipow(dy, 2) + -15.9578 *lens_ipow(dx, 2) + -0.288205 *y*dy + 40.0943 *lens_ipow(dy, 4) + -0.00192204 *lens_ipow(y, 3)*dy + -0.910867 *x*dx*lens_ipow(dy, 2) + -0.00108222 *x*lens_ipow(y, 2)*dx + 0.013782 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 4.44939e-06 *lens_ipow(x, 4) + 295.31 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + -0.00510753 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.000887403 *lens_ipow(x, 4)*lens_ipow(dy, 4) + 2.11675e-06 *lens_ipow(x, 5)*y*dx*dy+0.0f;
const float dx14 =  + 7.10235 *dy + 1.10029 *y + -9.78035 *dy*lambda + -3.29673 *y*lambda + 2.53858 *y*lens_ipow(lambda, 2) + 3.25118e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*lambda + 1.80506e-09 *lens_ipow(y, 7)+0.0f;
const float dx20 =  + -0.038616  + 0.0215778 *lambda + -0.0156734 *lens_ipow(lambda, 2) + -0.0321441 *lens_ipow(dx, 2) + 0.000320303 *y*dy + -2.12674e-05 *lens_ipow(y, 2) + -7.15879e-05 *lens_ipow(x, 2) + -0.0155727 *lens_ipow(dy, 2)*lambda + -7.57846e-08 *lens_ipow(y, 4) + 4.88282e-06 *x*lens_ipow(y, 2)*dx + -0.00013515 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 8.60851e-06 *lens_ipow(x, 3)*dx + 5.55619e-08 *lens_ipow(y, 4)*lambda + 3.32748e-05 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + 4.32429e-08 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 3.14387e-05 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -4.17111e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + 3.6163e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda + -1.30048e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 2) + -5.19237e-12 *lens_ipow(x, 8) + 0.00263717 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lens_ipow(lambda, 4) + -9.14391e-15 *lens_ipow(x, 2)*lens_ipow(y, 8) + 1.67948e-14 *lens_ipow(x, 10)*lambda+0.0f;
const float dx21 =  + -0.0203792 *dx*dy + 0.000320303 *x*dy + -4.25347e-05 *x*y + -3.03139e-07 *x*lens_ipow(y, 3) + 4.88282e-06 *lens_ipow(x, 2)*y*dx + 2.22248e-07 *x*lens_ipow(y, 3)*lambda + -7.56302e-07 *lens_ipow(y, 4)*dx*dy + 1.10916e-05 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + 4.32429e-08 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -1.66844e-09 *lens_ipow(x, 5)*y + 1.44652e-09 *lens_ipow(x, 5)*y*lambda + -1.73397e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 2) + -2.43838e-14 *lens_ipow(x, 3)*lens_ipow(y, 7)+0.0f;
const float dx22 =  + 0.399111  + -0.476676 *lens_ipow(dy, 2) + -1.47923 *lens_ipow(dx, 2) + -0.0203792 *y*dy + -0.0642882 *x*dx + 2.44141e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 2.15213e-06 *lens_ipow(x, 4) + -1.5126e-07 *lens_ipow(y, 5)*dy + 2.21832e-05 *lens_ipow(x, 3)*y*dx*dy + 2.3579e-05 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -8.66985e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx+0.0f;
const float dx23 =  + -0.953352 *dx*dy + -0.0203792 *y*dx + 0.000320303 *x*y + -0.0311454 *x*dy*lambda + -9.01002e-05 *lens_ipow(x, 3)*dy + -1.5126e-07 *lens_ipow(y, 5)*dx + 1.10916e-05 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + 1.44143e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + 0.00351622 *lens_ipow(x, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 4)+0.0f;
const float dx24 =  + 0.0215778 *x + -0.0313468 *x*lambda + -0.0155727 *x*lens_ipow(dy, 2) + 5.55619e-08 *x*lens_ipow(y, 4) + 7.2326e-10 *lens_ipow(x, 5)*lens_ipow(y, 2) + 0.00351622 *lens_ipow(x, 3)*lens_ipow(dy, 4)*lens_ipow(lambda, 3) + 1.5268e-15 *lens_ipow(x, 11)+0.0f;
const float dx30 =  + -0.0206358 *dx*dy + -4.48475e-05 *x*y + 0.00165335 *y*dx*lens_ipow(dy, 2) + 2.0047e-06 *lens_ipow(y, 3)*dx + 5.14145e-06 *x*lens_ipow(y, 2)*dy + 7.36328e-06 *lens_ipow(x, 2)*y*dx + -3.05982e-07 *lens_ipow(x, 3)*y + 2.93456e-07 *lens_ipow(x, 3)*y*lambda + -1.44036e-09 *x*lens_ipow(y, 5) + 2.72419e-05 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + 1.127e-09 *x*lens_ipow(y, 5)*lambda + -1.48239e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dy, 2) + 1.48655e-13 *lens_ipow(x, 9)*dy + -2.29957e-16 *lens_ipow(x, 7)*lens_ipow(y, 5)+0.0f;
const float dx31 =  + -0.0371845  + 0.0186105 *lambda + -0.0147028 *lens_ipow(lambda, 2) + -0.0318391 *lens_ipow(dy, 2) + -0.0106145 *lens_ipow(dx, 2) + -0.000100815 *lens_ipow(y, 2) + -2.24237e-05 *lens_ipow(x, 2) + 4.41307e-05 *lens_ipow(y, 2)*lambda + 8.95569e-06 *lens_ipow(y, 3)*dy + 0.00165335 *x*dx*lens_ipow(dy, 2) + 6.01411e-06 *x*lens_ipow(y, 2)*dx + 5.14145e-06 *lens_ipow(x, 2)*y*dy + 2.45443e-06 *lens_ipow(x, 3)*dx + -7.64956e-08 *lens_ipow(x, 4) + 7.3364e-08 *lens_ipow(x, 4)*lambda + 3.09704e-05 *lens_ipow(y, 3)*lens_ipow(dy, 3) + -4.96348e-07 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -3.60091e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + 2.81749e-09 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda + -2.5292e-12 *lens_ipow(y, 8) + -1.1118e-08 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dy, 2) + -1.43723e-16 *lens_ipow(x, 8)*lens_ipow(y, 4)+0.0f;
const float dx32 =  + -0.967781 *dx*dy + -0.021229 *y*dx + -0.0206358 *x*dy + 0.00165335 *x*y*lens_ipow(dy, 2) + 2.0047e-06 *x*lens_ipow(y, 3) + 2.45443e-06 *lens_ipow(x, 3)*y + -1.98539e-07 *lens_ipow(y, 5)*dx + 1.3621e-05 *lens_ipow(x, 4)*dx*dy+0.0f;
const float dx33 =  + 0.398051  + -1.45736 *lens_ipow(dy, 2) + -0.48389 *lens_ipow(dx, 2) + -0.0636781 *y*dy + -0.0206358 *x*dx + 2.23892e-06 *lens_ipow(y, 4) + 0.0033067 *x*y*dx*dy + 2.57073e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 2.32278e-05 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 6.81048e-06 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -7.41197e-09 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + 1.48655e-14 *lens_ipow(x, 10)+0.0f;
const float dx34 =  + 0.0186105 *y + -0.0294056 *y*lambda + 1.47102e-05 *lens_ipow(y, 3) + 7.3364e-08 *lens_ipow(x, 4)*y + 5.63498e-10 *lens_ipow(x, 2)*lens_ipow(y, 5)+0.0f;
const float dx40 =  + -0.000197552 *dx*lambda + 0.00500519 *dx*lens_ipow(dy, 2) + -8.35573e-05 *x*lens_ipow(dy, 2) + -4.66473e-07 *x*lens_ipow(y, 2) + 3.56275e-07 *x*lens_ipow(y, 2)*lambda + 2.99951e-05 *lens_ipow(y, 2)*lens_ipow(dx, 3) + 5.03318e-05 *x*y*lens_ipow(dy, 3) + 0.000105951 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -1.45624e-09 *lens_ipow(x, 5) + 0.0521717 *lens_ipow(dx, 7) + -1.29701e-11 *lens_ipow(x, 3)*lens_ipow(y, 4) + -1.36072e-06 *lens_ipow(x, 5)*lens_ipow(dx, 2)*lens_ipow(dy, 4) + 18.4259 *lens_ipow(dx, 7)*lens_ipow(dy, 4)*lambda+0.0f;
const float dx41 =  + -7.18501e-05 *y*lens_ipow(dx, 2) + -4.66473e-07 *lens_ipow(x, 2)*y + 3.56275e-07 *lens_ipow(x, 2)*y*lambda + 0.0147659 *lens_ipow(dy, 5) + 0.000106293 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -1.45773e-09 *lens_ipow(y, 5) + 5.99902e-05 *x*y*lens_ipow(dx, 3) + 2.51659e-05 *lens_ipow(x, 2)*lens_ipow(dy, 3) + 0.373313 *lens_ipow(dx, 4)*lens_ipow(dy, 3) + -2.25672e-05 *lens_ipow(y, 3)*lens_ipow(dy, 4) + -1.29701e-11 *lens_ipow(x, 4)*lens_ipow(y, 3)+0.0f;
const float dx42 =  + -0.000197552 *x*lambda + -0.86979 *dx*lens_ipow(dy, 2) + -0.762269 *lens_ipow(dx, 3) + -7.18501e-05 *lens_ipow(y, 2)*dx + 0.00500519 *x*lens_ipow(dy, 2) + 7.08619e-05 *lens_ipow(y, 3)*dx*dy + 8.99853e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.000105951 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -1.54084 *lens_ipow(dx, 5)*lens_ipow(lambda, 2) + 1.49325 *y*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 0.365202 *x*lens_ipow(dx, 6) + -4.53574e-07 *lens_ipow(x, 6)*dx*lens_ipow(dy, 4) + 128.981 *x*lens_ipow(dx, 6)*lens_ipow(dy, 4)*lambda+0.0f;
const float dx43 =  + -0.70963 *lens_ipow(dy, 3) + -0.86979 *lens_ipow(dx, 2)*dy + 0.0100104 *x*dx*dy + -8.35573e-05 *lens_ipow(x, 2)*dy + 0.0738296 *y*lens_ipow(dy, 4) + 3.54309e-05 *lens_ipow(y, 3)*lens_ipow(dx, 2) + 7.54977e-05 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -1.47155 *lens_ipow(dy, 5)*lambda + 1.11994 *y*lens_ipow(dx, 4)*lens_ipow(dy, 2) + -2.25672e-05 *lens_ipow(y, 4)*lens_ipow(dy, 3) + -9.07148e-07 *lens_ipow(x, 6)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 73.7036 *x*lens_ipow(dx, 7)*lens_ipow(dy, 3)*lambda+0.0f;
const float dx44 =  + 0.605633  + -1.67387 *lambda + 1.22142 *lens_ipow(lambda, 2) + -0.000197552 *x*dx + 1.78137e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.245258 *lens_ipow(dy, 6) + -0.513612 *lens_ipow(dx, 6)*lambda + 18.4259 *x*lens_ipow(dx, 7)*lens_ipow(dy, 4)+0.0f;
} break;

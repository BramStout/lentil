case angenieux_double_gauss_1953_100mm:
{
const float out_x =  + 99.6029 *dx + -0.604972 *x + 0.589799 *x*lambda + -46.567 *dx*lens_ipow(dy, 2) + -50.4391 *lens_ipow(dx, 3) + -0.421661 *x*lens_ipow(lambda, 2) + 0.245533 *x*lens_ipow(dy, 2) + 0.00402799 *x*y*dy + -0.000324364 *x*lens_ipow(y, 2) + -0.000239554 *lens_ipow(x, 3) + 3.83366 *lens_ipow(dx, 3)*lambda + 0.00581756 *lens_ipow(y, 2)*dx*lambda + 0.22487 *x*lens_ipow(dx, 2)*lambda + 0.000138208 *x*lens_ipow(y, 2)*lambda + 0.0166051 *lens_ipow(x, 2)*dx*lambda + 28.4313 *dx*lens_ipow(dy, 4) + 38.1492 *lens_ipow(dx, 5) + 1.49328 *y*dx*lens_ipow(dy, 3) + 2.50821 *x*lens_ipow(dx, 4) + 111.655 *lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + 3.14073 *y*lens_ipow(dx, 3)*dy*lambda + 4.17814 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 0.117107 *x*y*lens_ipow(dx, 2)*dy*lambda + 0.109461 *lens_ipow(y, 2)*dx*lens_ipow(dy, 4) + 0.154442 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.187102 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.168687 *lens_ipow(x, 2)*lens_ipow(dx, 5) + -7.85462e-05 *lens_ipow(x, 4)*dx*lens_ipow(lambda, 5);
const float out_y =  + 99.5754 *dy + -0.61982 *y + 0.62911 *y*lambda + -49.2403 *lens_ipow(dy, 3) + -41.4444 *lens_ipow(dx, 2)*dy + -0.450479 *y*lens_ipow(lambda, 2) + 0.245367 *y*lens_ipow(dx, 2) + -0.000230545 *lens_ipow(y, 3) + 0.117489 *x*dx*dy + 0.003996 *x*y*dx + -0.000249977 *lens_ipow(x, 2)*y + 0.295257 *y*lens_ipow(dy, 2)*lambda + 0.0167013 *lens_ipow(y, 2)*dy*lambda + 0.00544709 *lens_ipow(x, 2)*dy*lambda + 2.2613 *y*lens_ipow(dy, 4) + 2.14347 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 106.048 *lens_ipow(dy, 5)*lambda + 0.112315 *x*y*dx*lens_ipow(dy, 2)*lambda + 350.037 *lens_ipow(dx, 4)*lens_ipow(dy, 3) + 0.165826 *lens_ipow(y, 2)*lens_ipow(dy, 5) + 0.196342 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 2.7358 *x*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 11.3545 *x*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 0.278571 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 6.22855e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(lambda, 2) + -8.60707e-10 *lens_ipow(x, 2)*lens_ipow(y, 5) + -5.3217e-05 *lens_ipow(y, 4)*dy*lens_ipow(lambda, 4) + -369.689 *lens_ipow(dy, 7)*lens_ipow(lambda, 3);
const float out_dx =  + -0.612086 *dx + -0.00634092 *x + 0.00787218 *dx*lambda + -0.00352711 *x*lambda + 0.299727 *lens_ipow(dx, 3) + 0.00246374 *x*lens_ipow(lambda, 2) + -0.000770014 *x*lens_ipow(dy, 2) + -1.92831e-05 *x*y*dy + 1.76487e-06 *x*lens_ipow(y, 2) + -3.58077e-05 *lens_ipow(x, 2)*dx + 1.72823e-06 *lens_ipow(x, 3) + 0.552485 *dx*lens_ipow(dy, 2)*lambda + -0.464277 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.255015 *lens_ipow(dx, 5) + 0.0001025 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 6.22315e-05 *lens_ipow(y, 2)*lens_ipow(dx, 3) + 1.38708e-06 *lens_ipow(y, 3)*dx*dy + 0.000144289 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2) + 4.98087e-06 *lens_ipow(x, 2)*y*dx*dy + -0.462349 *lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + 0.000299233 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lambda + -0.00535266 *x*lens_ipow(dy, 6) + -0.0326943 *x*lens_ipow(dx, 4)*lens_ipow(dy, 2) + -0.0182562 *x*lens_ipow(dx, 6) + -0.0224582 *y*lens_ipow(dx, 5)*dy*lambda + 0.00230149 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda + 2.3277e-05 *lens_ipow(x, 3)*lens_ipow(dx, 4)*lambda + 4.94377e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2);
const float out_dy =  + -0.616182 *dy + -0.00634096 *y + 0.00958197 *dy*lambda + -0.00346076 *y*lambda + 0.323351 *lens_ipow(dy, 3) + 0.42883 *lens_ipow(dx, 2)*dy + 0.00237198 *y*lens_ipow(lambda, 2) + 1.71134e-06 *lens_ipow(y, 3) + 0.00190851 *x*dx*dy + -2.95858e-05 *x*y*dx + 1.79372e-06 *lens_ipow(x, 2)*y + -0.286451 *lens_ipow(dy, 5) + -0.669471 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.347893 *lens_ipow(dx, 4)*dy + -0.0423527 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -7.63639e-08 *lens_ipow(y, 4)*dy + -8.218e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + 0.106211 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 9.69185e-05 *x*y*lens_ipow(dx, 3)*lambda + 3.78872e-06 *x*lens_ipow(y, 2)*dx*dy*lambda + -0.0726444 *y*lens_ipow(dx, 2)*lens_ipow(lambda, 4) + -0.0490638 *y*lens_ipow(dx, 2)*lens_ipow(dy, 4) + -0.0400295 *y*lens_ipow(dy, 6)*lambda + 8.26533e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 3)*lambda + 0.0153174 *y*lens_ipow(dy, 4)*lens_ipow(lambda, 4) + -0.0681183 *x*dx*lens_ipow(dy, 7) + -0.336643 *x*lens_ipow(dx, 5)*lens_ipow(dy, 3) + 2.96913e-09 *lens_ipow(y, 6)*lens_ipow(dx, 2)*dy*lambda;
const float out_transmittance =  + 0.237617  + 0.856098 *lambda + -1.17094 *lens_ipow(lambda, 2) + 0.565231 *lens_ipow(lambda, 3) + -0.165059 *lens_ipow(dy, 4) + -0.166786 *lens_ipow(dx, 4) + -0.00286447 *y*lens_ipow(dy, 3) + -0.00541464 *y*lens_ipow(dx, 2)*dy + -5.31436e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -3.91207e-05 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.0042972 *x*lens_ipow(dx, 3) + -8.43545e-05 *x*y*dx*dy + -4.11736e-05 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -1.65244 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -0.00896813 *x*dx*lens_ipow(dy, 2)*lambda + -0.000102523 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lambda + 1.23659 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.000426865 *x*y*lens_ipow(dx, 3)*dy + -0.000574858 *lens_ipow(x, 2)*lens_ipow(dx, 4) + -0.506568 *lens_ipow(dy, 6)*lambda + -0.499987 *lens_ipow(dx, 6)*lambda + -0.0233181 *y*lens_ipow(dy, 5)*lambda + -0.00110739 *lens_ipow(y, 2)*lens_ipow(dy, 4)*lambda + -9.23433e-06 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lambda + -1.99073e-05 *lens_ipow(y, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -0.00111682 *x*y*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -0.052724 *x*lens_ipow(dx, 7)*lambda + -0.0138711 *lens_ipow(y, 2)*lens_ipow(dx, 4)*lens_ipow(dy, 4);
} break;

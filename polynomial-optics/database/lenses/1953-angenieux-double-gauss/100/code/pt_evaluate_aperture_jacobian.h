case angenieux_double_gauss_1953_100mm:
{
const float dx00 =  + 0.154173  + 0.26366 *lambda + -0.180979 *lens_ipow(lambda, 2) + -0.173349 *lens_ipow(dy, 2) + -0.19424 *lens_ipow(dx, 2) + -0.000101075 *lens_ipow(y, 2) + -0.000294516 *lens_ipow(x, 2) + 0.00391639 *x*dx*lambda + 0.266565 *lens_ipow(dy, 4) + 0.471407 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.27174 *lens_ipow(dx, 4) + 0.0125253 *y*lens_ipow(dx, 2)*dy + -0.000258374 *x*y*dx*dy + -0.000282996 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -0.0231681 *x*dx*lens_ipow(dy, 2)*lambda + -3.17881e-12 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const float dx01 =  + -0.022706 *dx*dy + -0.000202149 *x*y + 0.00266608 *y*dx*lambda + 0.00867553 *y*dx*lens_ipow(dy, 2) + 0.0125253 *x*lens_ipow(dx, 2)*dy + -0.000129187 *lens_ipow(x, 2)*dx*dy + -0.0210158 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -2.54305e-12 *lens_ipow(x, 5)*lens_ipow(y, 3)+0.0f;
const float dx02 =  + 53.368  + 13.3439 *lambda + -9.18561 *lens_ipow(lambda, 2) + -33.2685 *lens_ipow(dy, 2) + -100.549 *lens_ipow(dx, 2) + -0.022706 *y*dy + -0.38848 *x*dx + 0.00133304 *lens_ipow(y, 2)*lambda + 0.00195819 *lens_ipow(x, 2)*lambda + 14.3695 *lens_ipow(dy, 4) + 88.4555 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 78.5776 *lens_ipow(dx, 4) + 0.00433777 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.942814 *x*dx*lens_ipow(dy, 2) + 1.08696 *x*lens_ipow(dx, 3) + 0.0250505 *x*y*dx*dy + -0.000129187 *lens_ipow(x, 2)*y*dy + -0.000188664 *lens_ipow(x, 3)*dx + -0.011584 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -0.0315237 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2)+0.0f;
const float dx03 =  + -66.537 *dx*dy + -0.022706 *y*dx + -0.346699 *x*dy + 57.4779 *dx*lens_ipow(dy, 3) + 58.9703 *lens_ipow(dx, 3)*dy + 0.00867553 *lens_ipow(y, 2)*dx*dy + 1.06626 *x*lens_ipow(dy, 3) + 0.942814 *x*lens_ipow(dx, 2)*dy + 0.0125253 *x*y*lens_ipow(dx, 2) + -0.000129187 *lens_ipow(x, 2)*y*dx + -0.0231681 *lens_ipow(x, 2)*dx*dy*lambda+0.0f;
const float dx04 =  + 13.3439 *dx + 0.26366 *x + -18.3712 *dx*lambda + -0.361959 *x*lambda + 0.00133304 *lens_ipow(y, 2)*dx + 0.00195819 *lens_ipow(x, 2)*dx + -0.011584 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2) + -0.0210158 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lambda+0.0f;
const float dx10 =  + -0.0225367 *dx*dy + 0.00110985 *x*dy + -0.000201999 *x*y + 0.0126359 *y*dx*lens_ipow(dy, 2) + 0.00898316 *x*lens_ipow(dx, 2)*dy + -0.000235998 *lens_ipow(y, 2)*dx*dy*lambda + -0.0427741 *x*lens_ipow(dy, 5)*lambda + -2.49691e-12 *lens_ipow(x, 3)*lens_ipow(y, 5)+0.0f;
const float dx11 =  + 0.15413  + 0.263764 *lambda + -0.181196 *lens_ipow(lambda, 2) + -0.193336 *lens_ipow(dy, 2) + -0.17203 *lens_ipow(dx, 2) + -0.000294901 *lens_ipow(y, 2) + -0.000101 *lens_ipow(x, 2) + 0.00390651 *y*dy*lambda + 0.267088 *lens_ipow(dy, 4) + 0.468686 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.260471 *lens_ipow(dx, 4) + -0.000279193 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.0126359 *x*dx*lens_ipow(dy, 2) + -0.0239696 *y*lens_ipow(dx, 2)*dy*lambda + -0.000471995 *x*y*dx*dy*lambda + -3.12113e-12 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const float dx12 =  + -66.6635 *dx*dy + -0.34406 *y*dx + -0.0225367 *x*dy + 59.9045 *dx*lens_ipow(dy, 3) + 58.1656 *lens_ipow(dx, 3)*dy + 0.937373 *y*dx*lens_ipow(dy, 2) + 1.04189 *y*lens_ipow(dx, 3) + 0.0126359 *x*y*lens_ipow(dy, 2) + 0.00898316 *lens_ipow(x, 2)*dx*dy + -0.0239696 *lens_ipow(y, 2)*dx*dy*lambda + -0.000235998 *x*lens_ipow(y, 2)*dy*lambda+0.0f;
const float dx13 =  + 53.3126  + 13.6022 *lambda + -9.40104 *lens_ipow(lambda, 2) + -101.56 *lens_ipow(dy, 2) + -33.3318 *lens_ipow(dx, 2) + -0.386671 *y*dy + -0.0225367 *x*dx + 0.000554925 *lens_ipow(x, 2) + 0.00195325 *lens_ipow(y, 2)*lambda + 84.3866 *lens_ipow(dy, 4) + 89.8568 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 14.5414 *lens_ipow(dx, 4) + 1.06835 *y*lens_ipow(dy, 3) + 0.937373 *y*lens_ipow(dx, 2)*dy + -0.000186129 *lens_ipow(y, 3)*dy + 0.0252718 *x*y*dx*dy + 0.00449158 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -0.0119848 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -0.000235998 *x*lens_ipow(y, 2)*dx*lambda + -0.106935 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lambda+0.0f;
const float dx14 =  + 13.6022 *dy + 0.263764 *y + -18.8021 *dy*lambda + -0.362392 *y*lambda + 0.00195325 *lens_ipow(y, 2)*dy + -0.0119848 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + -0.000235998 *x*lens_ipow(y, 2)*dx*dy + -0.0213871 *lens_ipow(x, 2)*lens_ipow(dy, 5)+0.0f;
const float dx20 =  + -0.017775  + 0.00661073 *lambda + -0.00460932 *lens_ipow(lambda, 2) + -0.00566489 *lens_ipow(dy, 2) + -0.0144193 *lens_ipow(dx, 2) + 5.96917e-05 *y*dy + -2.84578e-06 *lens_ipow(y, 2) + 0.000114767 *x*dx + -8.32854e-06 *lens_ipow(x, 2) + 0.00407283 *lens_ipow(dy, 4) + -1.6956e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 2.30081e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + 0.00137659 *y*lens_ipow(dx, 4)*dy + -1.51957e-08 *lens_ipow(y, 4)*lens_ipow(dx, 2) + 1.22268e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 1.86791e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -2.53675e-08 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -8.4903e-08 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -0.0246534 *lens_ipow(dx, 6)*lambda+0.0f;
const float dx21 =  + -0.00986115 *dx*dy + -8.34459e-06 *y*dx + 5.96917e-05 *x*dy + -5.69156e-06 *x*y + -1.1304e-08 *lens_ipow(x, 3)*y + 1.53387e-08 *lens_ipow(x, 3)*y*lambda + 0.00137659 *x*lens_ipow(dx, 4)*dy + -6.07829e-08 *x*lens_ipow(y, 3)*lens_ipow(dx, 2) + 1.22268e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 9.33953e-10 *lens_ipow(x, 4)*y*dx + -0.119174 *dx*lens_ipow(dy, 7) + -0.000995671 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
const float dx22 =  + 0.400517  + -0.513191 *lens_ipow(dy, 2) + -1.60246 *lens_ipow(dx, 2) + -0.00986115 *y*dy + -4.1723e-06 *lens_ipow(y, 2) + -0.0288385 *x*dx + 5.73835e-05 *lens_ipow(x, 2) + 0.68357 *lens_ipow(dx, 4) + 1.38005 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 0.00550634 *x*y*lens_ipow(dx, 3)*dy + -3.03914e-08 *x*lens_ipow(y, 4)*dx + 4.66977e-10 *lens_ipow(x, 4)*lens_ipow(y, 2) + -3.39612e-08 *lens_ipow(x, 5)*dx + -0.147921 *x*lens_ipow(dx, 5)*lambda + -0.119174 *y*lens_ipow(dy, 7) + -0.000995671 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3)+0.0f;
const float dx23 =  + -1.02638 *dx*dy + -0.00986115 *y*dx + -0.0113298 *x*dy + 5.96917e-05 *x*y + 0.0162913 *x*lens_ipow(dy, 3) + 0.920036 *lens_ipow(dx, 3)*dy*lambda + 0.00137659 *x*y*lens_ipow(dx, 4) + 4.07559e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + -1.0147e-08 *lens_ipow(x, 5)*dy + -0.834221 *y*dx*lens_ipow(dy, 6) + -0.000995671 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2)+0.0f;
const float dx24 =  + 0.00661073 *x + -0.00921865 *x*lambda + 0.460018 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + 7.66937e-09 *lens_ipow(x, 3)*lens_ipow(y, 2) + -0.0246534 *x*lens_ipow(dx, 6)+0.0f;
const float dx30 =  + -0.00985212 *dx*dy + 5.95957e-05 *y*dx + -5.43759e-06 *x*y + -8.16765e-06 *x*y*lens_ipow(dy, 2) + -1.21993e-08 *x*lens_ipow(y, 3) + 1.59062e-08 *x*lens_ipow(y, 3)*lambda + 0.00151584 *y*dx*lens_ipow(dy, 4) + 1.1009e-09 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -0.117182 *lens_ipow(dx, 7)*dy + -0.00090831 *lens_ipow(x, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 5.76253e-12 *lens_ipow(x, 3)*lens_ipow(y, 4)*dy + -1.2654e-10 *lens_ipow(x, 5)*y*lens_ipow(dx, 2)+0.0f;
const float dx31 =  + -0.0177837  + 0.00659246 *lambda + -0.00459732 *lens_ipow(lambda, 2) + -0.0142295 *lens_ipow(dy, 2) + -0.00556114 *lens_ipow(dx, 2) + 0.000123641 *y*dy + -8.22774e-06 *lens_ipow(y, 2) + 5.95957e-05 *x*dx + -2.7188e-06 *lens_ipow(x, 2) + 0.00390896 *lens_ipow(dx, 4) + -4.08383e-06 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -1.82989e-08 *lens_ipow(x, 2)*lens_ipow(y, 2) + 2.38593e-08 *lens_ipow(x, 2)*lens_ipow(y, 2)*lambda + -9.07402e-08 *lens_ipow(y, 4)*lens_ipow(dy, 2) + -2.70415e-08 *lens_ipow(y, 4)*lens_ipow(dx, 2) + 0.00151584 *x*dx*lens_ipow(dy, 4) + 1.1009e-09 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + -0.0247426 *lens_ipow(dy, 6)*lambda + 5.76253e-12 *lens_ipow(x, 4)*lens_ipow(y, 3)*dy + -2.109e-11 *lens_ipow(x, 6)*lens_ipow(dx, 2)+0.0f;
const float dx32 =  + -1.02263 *dx*dy + -0.0111223 *y*dx + -0.00985212 *x*dy + 5.95957e-05 *x*y + 0.0156358 *y*lens_ipow(dx, 3) + 0.929799 *dx*lens_ipow(dy, 3)*lambda + -1.08166e-08 *lens_ipow(y, 5)*dx + 0.00151584 *x*y*lens_ipow(dy, 4) + 3.66968e-10 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.820275 *x*lens_ipow(dx, 6)*dy + -0.00090831 *lens_ipow(x, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -4.218e-11 *lens_ipow(x, 6)*y*dx+0.0f;
const float dx33 =  + 0.39996  + -1.60391 *lens_ipow(dy, 2) + -0.511315 *lens_ipow(dx, 2) + -0.0284589 *y*dy + 6.18206e-05 *lens_ipow(y, 2) + -0.00985212 *x*dx + 0.705446 *lens_ipow(dy, 4) + -8.16765e-06 *lens_ipow(x, 2)*y*dy + 1.3947 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -3.62961e-08 *lens_ipow(y, 5)*dy + 0.00606334 *x*y*dx*lens_ipow(dy, 3) + -0.148455 *y*lens_ipow(dy, 5)*lambda + -0.117182 *x*lens_ipow(dx, 7) + -0.00090831 *lens_ipow(x, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 1.44063e-12 *lens_ipow(x, 4)*lens_ipow(y, 4)+0.0f;
const float dx34 =  + 0.00659246 *y + -0.00919463 *y*lambda + 0.464899 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + 7.95309e-09 *lens_ipow(x, 2)*lens_ipow(y, 3) + -0.0247426 *y*lens_ipow(dy, 6)+0.0f;
const float dx40 =  + -1.72991e-08 *x*lens_ipow(y, 2) + 0.0236877 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + -2.32942e-07 *lens_ipow(x, 2)*y*dx*dy + -1.50525e-07 *lens_ipow(x, 3)*lens_ipow(dy, 2) + -3.30532e-07 *lens_ipow(x, 3)*lens_ipow(dx, 2) + 0.0355674 *dx*lens_ipow(dy, 6) + 0.030737 *lens_ipow(dx, 7) + 1.42861e-05 *lens_ipow(y, 2)*lens_ipow(dx, 5) + 2.0786e-05 *x*y*lens_ipow(dy, 5)+0.0f;
const float dx41 =  + -1.46565e-08 *lens_ipow(y, 3) + -1.72991e-08 *lens_ipow(x, 2)*y + 0.0202545 *lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.00033093 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 8.00123e-06 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -7.76474e-08 *lens_ipow(x, 3)*dx*dy + 0.0287035 *lens_ipow(dy, 7) + 0.0370859 *lens_ipow(dx, 6)*dy + 2.85723e-05 *x*y*lens_ipow(dx, 5) + 1.0393e-05 *lens_ipow(x, 2)*lens_ipow(dy, 5)+0.0f;
const float dx42 =  + -0.0262377 *dx*lambda + -0.793992 *dx*lens_ipow(dy, 2) + -12.4169 *lens_ipow(dx, 5) + 0.040509 *y*dx*lens_ipow(dy, 3) + -0.00033093 *lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 0.071063 *x*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -7.76474e-08 *lens_ipow(x, 3)*y*dy + -1.65266e-07 *lens_ipow(x, 4)*dx + 64.7828 *lens_ipow(dx, 7) + 0.222515 *y*lens_ipow(dx, 5)*dy + 0.0355674 *x*lens_ipow(dy, 6) + 0.215159 *x*lens_ipow(dx, 6) + 7.14307e-05 *x*lens_ipow(y, 2)*lens_ipow(dx, 4) + -20.3896 *lens_ipow(dx, 3)*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + -108.817 *lens_ipow(dx, 9)+0.0f;
const float dx43 =  + -0.702041 *lens_ipow(dy, 3) + -0.793992 *lens_ipow(dx, 2)*dy + -0.256737 *lens_ipow(dy, 3)*lambda + 0.0607635 *y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.00033093 *lens_ipow(y, 2)*lens_ipow(dx, 2)*dy + 8.00123e-06 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 0.0473753 *x*lens_ipow(dx, 3)*dy + -7.76474e-08 *lens_ipow(x, 3)*y*dx + -7.52625e-08 *lens_ipow(x, 4)*dy + 0.200925 *y*lens_ipow(dy, 6) + 0.0370859 *y*lens_ipow(dx, 6) + 0.213404 *x*dx*lens_ipow(dy, 5) + 5.1965e-05 *lens_ipow(x, 2)*y*lens_ipow(dy, 4) + -20.3896 *lens_ipow(dx, 4)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const float dx44 =  + 1.17147  + -4.84739 *lambda + 7.08468 *lens_ipow(lambda, 2) + -0.0131189 *lens_ipow(dx, 2) + -3.5669 *lens_ipow(lambda, 3) + -0.0641842 *lens_ipow(dy, 4) + -10.1948 *lens_ipow(dx, 4)*lens_ipow(dy, 4)*lambda+0.0f;
} break;

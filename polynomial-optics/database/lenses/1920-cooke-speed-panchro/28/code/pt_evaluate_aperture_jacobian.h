case cooke__speed_panchro__1920__28mm:
{
const double dx00 =  + 0.640924  + 0.0965361 *lambda + -0.00324407 *y*dy + -0.067604 *lens_ipow(lambda, 2) + 4.38112e-05 *lens_ipow(y, 2) + 0.000298211 *lens_ipow(x, 2) + -0.307563 *lens_ipow(dy, 2) + -0.719018 *lens_ipow(dx, 2) + 0.000114914 *lens_ipow(x, 3)*dx + 0.0549562 *x*lens_ipow(dx, 3) + 0.105882 *lens_ipow(dy, 4) + 0.00528801 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.0433554 *y*lens_ipow(dx, 2)*dy*lambda + -0.0751747 *x*dx*lens_ipow(dy, 2)*lambda + -5.86059e-06 *lens_ipow(x, 3)*y*dx*dy + 1.5013e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -2.59956e-06 *lens_ipow(x, 4)*lens_ipow(dx, 2) + 1.7035e-09 *lens_ipow(x, 6)*lambda + 3.60723e-08 *lens_ipow(y, 5)*lens_ipow(dy, 3)+0.0f;
const double dx01 =  + -0.48781 *dx*dy + -0.00324407 *x*dy + 8.76224e-05 *x*y + 0.0433554 *x*lens_ipow(dx, 2)*dy*lambda + -0.0491503 *y*lens_ipow(dx, 3)*lambda + -1.46515e-06 *lens_ipow(x, 4)*dx*dy + 1.5013e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 1.80361e-07 *x*lens_ipow(y, 4)*lens_ipow(dy, 3)+0.0f;
const double dx02 =  + 19.8129  + 1.50609 *lambda + -0.48781 *y*dy + -46.1729 *lens_ipow(dx, 2) + -16.0199 *lens_ipow(dy, 2) + -1.43804 *x*dx + -0.987495 *lens_ipow(lambda, 3) + 2.87285e-05 *lens_ipow(x, 4) + 0.0824344 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 3.41056 *lens_ipow(dy, 4) + 0.00352534 *lens_ipow(x, 3)*dx + 0.0867108 *x*y*dx*dy*lambda + -0.0737255 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + -0.0375873 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + 38.7931 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + -1.46515e-06 *lens_ipow(x, 4)*y*dy + -1.03982e-06 *lens_ipow(x, 5)*dx+0.0f;
const double dx03 =  + -0.48781 *y*dx + -0.00324407 *x*y + -32.0397 *dx*dy + -0.615126 *x*dy + 13.6422 *dx*lens_ipow(dy, 3) + 0.42353 *x*lens_ipow(dy, 3) + 0.0433554 *x*y*lens_ipow(dx, 2)*lambda + -0.0751747 *lens_ipow(x, 2)*dx*dy*lambda + 25.8621 *lens_ipow(dx, 3)*dy*lambda + -1.46515e-06 *lens_ipow(x, 4)*y*dx + 5.00433e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + 1.08217e-07 *x*lens_ipow(y, 5)*lens_ipow(dy, 2)+0.0f;
const double dx04 =  + 0.0965361 *x + 1.50609 *dx + -0.135208 *x*lambda + -2.96249 *dx*lens_ipow(lambda, 2) + 0.0433554 *x*y*lens_ipow(dx, 2)*dy + -0.0245752 *lens_ipow(y, 2)*lens_ipow(dx, 3) + -0.0375873 *lens_ipow(x, 2)*dx*lens_ipow(dy, 2) + 12.931 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + 2.43356e-10 *lens_ipow(x, 7)+0.0f;
const double dx10 =  + -0.357394 *dx*dy + 0.000273959 *x*y + 0.00640068 *x*dy + -0.0372403 *x*lens_ipow(dx, 2)*dy + -0.647917 *lens_ipow(dx, 3)*dy + -1.04139 *dx*lens_ipow(dy, 3) + 2.45604e-05 *lens_ipow(x, 2)*y*dx + -0.0726852 *x*lens_ipow(dy, 3) + -0.00114472 *x*y*lens_ipow(dy, 2) + -2.58393e-09 *x*lens_ipow(y, 5) + -2.47132e-11 *lens_ipow(x, 5)*lens_ipow(y, 3)+0.0f;
const double dx11 =  + 0.661276  + 0.0203018 *lambda + -0.264987 *lens_ipow(dx, 2) + -0.714263 *lens_ipow(dy, 2) + 0.000136979 *lens_ipow(x, 2) + 0.00090534 *lens_ipow(y, 2)*lambda + -0.0248672 *y*lens_ipow(dx, 2)*dy + 8.1868e-06 *lens_ipow(x, 3)*dx + -0.000747687 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -0.000572361 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.000394747 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -3.12485e-09 *lens_ipow(y, 6) + -6.45981e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + 1.98165 *lens_ipow(dx, 6)*lambda + -1.23566e-11 *lens_ipow(x, 6)*lens_ipow(y, 2) + -6.23152 *lens_ipow(dx, 8)*lens_ipow(lambda, 2)+0.0f;
const double dx12 =  + -0.529974 *y*dx + -0.357394 *x*dy + -29.7527 *dx*dy + -0.0372403 *lens_ipow(x, 2)*dx*dy + -1.94375 *x*lens_ipow(dx, 2)*dy + -1.04139 *x*lens_ipow(dy, 3) + -0.0248672 *lens_ipow(y, 2)*dx*dy + 8.1868e-06 *lens_ipow(x, 3)*y + 11.8899 *y*lens_ipow(dx, 5)*lambda + -49.8522 *y*lens_ipow(dx, 7)*lens_ipow(lambda, 2)+0.0f;
const double dx13 =  + 19.945  + 1.27938 *lambda + -1.42853 *y*dy + -0.357394 *x*dx + -14.8764 *lens_ipow(dx, 2) + -0.644039 *lens_ipow(lambda, 2) + 0.00320034 *lens_ipow(x, 2) + -46.5137 *lens_ipow(dy, 2) + -0.0186201 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -0.647917 *x*lens_ipow(dx, 3) + 18.3654 *lens_ipow(dy, 4) + -3.12418 *x*dx*lens_ipow(dy, 2) + -0.0124336 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.109028 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.00114472 *lens_ipow(x, 2)*y*dy + 0.000263165 *lens_ipow(y, 3)*dy+0.0f;
const double dx14 =  + 1.27938 *dy + 0.0203018 *y + -1.28808 *dy*lambda + 0.00030178 *lens_ipow(y, 3) + -0.000498458 *lens_ipow(y, 3)*lambda + 1.98165 *y*lens_ipow(dx, 6) + -12.463 *y*lens_ipow(dx, 8)*lambda+0.0f;
const double dx20 =  + -0.0365906  + 0.0111251 *lambda + -0.00164651 *y*dy + -0.00536138 *x*dx + -0.00829667 *lens_ipow(lambda, 2) + -5.15369e-05 *lens_ipow(y, 2) + -0.000173956 *lens_ipow(x, 2) + -0.0255246 *lens_ipow(dy, 2) + -0.0752377 *lens_ipow(dx, 2) + -3.36652e-07 *lens_ipow(x, 2)*lens_ipow(y, 2) + -5.76109e-08 *lens_ipow(y, 4) + 3.54615e-08 *lens_ipow(y, 4)*lambda + -6.91485e-06 *lens_ipow(x, 2)*y*dy*lambda + -1.2826e-06 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -1.38041e-06 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -0.0118575 *y*lens_ipow(dx, 4)*dy + 6.72682e-07 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lambda + 0.000577511 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 4)+0.0f;
const double dx21 =  + -0.0497343 *dx*dy + -0.00164651 *x*dy + -0.000103074 *x*y + -0.00186338 *y*dx + -2.24435e-07 *lens_ipow(x, 3)*y + -2.30444e-07 *x*lens_ipow(y, 3) + 1.41846e-07 *x*lens_ipow(y, 3)*lambda + -2.30495e-06 *lens_ipow(x, 3)*dy*lambda + 2.37416e-05 *lens_ipow(y, 3)*lens_ipow(dx, 3) + -0.0118575 *x*lens_ipow(dx, 4)*dy + -1.38142e-06 *lens_ipow(y, 4)*dx*lens_ipow(dy, 3) + 0.0706405 *y*lens_ipow(dx, 7) + 0.000577511 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 4)+0.0f;
const double dx22 =  + 0.476257  + -0.0497343 *y*dy + -0.00268069 *lens_ipow(x, 2) + -0.698823 *lens_ipow(dx, 2) + -0.277624 *lens_ipow(dy, 2) + -0.150475 *x*dx + -0.000931688 *lens_ipow(y, 2) + 0.342106 *lens_ipow(dy, 4) + 1.78062e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -5.1304e-07 *lens_ipow(x, 5)*dx + 26.8237 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + -0.0474301 *x*y*lens_ipow(dx, 3)*dy + 2.69073e-07 *lens_ipow(x, 5)*dx*lambda + -2.76284e-07 *lens_ipow(y, 5)*lens_ipow(dy, 3) + 0.247242 *lens_ipow(y, 2)*lens_ipow(dx, 6) + 0.000866266 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 4)+0.0f;
const double dx23 =  + -0.0497343 *y*dx + -0.00164651 *x*y + -0.555249 *dx*dy + -0.0510492 *x*dy + 1.36842 *dx*lens_ipow(dy, 3) + -2.30495e-06 *lens_ipow(x, 3)*y*lambda + -5.52164e-07 *lens_ipow(x, 5)*dy + 10.7295 *lens_ipow(dx, 5)*dy + -0.0118575 *x*y*lens_ipow(dx, 4) + -8.28853e-07 *lens_ipow(y, 5)*dx*lens_ipow(dy, 2) + 0.00115502 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3)+0.0f;
const double dx24 =  + 0.0111251 *x + -0.0165933 *x*lambda + 3.54615e-08 *x*lens_ipow(y, 4) + -2.30495e-06 *lens_ipow(x, 3)*y*dy + 1.34536e-07 *lens_ipow(x, 5)*lens_ipow(dx, 2)+0.0f;
const double dx30 =  + -0.000676167 *y*dx + -9.4404e-05 *x*y + 3.14532e-05 *x*y*lambda + -0.0133984 *x*lens_ipow(dy, 3) + 2.7654e-06 *x*lens_ipow(y, 2)*dy + -0.455026 *dx*lens_ipow(dy, 3)*lambda + -5.04478e-10 *lens_ipow(x, 5)*y + -8.72842e-07 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + 0.0468288 *x*lens_ipow(dy, 5) + -0.00198094 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3) + 0.00668 *x*lens_ipow(dx, 4)*dy + -1.74311e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*lambda + 0.00204924 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3)*lambda + -0.0742686 *y*dx*lens_ipow(dy, 4)*lambda+0.0f;
const double dx31 =  + -0.0364159  + 0.0104795 *lambda + -0.011083 *lens_ipow(dx, 2) + -0.0042222 *y*dy + -0.0564893 *lens_ipow(dy, 2) + -0.000676167 *x*dx + -0.00866235 *lens_ipow(lambda, 2) + -4.7202e-05 *lens_ipow(x, 2) + -0.000176389 *lens_ipow(y, 2) + 3.51038e-05 *lens_ipow(y, 2)*lambda + 1.57266e-05 *lens_ipow(x, 2)*lambda + 2.7654e-06 *lens_ipow(x, 2)*y*dy + -1.15478e-06 *lens_ipow(y, 4)*lens_ipow(dx, 2) + -8.69241e-07 *lens_ipow(y, 4)*lens_ipow(dy, 2) + -8.40796e-11 *lens_ipow(x, 6) + -1.30926e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2) + -1.30734e-09 *lens_ipow(x, 4)*lens_ipow(y, 2)*lambda + -0.0742686 *x*dx*lens_ipow(dy, 4)*lambda + -1.39546 *lens_ipow(dx, 2)*lens_ipow(dy, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx32 =  + -0.022166 *y*dx + -0.000676167 *x*y + 0.834115 *dx*dy + -0.455026 *x*lens_ipow(dy, 3)*lambda + -16.7913 *dx*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -4.61914e-07 *lens_ipow(y, 5)*dx + -0.000660313 *lens_ipow(x, 3)*lens_ipow(dy, 3) + 0.01336 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + 0.00068308 *lens_ipow(x, 3)*lens_ipow(dy, 3)*lambda + -0.0742686 *x*y*lens_ipow(dy, 4)*lambda + -2.79091 *y*dx*lens_ipow(dy, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx33 =  + 0.462915  + -0.0021111 *lens_ipow(y, 2) + -0.112979 *y*dy + 0.417057 *lens_ipow(dx, 2) + -0.0200976 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 1.3827e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + -1.36508 *x*dx*lens_ipow(dy, 2)*lambda + -25.187 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -3.47696e-07 *lens_ipow(y, 5)*dy + -8.72842e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + 0.117072 *lens_ipow(x, 2)*lens_ipow(dy, 4) + -0.00198094 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2) + 0.00334 *lens_ipow(x, 2)*lens_ipow(dx, 4) + 0.00204924 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2)*lambda + -0.297074 *x*y*dx*lens_ipow(dy, 3)*lambda + -5.58183 *y*lens_ipow(dx, 2)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx34 =  + 0.0104795 *y + -0.0173247 *y*lambda + 1.17013e-05 *lens_ipow(y, 3) + 1.57266e-05 *lens_ipow(x, 2)*y + -0.455026 *x*dx*lens_ipow(dy, 3) + -16.7913 *lens_ipow(dx, 2)*lens_ipow(dy, 3)*lambda + -4.35779e-10 *lens_ipow(x, 4)*lens_ipow(y, 3) + 0.00068308 *lens_ipow(x, 3)*dx*lens_ipow(dy, 3) + -0.0742686 *x*y*dx*lens_ipow(dy, 4) + -2.79091 *y*lens_ipow(dx, 2)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx40 =  + -4.74015e-05 *x + -0.318412 *lens_ipow(dx, 3) + 3.24612e-06 *x*lens_ipow(y, 2) + -0.0182176 *x*lens_ipow(dx, 2) + -0.000264312 *lens_ipow(x, 2)*dx + -0.255884 *dx*lens_ipow(dy, 2) + -0.00705853 *y*dx*dy + -0.00436366 *x*lens_ipow(dy, 2) + -1.3328e-05 *x*y*dy*lambda + 1.9371e-05 *lens_ipow(x, 2)*lens_ipow(dx, 3) + 4.91058e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lambda+0.0f;
const double dx41 =  + -4.58056e-05 *y + -0.31718 *lens_ipow(dy, 3) + -0.00420776 *y*lens_ipow(dx, 2) + 3.24612e-06 *lens_ipow(x, 2)*y + -0.253952 *lens_ipow(dx, 2)*dy + -0.0181465 *y*lens_ipow(dy, 2) + -0.00705853 *x*dx*dy + -0.000261776 *lens_ipow(y, 2)*dy + -6.66402e-06 *lens_ipow(x, 2)*dy*lambda + 1.37681e-05 *lens_ipow(y, 2)*lens_ipow(dy, 3) + 3.27372e-07 *lens_ipow(x, 3)*y*dx*lens_ipow(dy, 2)*lambda+0.0f;
const double dx42 =  + 0.0599745 *dx + -15.3577 *lens_ipow(dx, 3) + -0.00420776 *lens_ipow(y, 2)*dx + -0.955235 *x*lens_ipow(dx, 2) + -13.5235 *dx*lens_ipow(dy, 2) + -0.0182176 *lens_ipow(x, 2)*dx + -0.507905 *y*dx*dy + -8.81041e-05 *lens_ipow(x, 3) + -0.255884 *x*lens_ipow(dy, 2) + -0.00705853 *x*y*dy + 1.9371e-05 *lens_ipow(x, 3)*lens_ipow(dx, 2) + 0.590105 *lens_ipow(dx, 5)*lambda + 1.63686e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx43 =  + 0.0582221 *dy + -0.951539 *y*lens_ipow(dy, 2) + -13.5235 *lens_ipow(dx, 2)*dy + -15.2421 *lens_ipow(dy, 3) + -0.253952 *y*lens_ipow(dx, 2) + -0.0181465 *lens_ipow(y, 2)*dy + -0.511768 *x*dx*dy + -0.00705853 *x*y*dx + -0.00436366 *lens_ipow(x, 2)*dy + -8.72586e-05 *lens_ipow(y, 3) + -6.66402e-06 *lens_ipow(x, 2)*y*lambda + 1.37681e-05 *lens_ipow(y, 3)*lens_ipow(dy, 2) + 3.27372e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy*lambda+0.0f;
const double dx44 =  + 0.371053  + -1.03151 *lambda + 0.755444 *lens_ipow(lambda, 2) + -6.66402e-06 *lens_ipow(x, 2)*y*dy + 0.0983508 *lens_ipow(dx, 6) + 1.63686e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)+0.0f;
} break;

case cooke__speed_panchro__1920__18mm:
{
const double dx00 =  + 0.602111  + 0.170584 *y*dy + 0.382108 *x*dx + 0.00551866 *lens_ipow(y, 2) + 0.0138215 *lens_ipow(x, 2) + 1.07962 *lens_ipow(dy, 2) + 1.39589 *lens_ipow(dx, 2) + 0.000260837 *lens_ipow(y, 2)*lambda + 0.000610342 *lens_ipow(x, 2)*lambda + -5.43216e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.0119307 *lens_ipow(x, 3)*dx + 1.07059 *x*lens_ipow(dx, 3) + 0.000187744 *lens_ipow(x, 4) + -1.25676e-05 *lens_ipow(y, 4) + 0.00609638 *x*y*dx*dy + 0.211413 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.00456448 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.00752014 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 0.0167388 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -6.42341e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx01 =  + 0.667407 *dx*dy + 0.170584 *x*dy + 0.0110373 *x*y + 0.108634 *y*dx + 0.000521675 *x*y*lambda + -3.62144e-05 *lens_ipow(x, 3)*y + -0.000237501 *lens_ipow(y, 3)*dx + -5.02704e-05 *x*lens_ipow(y, 3) + 0.00304819 *lens_ipow(x, 2)*dx*dy + 0.00912896 *x*y*lens_ipow(dy, 2) + 0.0150403 *x*y*lens_ipow(dx, 2)*lambda + -4.28228e-05 *lens_ipow(x, 3)*y*lens_ipow(lambda, 3)+0.0f;
const double dx02 =  + 17.9177  + 0.667407 *y*dy + 0.191054 *lens_ipow(x, 2) + -23.0159 *lens_ipow(dx, 2) + -6.71659 *lens_ipow(dy, 2) + 2.79179 *x*dx + 0.0543171 *lens_ipow(y, 2) + 0.00298268 *lens_ipow(x, 4) + 1.60589 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -5.93754e-05 *lens_ipow(y, 4) + 13.2827 *lens_ipow(dy, 4) + 0.00304819 *lens_ipow(x, 2)*y*dy + 0.140942 *lens_ipow(x, 3)*dx + 0.0150403 *x*lens_ipow(y, 2)*dx*lambda + 146.699 *lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx03 =  + 0.667407 *y*dx + 0.170584 *x*y + -13.4332 *dx*dy + 2.15923 *x*dy + 53.1306 *dx*lens_ipow(dy, 3) + 0.00304819 *lens_ipow(x, 2)*y*dx + 0.00912896 *x*lens_ipow(y, 2)*dy + 97.7991 *lens_ipow(dx, 3)*dy*lambda + 0.0111592 *lens_ipow(x, 3)*dy*lambda+0.0f;
const double dx04 =  + 0.000260837 *x*lens_ipow(y, 2) + 0.000203448 *lens_ipow(x, 3) + 0.00752014 *x*lens_ipow(y, 2)*lens_ipow(dx, 2) + 48.8996 *lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.00557961 *lens_ipow(x, 3)*lens_ipow(dy, 2) + -6.42341e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx10 =  + 0.668658 *dx*dy + 0.162557 *y*dx + 0.00992645 *x*y + 0.0996134 *x*dy + 0.0105482 *x*y*lens_ipow(dx, 4) + 3.48991e-06 *lens_ipow(x, 4)*y*dx + -4.35453e-07 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.598757 *x*lens_ipow(dy, 5)*lambda + -3.4585e-07 *x*lens_ipow(y, 5)*lambda + 0.032086 *lens_ipow(y, 2)*lens_ipow(dx, 3)*dy*lambda + 179.182 *lens_ipow(dx, 5)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx11 =  + 0.584776  + 0.024364 *lambda + 1.15437 *lens_ipow(dx, 2) + 0.476665 *y*dy + 2.39581 *lens_ipow(dy, 2) + 0.162557 *x*dx + 0.00496322 *lens_ipow(x, 2) + 0.0164459 *lens_ipow(y, 2) + -0.198453 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -37.7923 *lens_ipow(dy, 4)*lambda + -5.43292 *y*lens_ipow(dy, 3)*lambda + 4.94898e-05 *lens_ipow(y, 4)*lens_ipow(lambda, 2) + 0.00527412 *lens_ipow(x, 2)*lens_ipow(dx, 4) + 6.97982e-07 *lens_ipow(x, 5)*dx + -3.2659e-07 *lens_ipow(x, 4)*lens_ipow(y, 2) + -0.00446865 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy*lambda + -8.64624e-07 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda + 0.064172 *x*y*lens_ipow(dx, 3)*dy*lambda+0.0f;
const double dx12 =  + 2.30874 *y*dx + 0.668658 *x*dy + 0.162557 *x*y + -7.66765 *dx*dy + 0.0210965 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + 6.97982e-07 *lens_ipow(x, 5)*y + 271.581 *dx*lens_ipow(dy, 5)*lambda + -0.00223432 *lens_ipow(y, 4)*dx*dy*lambda + 0.0962579 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lambda + 895.909 *x*lens_ipow(dx, 4)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 25237 *lens_ipow(dx, 5)*lens_ipow(dy, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx13 =  + 17.757  + 0.238332 *lens_ipow(y, 2) + 4.79162 *y*dy + 0.668658 *x*dx + -3.83382 *lens_ipow(dx, 2) + 0.0498067 *lens_ipow(x, 2) + -0.132302 *lens_ipow(y, 3)*dy*lambda + -151.169 *y*lens_ipow(dy, 3)*lambda + -8.14938 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -843.833 *lens_ipow(dy, 4)*lambda + 0.76685 *lens_ipow(lambda, 6) + -1.49689 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lambda + 678.952 *lens_ipow(dx, 2)*lens_ipow(dy, 4)*lambda + -0.00111716 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lambda + 0.032086 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lambda + 537.545 *x*lens_ipow(dx, 5)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 12618.5 *lens_ipow(dx, 6)*lens_ipow(dy, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx14 =  + 0.024364 *y + -0.0661509 *lens_ipow(y, 3)*lens_ipow(dy, 2) + -37.7923 *y*lens_ipow(dy, 4) + -2.71646 *lens_ipow(y, 2)*lens_ipow(dy, 3) + -168.767 *lens_ipow(dy, 5) + 1.97959e-05 *lens_ipow(y, 5)*lambda + 4.6011 *dy*lens_ipow(lambda, 5) + -0.299378 *lens_ipow(x, 2)*lens_ipow(dy, 5) + 135.79 *lens_ipow(dx, 2)*lens_ipow(dy, 5) + -0.00111716 *lens_ipow(y, 4)*lens_ipow(dx, 2)*dy + -1.72925e-07 *lens_ipow(x, 2)*lens_ipow(y, 5) + 0.032086 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + 358.364 *x*lens_ipow(dx, 5)*lens_ipow(dy, 3)*lambda + 8412.34 *lens_ipow(dx, 6)*lens_ipow(dy, 3)*lambda+0.0f;
const double dx20 =  + -0.108927  + -0.0154726 *y*dy + -0.011987 *x*dx + -0.000250452 *lens_ipow(y, 2) + -0.000161163 *lens_ipow(x, 2) + -0.134057 *lens_ipow(dy, 2) + 0.000290484 *y*dy*lambda + 0.00117097 *x*dx*lambda + 0.0479054 *lens_ipow(dx, 4) + 0.263479 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 8.12132e-07 *lens_ipow(y, 4) + -1.68862e-05 *lens_ipow(x, 2)*y*dy + 2.08465e-05 *lens_ipow(y, 3)*dy + 0.0249181 *x*dx*lens_ipow(dy, 2) + -0.00040802 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 7.08415e-09 *lens_ipow(x, 6) + 0.0108333 *lens_ipow(dx, 2)*lens_ipow(lambda, 5) + 1.81135e-08 *lens_ipow(y, 6)*lens_ipow(dx, 2) + 3.1395e-12 *lens_ipow(x, 6)*lens_ipow(y, 4)+0.0f;
const double dx21 =  + -0.138291 *dx*dy + -0.0154726 *x*dy + -0.000500903 *x*y + -0.00597821 *y*dx + 0.000290484 *x*dy*lambda + 3.24853e-06 *x*lens_ipow(y, 3) + -5.62873e-06 *lens_ipow(x, 3)*dy + 6.25394e-05 *x*lens_ipow(y, 2)*dy + 0.133873 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.000865024 *lens_ipow(y, 3)*lens_ipow(dx, 3) + 0.0205908 *lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + 1.08681e-07 *x*lens_ipow(y, 5)*lens_ipow(dx, 2) + 1.794e-12 *lens_ipow(x, 7)*lens_ipow(y, 3)+0.0f;
const double dx22 =  + -1.57309  + -0.138291 *y*dy + -0.00599352 *lens_ipow(x, 2) + 2.9839 *lens_ipow(dx, 2) + -0.820828 *lens_ipow(dy, 2) + -0.0029891 *lens_ipow(y, 2) + 0.000585485 *lens_ipow(x, 2)*lambda + 0.191622 *x*lens_ipow(dx, 3) + 0.526957 *x*dx*lens_ipow(dy, 2) + -1.25433 *lens_ipow(dy, 4) + 0.012459 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.000272013 *lens_ipow(x, 3)*dx + 0.20081 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.000648768 *lens_ipow(y, 4)*lens_ipow(dx, 2) + 0.0205908 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy + 0.0216665 *x*dx*lens_ipow(lambda, 5) + 3.62269e-08 *x*lens_ipow(y, 6)*dx+0.0f;
const double dx23 =  + -0.138291 *y*dx + -0.0154726 *x*y + -1.64166 *dx*dy + -0.268114 *x*dy + 0.000290484 *x*y*lambda + 0.526957 *x*lens_ipow(dx, 2)*dy + -5.01731 *dx*lens_ipow(dy, 3) + -5.62873e-06 *lens_ipow(x, 3)*y + 2.08465e-05 *x*lens_ipow(y, 3) + 0.0249181 *lens_ipow(x, 2)*dx*dy + 0.133873 *lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + 0.00686359 *lens_ipow(y, 3)*lens_ipow(dx, 3)+0.0f;
const double dx24 =  + 0.000290484 *x*y*dy + 0.000585485 *lens_ipow(x, 2)*dx + 0.0541663 *x*lens_ipow(dx, 2)*lens_ipow(lambda, 4)+0.0f;
const double dx30 =  + 0.276743 *dx*dy + 0.000282098 *x*y + 0.0140508 *x*dy + 0.000998087 *y*dx*lambda + -0.00898603 *y*dx*lens_ipow(dy, 2) + 0.0115691 *x*lens_ipow(dy, 3) + -0.022278 *y*dx*lens_ipow(dy, 4) + 4.7603e-06 *lens_ipow(x, 4)*dx*dy + -0.00158225 *x*y*lens_ipow(dx, 4)*lambda + -0.000149996 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2)*lambda + -0.266407 *lens_ipow(dx, 7)*dy + -7.18498e-06 *lens_ipow(y, 4)*dx*lens_ipow(dy, 3) + 5.16401e-11 *x*lens_ipow(y, 7)+0.0f;
const double dx31 =  + -0.109054  + -0.00910736 *y*dy + 0.0168874 *lens_ipow(dy, 2) + 0.000141049 *lens_ipow(x, 2) + 0.0158196 *lens_ipow(dx, 2)*lambda + -0.000318009 *lens_ipow(y, 2)*lambda + 0.000998087 *x*dx*lambda + -0.00898603 *x*dx*lens_ipow(dy, 2) + 0.00982704 *y*lens_ipow(dx, 2)*dy + 0.00024545 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -0.000165094 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.000608489 *lens_ipow(y, 2)*lens_ipow(dy, 4) + -0.022278 *x*dx*lens_ipow(dy, 4) + -0.000791127 *lens_ipow(x, 2)*lens_ipow(dx, 4)*lambda + 0.000249923 *lens_ipow(y, 3)*lens_ipow(dx, 2)*dy*lambda + -4.99987e-05 *lens_ipow(x, 3)*dx*lens_ipow(dy, 2)*lambda + -2.87399e-05 *x*lens_ipow(y, 3)*dx*lens_ipow(dy, 3) + 1.80741e-10 *lens_ipow(x, 2)*lens_ipow(y, 6) + 0.760083 *lens_ipow(dx, 8)*lambda + 1.39961e-07 *lens_ipow(y, 6)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx32 =  + 0.276743 *x*dy + 5.64004 *dx*dy + 0.0316391 *y*dx*lambda + 0.000998087 *x*y*lambda + -0.00898603 *x*y*lens_ipow(dy, 2) + 0.00982704 *lens_ipow(y, 2)*dx*dy + -0.022278 *x*y*lens_ipow(dy, 4) + 9.52059e-07 *lens_ipow(x, 5)*dy + -0.00316451 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lambda + 0.000124962 *lens_ipow(y, 4)*dx*dy*lambda + -4.99987e-05 *lens_ipow(x, 3)*y*lens_ipow(dy, 2)*lambda + -1.86485 *x*lens_ipow(dx, 6)*dy + -7.18498e-06 *x*lens_ipow(y, 4)*lens_ipow(dy, 3) + 6.08066 *y*lens_ipow(dx, 7)*lambda + 3.99888e-08 *lens_ipow(y, 7)*dx*lambda+0.0f;
const double dx33 =  + -1.56897  + -0.00455368 *lens_ipow(y, 2) + 0.0337748 *y*dy + 0.276743 *x*dx + 2.82002 *lens_ipow(dx, 2) + 0.00702541 *lens_ipow(x, 2) + 2.84976 *lens_ipow(dy, 2) + -0.0179721 *x*y*dx*dy + 0.00491352 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.0173537 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -0.000110063 *lens_ipow(y, 3)*dy + 0.000811319 *lens_ipow(y, 3)*lens_ipow(dy, 3) + -0.0891121 *x*y*dx*lens_ipow(dy, 3) + 9.52059e-07 *lens_ipow(x, 5)*dx + 6.24809e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2)*lambda + -9.99973e-05 *lens_ipow(x, 3)*y*dx*dy*lambda + -0.266407 *x*lens_ipow(dx, 7) + -2.15549e-05 *x*lens_ipow(y, 4)*dx*lens_ipow(dy, 2)+0.0f;
const double dx34 =  + 0.0158196 *y*lens_ipow(dx, 2) + -0.000106003 *lens_ipow(y, 3) + 0.000998087 *x*y*dx + 0.000163633 *lens_ipow(y, 3)*lambda + -0.000791127 *lens_ipow(x, 2)*y*lens_ipow(dx, 4) + 6.24809e-05 *lens_ipow(y, 4)*lens_ipow(dx, 2)*dy + -4.99987e-05 *lens_ipow(x, 3)*y*dx*lens_ipow(dy, 2) + 0.760083 *y*lens_ipow(dx, 8) + 1.99944e-08 *lens_ipow(y, 7)*lens_ipow(dx, 2)+0.0f;
const double dx40 =  + -0.0142548 *dx + -0.000797506 *x + -0.00374158 *x*y*dy + -0.00185358 *lens_ipow(y, 2)*dx + -0.000122395 *x*lens_ipow(y, 2) + -0.553621 *dx*lens_ipow(dy, 2) + -0.0601193 *y*dx*dy + -0.0310257 *x*lens_ipow(dy, 2) + -5.41283e-06 *lens_ipow(x, 5) + -0.000312246 *lens_ipow(x, 4)*dx + -0.00604603 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -0.0392432 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -0.0249002 *x*lens_ipow(dx, 2)*lens_ipow(dy, 4)+0.0f;
const double dx41 =  + -0.685211 *lens_ipow(dy, 3) + -0.0310037 *y*lens_ipow(dx, 2) + -0.00187079 *lens_ipow(x, 2)*dy + -0.00370716 *x*y*dx + -0.000122395 *lens_ipow(x, 2)*y + -0.000144592 *lens_ipow(y, 3) + -0.55411 *lens_ipow(dx, 2)*dy + -0.112427 *y*lens_ipow(dy, 2) + -0.0601193 *x*dx*dy + -0.00676506 *lens_ipow(y, 2)*dy + -0.00217454 *y*lens_ipow(dy, 6)+0.0f;
const double dx42 =  + -0.0142548 *x + -0.284146 *dx + -0.0310037 *lens_ipow(y, 2)*dx + -11.9035 *dx*lens_ipow(dy, 2) + -0.00185358 *x*lens_ipow(y, 2) + -1.10822 *y*dx*dy + -0.553621 *x*lens_ipow(dy, 2) + -0.0601193 *x*y*dy + -31.7011 *lens_ipow(dx, 5) + -6.24493e-05 *lens_ipow(x, 5) + -0.00302302 *lens_ipow(x, 4)*dx + -0.0392432 *lens_ipow(x, 3)*lens_ipow(dx, 2) + -0.0249002 *lens_ipow(x, 2)*dx*lens_ipow(dy, 4)+0.0f;
const double dx43 =  + -2.05563 *y*lens_ipow(dy, 2) + -11.9035 *lens_ipow(dx, 2)*dy + -0.00187079 *lens_ipow(x, 2)*y + -14.3701 *lens_ipow(dy, 3) + -0.55411 *y*lens_ipow(dx, 2) + -0.112427 *lens_ipow(y, 2)*dy + -1.10724 *x*dx*dy + -0.0601193 *x*y*dx + -0.0310257 *lens_ipow(x, 2)*dy + -0.00225502 *lens_ipow(y, 3) + -0.0498005 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + -0.00652362 *lens_ipow(y, 2)*lens_ipow(dy, 5)+0.0f;
const double dx44 =  + 0.595147  + -1.65916 *lambda + 1.22137 *lens_ipow(lambda, 2)+0.0f;
} break;

case cooke__speed_panchro__1920__18mm:
{
const double dx00 =  + 0.662733  + 0.0176878 *lambda + -0.00728934 *x*dx + 0.00031596 *lens_ipow(y, 2) + -0.278293 *lens_ipow(dy, 2) + -0.74213 *lens_ipow(dx, 2) + 7.1231e-05 *lens_ipow(y, 2)*lambda + 0.00122111 *lens_ipow(x, 2)*lambda + -1.61206e-06 *lens_ipow(y, 4) + 0.000163718 *x*lens_ipow(y, 2)*dx + 0.15825 *lens_ipow(dy, 4) + 0.0139034 *x*dx*lens_ipow(lambda, 2) + -0.0420234 *x*dx*lens_ipow(dy, 2) + 4.90016e-07 *lens_ipow(x, 5)*dx + -0.000405741 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 2) + -2.28249e-05 *lens_ipow(x, 4)*lens_ipow(lambda, 2) + 2.71298e-10 *lens_ipow(x, 6)*lens_ipow(y, 3)*dy+0.0f;
const double dx01 =  + -0.362789 *dx*dy + 0.000631921 *x*y + 0.00897756 *y*dx + 0.000142462 *x*y*lambda + -1.07264 *lens_ipow(dx, 3)*dy + -6.44823e-06 *x*lens_ipow(y, 3) + 0.000163718 *lens_ipow(x, 2)*y*dx + -0.0601114 *y*dx*lens_ipow(dy, 2) + -0.700961 *dx*lens_ipow(dy, 3) + -0.0992505 *y*lens_ipow(dx, 3) + 1.1627e-10 *lens_ipow(x, 7)*lens_ipow(y, 2)*dy+0.0f;
const double dx02 =  + 12.9766  + 0.322163 *lambda + -0.362789 *y*dy + -0.00364467 *lens_ipow(x, 2) + -30.3122 *lens_ipow(dx, 2) + -9.68762 *lens_ipow(dy, 2) + -1.48426 *x*dx + 0.00448878 *lens_ipow(y, 2) + -3.21791 *y*lens_ipow(dx, 2)*dy + 10.1286 *lens_ipow(dx, 4) + 8.1859e-05 *lens_ipow(x, 2)*lens_ipow(y, 2) + -0.0300557 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.700961 *y*lens_ipow(dy, 3) + -0.148876 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.00695169 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + -0.0210117 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 8.16694e-08 *lens_ipow(x, 6) + -0.000101435 *lens_ipow(x, 4)*lens_ipow(lambda, 2)+0.0f;
const double dx03 =  + -0.362789 *y*dx + -19.3752 *dx*dy + -0.556585 *x*dy + -1.07264 *y*lens_ipow(dx, 3) + 0.632998 *x*lens_ipow(dy, 3) + -0.0601114 *lens_ipow(y, 2)*dx*dy + -2.10288 *y*dx*lens_ipow(dy, 2) + -0.0420234 *lens_ipow(x, 2)*dx*dy + 3.87568e-11 *lens_ipow(x, 7)*lens_ipow(y, 3)+0.0f;
const double dx04 =  + 0.0176878 *x + 0.322163 *dx + 7.1231e-05 *x*lens_ipow(y, 2) + 0.000407038 *lens_ipow(x, 3) + 0.0139034 *lens_ipow(x, 2)*dx*lambda + -0.00020287 *lens_ipow(x, 4)*dx*lambda + -9.12996e-06 *lens_ipow(x, 5)*lambda+0.0f;
const double dx10 =  + -0.481316 *dx*dy + -0.00588822 *y*dx + 0.000595274 *x*y*lambda + -0.000404313 *x*y*lens_ipow(lambda, 2) + 0.00147169 *lens_ipow(y, 2)*dx*dy + 0.0844115 *y*dx*lens_ipow(dy, 2) + 0.000296275 *x*lens_ipow(y, 2)*dy + 0.00780039 *x*y*lens_ipow(dy, 2) + 0.000352319 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + 0.0105019 *lens_ipow(x, 2)*lens_ipow(dx, 5)*dy + -7.95344e-12 *lens_ipow(x, 3)*lens_ipow(y, 7)+0.0f;
const double dx11 =  + 0.662987  + 0.0197292 *lambda + -0.307721 *lens_ipow(dx, 2) + -0.00900025 *y*dy + -0.790181 *lens_ipow(dy, 2) + -0.00588822 *x*dx + 0.00125908 *lens_ipow(y, 2)*lambda + 0.000297637 *lens_ipow(x, 2)*lambda + -0.000202156 *lens_ipow(x, 2)*lens_ipow(lambda, 2) + 0.00294337 *x*y*dx*dy + 0.0844115 *x*dx*lens_ipow(dy, 2) + -0.0427791 *y*lens_ipow(dx, 2)*dy + -0.000939185 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + 0.000296275 *lens_ipow(x, 2)*y*dy + 0.0039002 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 0.000614733 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.00011744 *lens_ipow(x, 3)*lens_ipow(dx, 3) + -4.02312e-08 *lens_ipow(y, 6) + 0.682883 *lens_ipow(dx, 6) + -1.39185e-11 *lens_ipow(x, 4)*lens_ipow(y, 6)+0.0f;
const double dx12 =  + -0.615442 *y*dx + -0.481316 *x*dy + -0.00588822 *x*y + -20.4107 *dx*dy + 0.00147169 *x*lens_ipow(y, 2)*dy + 0.0844115 *x*y*lens_ipow(dy, 2) + -0.0427791 *lens_ipow(y, 2)*dx*dy + 0.000352319 *lens_ipow(x, 3)*y*lens_ipow(dx, 2) + 82.9232 *lens_ipow(dx, 5)*dy + 4.0973 *y*lens_ipow(dx, 5) + 0.0175031 *lens_ipow(x, 3)*lens_ipow(dx, 4)*dy+0.0f;
const double dx13 =  + 12.965  + 0.377198 *lambda + -0.00450013 *lens_ipow(y, 2) + -1.58036 *y*dy + -0.481316 *x*dx + -10.2053 *lens_ipow(dx, 2) + -31.2145 *lens_ipow(dy, 2) + 0.00147169 *x*lens_ipow(y, 2)*dx + 9.99213 *lens_ipow(dy, 4) + 0.168823 *x*y*dx*dy + -0.0213895 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.000148138 *lens_ipow(x, 2)*lens_ipow(y, 2) + 0.00780039 *lens_ipow(x, 2)*y*dy + 0.000409822 *lens_ipow(y, 3)*dy + 13.8205 *lens_ipow(dx, 6) + 0.00350062 *lens_ipow(x, 3)*lens_ipow(dx, 5)+0.0f;
const double dx14 =  + 0.377198 *dy + 0.0197292 *y + 0.000419695 *lens_ipow(y, 3) + 0.000297637 *lens_ipow(x, 2)*y + -0.000404313 *lens_ipow(x, 2)*y*lambda + -0.000626123 *lens_ipow(y, 3)*lambda+0.0f;
const double dx20 =  + -0.0556374  + 0.00618736 *lambda + 0.00401524 *x*dx + -0.000103571 *lens_ipow(y, 2) + -0.17781 *lens_ipow(dx, 2)*lambda + -0.000878824 *lens_ipow(x, 2)*lambda + -0.0250948 *x*dx*lambda + -0.0285809 *y*lens_ipow(dx, 2)*dy + -0.00137281 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -4.53554e-06 *lens_ipow(x, 4) + -0.00103224 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.223233 *lens_ipow(dx, 4)*lambda + -3.29339e-05 *lens_ipow(x, 2)*y*dy*lambda + 6.13908e-06 *lens_ipow(x, 4)*lambda + 3.85871e-07 *x*lens_ipow(y, 4)*dx + -0.0021576 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -1.26305e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dx, 2) + 3.32113e-10 *lens_ipow(y, 7)*dy + 3.91832e-09 *lens_ipow(x, 7)*lens_ipow(dx, 3)+0.0f;
const double dx21 =  + -0.000207141 *x*y + -0.0012452 *y*dx*lambda + -0.0285809 *x*lens_ipow(dx, 2)*dy + -0.413861 *lens_ipow(dx, 3)*dy + -0.00206448 *x*y*lens_ipow(dx, 2) + 0.00675994 *y*dx*lens_ipow(dy, 2) + -0.0245315 *y*lens_ipow(dx, 3) + -1.0978e-05 *lens_ipow(x, 3)*dy*lambda + 7.71741e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + -5.0522e-08 *lens_ipow(x, 5)*y*lens_ipow(dx, 2) + 2.32479e-09 *x*lens_ipow(y, 6)*dy+0.0f;
const double dx22 =  + 0.460346  + 0.00200762 *lens_ipow(x, 2) + 0.366622 *lens_ipow(dy, 2) + -0.355621 *x*dx*lambda + 0.0572014 *lens_ipow(lambda, 3) + -1.7052 *lens_ipow(dx, 2)*lambda + -0.0125474 *lens_ipow(x, 2)*lambda + -0.000622601 *lens_ipow(y, 2)*lambda + -0.0571618 *x*y*dx*dy + -1.24158 *y*lens_ipow(dx, 2)*dy + 10.0493 *lens_ipow(dx, 4) + -0.00206448 *x*lens_ipow(y, 2)*dx + 0.00337997 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.0367973 *lens_ipow(y, 2)*lens_ipow(dx, 2) + 0.892933 *x*lens_ipow(dx, 3)*lambda + 1.92935e-07 *lens_ipow(x, 2)*lens_ipow(y, 4) + -0.0014384 *lens_ipow(x, 3)*dx*lens_ipow(lambda, 2) + -5.0522e-08 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx + 1.46937e-09 *lens_ipow(x, 8)*lens_ipow(dx, 2)+0.0f;
const double dx23 =  + 0.733245 *dx*dy + -0.0285809 *x*y*lens_ipow(dx, 2) + -0.413861 *y*lens_ipow(dx, 3) + -0.000915205 *lens_ipow(x, 3)*dy + 0.00675994 *lens_ipow(y, 2)*dx*dy + -1.0978e-05 *lens_ipow(x, 3)*y*lambda + 3.32113e-10 *x*lens_ipow(y, 7)+0.0f;
const double dx24 =  + 0.00618736 *x + -0.17781 *x*lens_ipow(dx, 2) + 0.171604 *dx*lens_ipow(lambda, 2) + -0.568399 *lens_ipow(dx, 3) + -0.000292941 *lens_ipow(x, 3) + -0.0125474 *lens_ipow(x, 2)*dx + -0.000622601 *lens_ipow(y, 2)*dx + 0.223233 *x*lens_ipow(dx, 4) + -1.0978e-05 *lens_ipow(x, 3)*y*dy + 1.22782e-06 *lens_ipow(x, 5) + -0.0014384 *lens_ipow(x, 3)*lens_ipow(dx, 2)*lambda+0.0f;
const double dx30 =  + -0.0717224 *dx*dy + -0.00406938 *y*dx + -0.00044345 *x*y + -0.00498643 *x*dy + 0.00778351 *x*lens_ipow(dx, 2)*dy + 0.00992988 *x*lens_ipow(dy, 3) + 0.000311165 *x*y*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -3.9351e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + -0.0585576 *y*dx*lens_ipow(dy, 4)*lambda + -1.29582e-10 *lens_ipow(x, 7)*y + -2.70087e-05 *x*lens_ipow(y, 3)*lens_ipow(dy, 4)+0.0f;
const double dx31 =  + -0.0569232  + 0.0178552 *lambda + -0.0412433 *lens_ipow(dx, 2) + -0.0124065 *y*dy + -0.115443 *lens_ipow(dy, 2) + -0.00406938 *x*dx + -0.0135893 *lens_ipow(lambda, 2) + -0.000221725 *lens_ipow(x, 2) + -0.000617427 *lens_ipow(y, 2) + -2.22239e-06 *lens_ipow(y, 4) + 1.60767e-06 *lens_ipow(y, 4)*lambda + -7.81487e-06 *lens_ipow(y, 4)*lens_ipow(dx, 2) + 0.000155582 *lens_ipow(x, 2)*lens_ipow(dx, 2)*lens_ipow(lambda, 2) + -2.95132e-08 *lens_ipow(x, 4)*lens_ipow(y, 2) + -0.0585576 *x*dx*lens_ipow(dy, 4)*lambda + -1.61978e-11 *lens_ipow(x, 8) + -4.0513e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 4) + 0.000508573 *lens_ipow(y, 3)*lens_ipow(dx, 4)*dy + 6.85765e-07 *lens_ipow(y, 5)*lens_ipow(dy, 3)+0.0f;
const double dx32 =  + -0.0824867 *y*dx + -0.0717224 *x*dy + -0.00406938 *x*y + -0.537333 *dx*dy + 0.00778351 *lens_ipow(x, 2)*dx*dy + -3.12595e-06 *lens_ipow(y, 5)*dx + 0.000311165 *lens_ipow(x, 2)*y*dx*lens_ipow(lambda, 2) + 22.9269 *dx*lens_ipow(dy, 5)*lambda + -0.0585576 *x*y*lens_ipow(dy, 4)*lambda + 0.000508573 *lens_ipow(y, 4)*lens_ipow(dx, 3)*dy+0.0f;
const double dx33 =  + 0.481605  + -0.00620323 *lens_ipow(y, 2) + -0.230885 *y*dy + -0.0717224 *x*dx + -0.268667 *lens_ipow(dx, 2) + -0.00249321 *lens_ipow(x, 2) + -1.05701 *lens_ipow(dy, 2) + 0.00389176 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 2.50733 *lens_ipow(dy, 4) + 0.0148948 *lens_ipow(x, 2)*lens_ipow(dy, 2) + 57.3173 *lens_ipow(dx, 2)*lens_ipow(dy, 4)*lambda + -0.23423 *x*y*dx*lens_ipow(dy, 3)*lambda + -5.40173e-05 *lens_ipow(x, 2)*lens_ipow(y, 3)*lens_ipow(dy, 3) + 0.000127143 *lens_ipow(y, 4)*lens_ipow(dx, 4) + 3.42883e-07 *lens_ipow(y, 6)*lens_ipow(dy, 2)+0.0f;
const double dx34 =  + 0.0178552 *y + -0.0271786 *y*lambda + 3.21534e-07 *lens_ipow(y, 5) + 0.000311165 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*lambda + 11.4635 *lens_ipow(dx, 2)*lens_ipow(dy, 5) + -0.0585576 *x*y*dx*lens_ipow(dy, 4)+0.0f;
const double dx40 =  + 0.00229299 *dx + -0.578207 *lens_ipow(dx, 3) + -0.000398356 *lens_ipow(y, 2)*dx + -0.059766 *x*lens_ipow(dx, 2) + -0.0019686 *lens_ipow(x, 2)*dx + -0.374883 *dx*lens_ipow(dy, 2) + -2.05381e-05 *lens_ipow(x, 3) + -0.0239191 *y*dx*dy + -0.00143931 *x*lens_ipow(dy, 2) + -0.00121019 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + -1.88064e-05 *x*lens_ipow(y, 3)*dy + -0.026707 *x*y*lens_ipow(dy, 3) + -0.205651 *x*lens_ipow(dy, 4) + -9.74269e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*dy + -0.000252295 *lens_ipow(x, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2)+0.0f;
const double dx41 =  + -0.010752 *dy + -0.000367584 *y + -0.0160029 *y*lens_ipow(dx, 2) + -0.000796711 *x*y*dx + -0.420352 *lens_ipow(dx, 2)*dy + -0.0239191 *x*dx*dy + -0.00121019 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -2.82096e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -1.91554e-08 *lens_ipow(y, 5) + -0.0133535 *lens_ipow(x, 2)*lens_ipow(dy, 3) + -2.43567e-06 *lens_ipow(x, 4)*lens_ipow(dx, 2)*dy+0.0f;
const double dx42 =  + 0.00229299 *x + 0.0902284 *dx + -16.6457 *lens_ipow(dx, 3) + -0.0160029 *lens_ipow(y, 2)*dx + -1.73462 *x*lens_ipow(dx, 2) + -12.048 *dx*lens_ipow(dy, 2) + -0.000398356 *x*lens_ipow(y, 2) + -0.059766 *lens_ipow(x, 2)*dx + -0.840704 *y*dx*dy + -0.000656201 *lens_ipow(x, 3) + -0.374883 *x*lens_ipow(dy, 2) + -0.0239191 *x*y*dy + -4.87134e-06 *lens_ipow(x, 4)*y*dx*dy + -0.000126147 *lens_ipow(x, 4)*dx*lens_ipow(dy, 2)+0.0f;
const double dx43 =  + -0.010752 *y + -0.318223 *dy + -12.048 *lens_ipow(dx, 2)*dy + -0.420352 *y*lens_ipow(dx, 2) + -0.749766 *x*dx*dy + -0.0239191 *x*y*dx + -0.00143931 *lens_ipow(x, 2)*dy + -0.00121019 *lens_ipow(x, 2)*lens_ipow(y, 2)*dy + -9.40319e-06 *lens_ipow(x, 2)*lens_ipow(y, 3) + -0.0400605 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + -0.411302 *lens_ipow(x, 2)*lens_ipow(dy, 3) + -2.43567e-06 *lens_ipow(x, 4)*y*lens_ipow(dx, 2) + -0.000126147 *lens_ipow(x, 4)*lens_ipow(dx, 2)*dy+0.0f;
const double dx44 =  + 0.3874  + -1.09059 *lambda + 0.809958 *lens_ipow(lambda, 2)+0.0f;
} break;

case Panavision_Angenieux_rear_anamorph_double_gauss_2006_100mm:
{
const float dx00 =  + 0.811708  + 0.200088 *lambda + -0.150089 *lens_ipow(lambda, 2) + 0.486484 *lens_ipow(dx, 2) + 0.00576804 *y*dy + -0.000107763 *lens_ipow(y, 2) + 0.111761 *x*dx + 0.00213979 *lens_ipow(x, 2) + 5.4741e-05 *lens_ipow(y, 2)*lambda + -0.467541 *lens_ipow(dy, 4) + 0.0114558 *y*lens_ipow(dx, 2)*dy + -1.54718e-05 *lens_ipow(y, 3)*dy + -2.05197e-07 *lens_ipow(y, 4) + 1.70461 *x*lens_ipow(dx, 3) + 0.0892995 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.00165304 *lens_ipow(x, 3)*dx + 1.09967e-05 *lens_ipow(x, 4)+0.0f;
const float dx01 =  + 0.143035 *dx*dy + 0.00995517 *y*dx + 0.00576804 *x*dy + -0.000215527 *x*y + 0.000109482 *x*y*lambda + 0.350696 *dx*lens_ipow(dy, 3) + 0.0635031 *y*dx*lens_ipow(dy, 2) + 0.0114558 *x*lens_ipow(dx, 2)*dy + -4.64153e-05 *x*lens_ipow(y, 2)*dy + -8.20787e-07 *x*lens_ipow(y, 3)+0.0f;
const float dx02 =  + 136.731  + 7.46914 *lambda + -5.66095 *lens_ipow(lambda, 2) + -63.2176 *lens_ipow(dy, 2) + -198.928 *lens_ipow(dx, 2) + 0.143035 *y*dy + 0.00497759 *lens_ipow(y, 2) + 0.972968 *x*dx + 0.0558804 *lens_ipow(x, 2) + 99.5754 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + -1411.72 *lens_ipow(dx, 4) + 0.350696 *y*lens_ipow(dy, 3) + 0.0317515 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 0.0229116 *x*y*dx*dy + 2.55691 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.059533 *lens_ipow(x, 3)*dx + 0.00041326 *lens_ipow(x, 4)+0.0f;
const float dx03 =  + -126.435 *dx*dy + 0.143035 *y*dx + 0.00576804 *x*y + 66.3836 *lens_ipow(dx, 3)*dy + 1.05209 *y*dx*lens_ipow(dy, 2) + 0.0635031 *lens_ipow(y, 2)*dx*dy + -1.87017 *x*lens_ipow(dy, 3) + 0.0114558 *x*y*lens_ipow(dx, 2) + -1.54718e-05 *x*lens_ipow(y, 3)+0.0f;
const float dx04 =  + 7.46914 *dx + 0.200088 *x + -11.3219 *dx*lambda + -0.300177 *x*lambda + 5.4741e-05 *x*lens_ipow(y, 2)+0.0f;
const float dx10 =  + 0.0136229 *y*dx + 0.00409436 *x*dy + 0.187807 *dx*dy*lambda + -2.90606 *dx*lens_ipow(dy, 3) + -0.81994 *lens_ipow(dx, 3)*dy + 7.51068e-06 *lens_ipow(y, 3)*dx + -0.0506526 *x*lens_ipow(dy, 3)+0.0f;
const float dx11 =  + -0.452377  + 0.325564 *lambda + -0.223848 *lens_ipow(lambda, 2) + 0.398504 *lens_ipow(dy, 2) + -0.00126916 *lens_ipow(y, 2) + 0.0136229 *x*dx + 1.26785 *lens_ipow(dx, 2)*lambda + 0.000614913 *lens_ipow(y, 2)*lambda + -1.11564 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 1.08852 *lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.0156642 *y*dy*lens_ipow(lambda, 2) + -0.00937037 *lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000463524 *lens_ipow(y, 3)*dy + -6.57797e-06 *lens_ipow(y, 4) + 2.2532e-05 *x*lens_ipow(y, 2)*dx + 0.805223 *lens_ipow(dy, 4)*lambda + 0.642069 *lens_ipow(dx, 6)+0.0f;
const float dx12 =  + 0.0136229 *x*y + -682.535 *dx*dy*lambda + 2.53569 *y*dx*lambda + 0.187807 *x*dy*lambda + 1379.04 *dx*dy*lens_ipow(lambda, 2) + -2.23129 *y*dx*lens_ipow(lambda, 2) + 2.17705 *y*dx*lens_ipow(dy, 2) + -2.90606 *x*lens_ipow(dy, 3) + -2.45982 *x*lens_ipow(dx, 2)*dy + 7.51068e-06 *x*lens_ipow(y, 3) + -888.885 *dx*dy*lens_ipow(lambda, 3) + 3.85241 *y*lens_ipow(dx, 5)+0.0f;
const float dx13 =  + 103.31  + -134.333 *lens_ipow(dy, 2) + 0.797007 *y*dy + 0.00204718 *lens_ipow(x, 2) + -341.268 *lens_ipow(dx, 2)*lambda + 0.187807 *x*dx*lambda + 107.695 *lens_ipow(dy, 4) + 689.519 *lens_ipow(dx, 2)*lens_ipow(lambda, 2) + 2.17705 *y*lens_ipow(dx, 2)*dy + 0.00783211 *lens_ipow(y, 2)*lens_ipow(lambda, 2) + -0.00624692 *lens_ipow(y, 3)*dy + -0.000115881 *lens_ipow(y, 4) + -8.71819 *x*dx*lens_ipow(dy, 2) + -0.81994 *x*lens_ipow(dx, 3) + -0.0759789 *lens_ipow(x, 2)*lens_ipow(dy, 2) + -444.443 *lens_ipow(dx, 2)*lens_ipow(lambda, 3) + 3.22089 *y*lens_ipow(dy, 3)*lambda+0.0f;
const float dx14 =  + 0.325564 *y + -0.447696 *y*lambda + -341.268 *lens_ipow(dx, 2)*dy + 1.26785 *y*lens_ipow(dx, 2) + 0.000204971 *lens_ipow(y, 3) + 0.187807 *x*dx*dy + 1379.04 *lens_ipow(dx, 2)*dy*lambda + -2.23129 *y*lens_ipow(dx, 2)*lambda + 0.0156642 *lens_ipow(y, 2)*dy*lambda + -1333.33 *lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + 0.805223 *y*lens_ipow(dy, 4)+0.0f;
const float dx20 =  + -0.0124702  + 9.62389e-05 *lambda + -0.000819149 *lens_ipow(dy, 2) + -0.00349068 *lens_ipow(dx, 2) + -1.49117e-05 *y*dy + 1.2668e-06 *lens_ipow(y, 2) + -0.000730331 *x*dx + -1.1318e-05 *lens_ipow(x, 2) + -4.13888e-07 *lens_ipow(y, 2)*lambda + -0.034531 *lens_ipow(dx, 4) + 3.03662e-05 *lens_ipow(x, 2)*lens_ipow(dx, 2) + -7.53227e-09 *lens_ipow(x, 4) + -1.48485e-06 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lambda + -3.75352e-10 *lens_ipow(y, 5)*lens_ipow(dy, 3) + 9.99504e-05 *x*dx*lens_ipow(lambda, 8)+0.0f;
const float dx21 =  + 0.000439633 *dx*dy + -1.49117e-05 *x*dy + 2.53361e-06 *x*y + -8.27777e-07 *x*y*lambda + -1.40636e-07 *lens_ipow(y, 3)*dx + 1.02267e-06 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + 0.00267099 *y*lens_ipow(dx, 5)*lambda + -1.48485e-06 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lambda + -1.87676e-09 *x*lens_ipow(y, 4)*lens_ipow(dy, 3)+0.0f;
const float dx22 =  + -0.868809  + 0.112677 *lambda + -0.0791974 *lens_ipow(lambda, 2) + 1.16274 *lens_ipow(dx, 2) + 0.000439633 *y*dy + -0.00698137 *x*dx + -0.000365165 *lens_ipow(x, 2) + 0.721032 *lens_ipow(dy, 2)*lambda + -4.72839 *lens_ipow(dx, 4) + -3.51589e-08 *lens_ipow(y, 4) + -0.138124 *x*lens_ipow(dx, 3) + 2.02442e-05 *lens_ipow(x, 3)*dx + -2.28083 *lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 2.00291 *lens_ipow(dy, 2)*lens_ipow(lambda, 4) + -1.72074 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 2.55668e-07 *lens_ipow(y, 4)*lens_ipow(dy, 2) + 0.00667747 *lens_ipow(y, 2)*lens_ipow(dx, 4)*lambda + -2.22728e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 4.99752e-05 *lens_ipow(x, 2)*lens_ipow(lambda, 8)+0.0f;
const float dx23 =  + 0.000439633 *y*dx + -0.0016383 *x*dy + -1.49117e-05 *x*y + 1.44206 *dx*dy*lambda + -4.56167 *dx*dy*lens_ipow(lambda, 3) + 4.00583 *dx*dy*lens_ipow(lambda, 4) + -0.688298 *lens_ipow(dx, 5)*dy + 5.11337e-07 *lens_ipow(y, 4)*dx*dy + -1.12606e-09 *x*lens_ipow(y, 5)*lens_ipow(dy, 2)+0.0f;
const float dx24 =  + 0.112677 *dx + 9.62389e-05 *x + -0.158395 *dx*lambda + 0.721032 *dx*lens_ipow(dy, 2) + -4.13888e-07 *x*lens_ipow(y, 2) + -6.8425 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + 8.01166 *dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + 0.00133549 *lens_ipow(y, 2)*lens_ipow(dx, 5) + -7.42427e-07 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 3) + 0.000399801 *lens_ipow(x, 2)*dx*lens_ipow(lambda, 7)+0.0f;
const float dx30 =  + 0.00561152 *dx*dy + -0.000114837 *y*dx + 3.71218e-05 *x*dy + 0.00395695 *dx*lens_ipow(dy, 3) + 1.15001e-09 *x*lens_ipow(y, 3) + -3.95936e-06 *x*y*lens_ipow(dy, 2)*lambda + -0.00036844 *x*y*lens_ipow(dx, 4)*lens_ipow(dy, 2) + 8.53761e-10 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dx, 3)*dy+0.0f;
const float dx31 =  + -0.00570658  + -0.00839497 *lambda + 0.0126182 *lens_ipow(lambda, 2) + -0.00372193 *lens_ipow(dx, 2) + 6.72389e-06 *lens_ipow(y, 2) + -0.000114837 *x*dx + -0.00653246 *lens_ipow(lambda, 3) + -1.85358e-06 *lens_ipow(y, 2)*lambda + 0.000689427 *y*lens_ipow(dy, 3) + 6.98583e-05 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 2.58409e-06 *lens_ipow(y, 3)*dy + 3.27628e-08 *lens_ipow(y, 4) + 1.72501e-09 *lens_ipow(x, 2)*lens_ipow(y, 2) + -1.97968e-06 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + 1.30797e-05 *lens_ipow(y, 3)*lens_ipow(dx, 4)*dy + -0.00018422 *lens_ipow(x, 2)*lens_ipow(dx, 4)*lens_ipow(dy, 2) + 1.13835e-09 *lens_ipow(x, 3)*lens_ipow(y, 3)*lens_ipow(dx, 3)*dy+0.0f;
const float dx32 =  + 0.968692 *dx*dy + -0.00744386 *y*dx + 0.00561152 *x*dy + -0.000114837 *x*y + 0.00395695 *x*lens_ipow(dy, 3) + -7.84826 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + -3.74422 *lens_ipow(dx, 5)*dy + 1.30797e-05 *lens_ipow(y, 4)*lens_ipow(dx, 3)*dy + -0.000736881 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 8.53761e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*lens_ipow(dx, 2)*dy+0.0f;
const float dx33 =  + -0.646013  + 0.0451894 *lambda + -0.0328575 *lens_ipow(lambda, 2) + 0.937685 *lens_ipow(dy, 2) + 0.484346 *lens_ipow(dx, 2) + 0.00561152 *x*dx + 1.85609e-05 *lens_ipow(x, 2) + -0.487474 *lens_ipow(dy, 4) + 0.00103414 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 4.65722e-05 *lens_ipow(y, 3)*dy + 6.46022e-07 *lens_ipow(y, 4) + 0.0118709 *x*dx*lens_ipow(dy, 2) + -3.95936e-06 *lens_ipow(x, 2)*y*dy*lambda + -5.88619 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + -0.624036 *lens_ipow(dx, 6) + 3.26992e-06 *lens_ipow(y, 4)*lens_ipow(dx, 4) + -0.00036844 *lens_ipow(x, 2)*y*lens_ipow(dx, 4)*dy + 2.84587e-10 *lens_ipow(x, 3)*lens_ipow(y, 4)*lens_ipow(dx, 3)+0.0f;
const float dx34 =  + 0.0451894 *dy + -0.00839497 *y + -0.0657151 *dy*lambda + 0.0252364 *y*lambda + -0.0195974 *y*lens_ipow(lambda, 2) + -6.17861e-07 *lens_ipow(y, 3) + -1.97968e-06 *lens_ipow(x, 2)*y*lens_ipow(dy, 2)+0.0f;
const float dx40 =  + -0.00300862 *dx*lens_ipow(dy, 2) + -0.0352569 *lens_ipow(dx, 3) + 0.00021485 *y*dx*dy + -0.00137219 *x*lens_ipow(dx, 2) + 4.25955e-06 *x*y*dy + -2.29298e-05 *lens_ipow(x, 2)*dx + -1.81339e-07 *lens_ipow(x, 3) + 1.99818e-06 *lens_ipow(y, 4)*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + 7.80369e-08 *lens_ipow(y, 5)*lens_ipow(dx, 3)*dy*lambda + 7.46231e-10 *lens_ipow(y, 6)*lens_ipow(dx, 3)*lambda+0.0f;
const float dx41 =  + 2.03882e-05 *y + 0.00125951 *dy*lambda + -0.00102213 *dy*lens_ipow(lambda, 2) + -0.0149732 *lens_ipow(dy, 3) + -0.00204629 *y*lens_ipow(dy, 2) + -0.000243265 *y*lens_ipow(dx, 2) + -8.45523e-05 *lens_ipow(y, 2)*dy + -1.13361e-06 *lens_ipow(y, 3) + 0.00021485 *x*dx*dy + 2.12977e-06 *lens_ipow(x, 2)*dy + 0.00562986 *lens_ipow(dy, 5)*lambda + 7.99271e-06 *x*lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2)*lambda + 3.90184e-07 *x*lens_ipow(y, 4)*lens_ipow(dx, 3)*dy*lambda + 4.47739e-09 *x*lens_ipow(y, 5)*lens_ipow(dx, 3)*lambda+0.0f;
const float dx42 =  + -0.626787 *dx*lens_ipow(dy, 2) + -2.955 *lens_ipow(dx, 3) + -0.000243265 *lens_ipow(y, 2)*dx + -0.00300862 *x*lens_ipow(dy, 2) + -0.105771 *x*lens_ipow(dx, 2) + 0.00021485 *x*y*dy + -0.00137219 *lens_ipow(x, 2)*dx + -7.64326e-06 *lens_ipow(x, 3) + -0.245678 *lens_ipow(dx, 3)*lambda + 5.99454e-06 *x*lens_ipow(y, 4)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lambda + 2.34111e-07 *x*lens_ipow(y, 5)*lens_ipow(dx, 2)*dy*lambda + 2.23869e-09 *x*lens_ipow(y, 6)*lens_ipow(dx, 2)*lambda+0.0f;
const float dx43 =  + 0.00125951 *y*lambda + -0.538248 *lens_ipow(dy, 3) + -0.626787 *lens_ipow(dx, 2)*dy + -0.00102213 *y*lens_ipow(lambda, 2) + -0.0449195 *y*lens_ipow(dy, 2) + -0.00204629 *lens_ipow(y, 2)*dy + -2.81841e-05 *lens_ipow(y, 3) + -0.00601723 *x*dx*dy + 0.00021485 *x*y*dx + 2.12977e-06 *lens_ipow(x, 2)*y + 0.0281493 *y*lens_ipow(dy, 4)*lambda + 3.99636e-06 *x*lens_ipow(y, 4)*lens_ipow(dx, 3)*dy*lambda + 7.80369e-08 *x*lens_ipow(y, 5)*lens_ipow(dx, 3)*lambda+0.0f;
const float dx44 =  + 1.26306  + -5.09861 *lambda + 7.34264 *lens_ipow(lambda, 2) + 0.00125951 *y*dy + -3.66963 *lens_ipow(lambda, 3) + -0.00204426 *y*dy*lambda + -0.0614196 *lens_ipow(dx, 4) + 0.00562986 *y*lens_ipow(dy, 5) + 1.99818e-06 *x*lens_ipow(y, 4)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 7.80369e-08 *x*lens_ipow(y, 5)*lens_ipow(dx, 3)*dy + 7.46231e-10 *x*lens_ipow(y, 6)*lens_ipow(dx, 3)+0.0f;
} break;

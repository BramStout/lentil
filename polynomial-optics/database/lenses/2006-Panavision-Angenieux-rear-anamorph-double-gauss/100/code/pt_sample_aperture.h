case Panavision_Angenieux_rear_anamorph_double_gauss_2006_100mm:
{
float pred_x;
float pred_y;
float pred_dx;
float pred_dy;
float sqr_err = FLT_MAX;
for(int k=0;k<5&&sqr_err > 1e-4f;k++)
{
  const float begin_x = x + dist * dx;
  const float begin_y = y + dist * dy;
  const float begin_dx = dx;
  const float begin_dy = dy;
  const float begin_lambda = lambda;
  pred_x =  + 74.0947 *begin_dx + 0.818807 *begin_x + 17.151 *begin_dx*begin_lambda + -11.7868 *begin_dx*lens_ipow(begin_lambda, 2) + -43.368 *begin_dx*lens_ipow(begin_dy, 2) + -53.8698 *lens_ipow(begin_dx, 3) + -0.0734648 *begin_y*begin_dx*begin_dy + 0.00125607 *lens_ipow(begin_y, 2)*begin_dx + 0.221262 *begin_x*lens_ipow(begin_lambda, 2) + -0.275061 *begin_x*lens_ipow(begin_dy, 2) + -0.59124 *begin_x*lens_ipow(begin_dx, 2) + -5.12867e-05 *begin_x*lens_ipow(begin_y, 2) + 0.0183043 *lens_ipow(begin_x, 2)*begin_dx + 0.000324258 *lens_ipow(begin_x, 3) + -0.216147 *begin_x*lens_ipow(begin_lambda, 3) + 52.2983 *lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 2) + -0.469337 *begin_y*begin_dx*lens_ipow(begin_dy, 3) + 1.12763 *begin_x*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + 5.7398 *begin_x*lens_ipow(begin_dx, 4) + 0.010041 *lens_ipow(begin_x, 2)*begin_dx*lens_ipow(begin_dy, 2) + 0.426193 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 3) + 0.0118726 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2) + 0.000157055 *lens_ipow(begin_x, 4)*begin_dx + 8.47955e-07 *lens_ipow(begin_x, 5) + -0.280172 *begin_x*lens_ipow(begin_dy, 4)*begin_lambda + -0.0141558 *begin_x*begin_y*lens_ipow(begin_dy, 3)*begin_lambda + 7.6213e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4)*begin_dx + -0.0239262 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 5)*lens_ipow(begin_lambda, 2);
  pred_y =  + 55.4062 *begin_dy + 0.217599 *begin_y + 13.4827 *begin_dy*begin_lambda + 0.116672 *begin_y*begin_lambda + -9.17618 *begin_dy*lens_ipow(begin_lambda, 2) + -33.3432 *lens_ipow(begin_dy, 3) + -36.9199 *lens_ipow(begin_dx, 2)*begin_dy + -0.189918 *begin_y*lens_ipow(begin_dy, 2) + -0.193803 *begin_y*lens_ipow(begin_dx, 2) + -0.00412872 *lens_ipow(begin_y, 2)*begin_dy + -0.000181543 *lens_ipow(begin_y, 3) + -0.133143 *begin_x*begin_dx*begin_dy + -2.25484e-05 *lens_ipow(begin_x, 2)*begin_y + -0.0800835 *begin_y*lens_ipow(begin_lambda, 3) + -1.00074 *begin_y*lens_ipow(begin_dy, 4) + -2.84384e-05 *lens_ipow(begin_y, 4)*begin_dy + -5.0815e-07 *lens_ipow(begin_y, 5) + -1.10999 *begin_x*begin_dx*lens_ipow(begin_dy, 3) + -0.443053 *begin_x*lens_ipow(begin_dx, 3)*begin_dy + 0.864555 *begin_y*lens_ipow(begin_dy, 4)*begin_lambda + 0.639929 *begin_y*lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2)*begin_lambda + -0.000786098 *lens_ipow(begin_y, 3)*lens_ipow(begin_dy, 2)*begin_lambda + 2.10186e-07 *lens_ipow(begin_y, 5)*begin_lambda + 0.608564 *begin_y*lens_ipow(begin_dx, 6) + -0.0425061 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 5) + 2.22528e-09 *begin_x*lens_ipow(begin_y, 7)*begin_dx*lens_ipow(begin_dy, 2) + 7.82131e-11 *begin_x*lens_ipow(begin_y, 8)*begin_dx*begin_dy + 7.08393e-13 *begin_x*lens_ipow(begin_y, 9)*begin_dx;
  pred_dx =  + 0.57257 *begin_dx + -0.00687199 *begin_x + 0.00081968 *begin_x*begin_lambda + 0.0120443 *begin_dx*lens_ipow(begin_lambda, 2) + -0.7231 *begin_dx*lens_ipow(begin_dy, 2) + -1.04178 *lens_ipow(begin_dx, 3) + -0.0116692 *begin_y*begin_dx*begin_dy + -0.00845076 *begin_x*lens_ipow(begin_dy, 2) + -0.0349133 *begin_x*lens_ipow(begin_dx, 2) + -6.56509e-05 *begin_x*begin_y*begin_dy + -2.39273e-06 *begin_x*lens_ipow(begin_y, 2) + -0.000123325 *lens_ipow(begin_x, 2)*begin_dx + 1.10809e-06 *begin_x*lens_ipow(begin_y, 2)*begin_lambda + 1.19645e-05 *lens_ipow(begin_x, 3)*begin_lambda + -0.0132191 *begin_y*lens_ipow(begin_dx, 3)*begin_dy + 0.000367816 *lens_ipow(begin_y, 2)*begin_dx*lens_ipow(begin_dy, 2) + 4.59521e-06 *begin_x*lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 2) + -1.11865e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_lambda, 2) + -0.0200649 *begin_x*lens_ipow(begin_dx, 4)*begin_lambda + -113.158 *lens_ipow(begin_dx, 7) + -0.0268656 *begin_y*begin_dx*lens_ipow(begin_dy, 5) + -8.58316 *begin_x*lens_ipow(begin_dx, 6) + -3.3344e-12 *begin_x*lens_ipow(begin_y, 6) + -0.248106 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 5) + -0.00326273 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 4) + -1.67326e-05 *lens_ipow(begin_x, 4)*lens_ipow(begin_dx, 3) + 7.43916e-07 *lens_ipow(begin_y, 4)*lens_ipow(begin_dx, 3)*begin_lambda + 3.75158e-05 *lens_ipow(begin_x, 3)*lens_ipow(begin_dx, 2)*lens_ipow(begin_lambda, 6);
  pred_dy =  + 0.415398 *begin_dy + -0.0167207 *begin_y + -0.0106857 *begin_dy*begin_lambda + 0.00579195 *begin_y*begin_lambda + -0.442376 *lens_ipow(begin_dy, 3) + -0.00423897 *begin_y*lens_ipow(begin_lambda, 2) + -0.0132002 *begin_y*lens_ipow(begin_dy, 2) + -0.0104672 *begin_y*lens_ipow(begin_dx, 2) + -3.88703e-06 *lens_ipow(begin_y, 3) + -0.0202988 *begin_x*begin_dx*begin_dy + -0.000138511 *begin_x*begin_y*begin_dx + -0.000166794 *lens_ipow(begin_x, 2)*begin_dy + -1.74062e-06 *lens_ipow(begin_x, 2)*begin_y + -4.84909 *lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + 1.35692e-06 *lens_ipow(begin_y, 3)*begin_lambda + 8.98146 *lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 2) + -0.0133959 *begin_y*lens_ipow(begin_dy, 4) + -2.40242e-07 *lens_ipow(begin_y, 4)*begin_dy + -7.44543e-09 *lens_ipow(begin_y, 5) + -0.0149938 *begin_x*begin_dx*lens_ipow(begin_dy, 3) + 2.05681e-07 *begin_x*lens_ipow(begin_y, 3)*begin_dx + 0.000136006 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2)*begin_dy + -9.2301e-08 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 2)*begin_dy + -5.43581 *lens_ipow(begin_dx, 2)*begin_dy*lens_ipow(begin_lambda, 3) + 0.000686189 *lens_ipow(begin_y, 2)*lens_ipow(begin_dy, 5) + -17.2797 *lens_ipow(begin_dx, 4)*lens_ipow(begin_dy, 3)*begin_lambda + -0.655116 *begin_x*lens_ipow(begin_dx, 3)*lens_ipow(begin_dy, 3)*begin_lambda + 0.000142313 *lens_ipow(begin_x, 3)*begin_dx*lens_ipow(begin_dy, 3)*begin_lambda;
  float dx1_domega0[2][2];
  dx1_domega0[0][0] =  + 74.0947  + 17.151 *begin_lambda + -11.7868 *lens_ipow(begin_lambda, 2) + -43.368 *lens_ipow(begin_dy, 2) + -161.609 *lens_ipow(begin_dx, 2) + -0.0734648 *begin_y*begin_dy + 0.00125607 *lens_ipow(begin_y, 2) + -1.18248 *begin_x*begin_dx + 0.0183043 *lens_ipow(begin_x, 2) + 156.895 *lens_ipow(begin_dx, 2)*lens_ipow(begin_dy, 2) + -0.469337 *begin_y*lens_ipow(begin_dy, 3) + 2.25525 *begin_x*begin_dx*lens_ipow(begin_dy, 2) + 22.9592 *begin_x*lens_ipow(begin_dx, 3) + 0.010041 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 2) + 1.27858 *lens_ipow(begin_x, 2)*lens_ipow(begin_dx, 2) + 0.0237452 *lens_ipow(begin_x, 3)*begin_dx + 0.000157055 *lens_ipow(begin_x, 4) + 7.6213e-09 *lens_ipow(begin_x, 2)*lens_ipow(begin_y, 4) + -0.119631 *lens_ipow(begin_y, 2)*lens_ipow(begin_dx, 4)*lens_ipow(begin_lambda, 2)+0.0f;
  dx1_domega0[0][1] =  + -86.7359 *begin_dx*begin_dy + -0.0734648 *begin_y*begin_dx + -0.550122 *begin_x*begin_dy + 104.597 *lens_ipow(begin_dx, 3)*begin_dy + -1.40801 *begin_y*begin_dx*lens_ipow(begin_dy, 2) + 2.25525 *begin_x*lens_ipow(begin_dx, 2)*begin_dy + 0.0200819 *lens_ipow(begin_x, 2)*begin_dx*begin_dy + -1.12069 *begin_x*lens_ipow(begin_dy, 3)*begin_lambda + -0.0424673 *begin_x*begin_y*lens_ipow(begin_dy, 2)*begin_lambda+0.0f;
  dx1_domega0[1][0] =  + -73.8399 *begin_dx*begin_dy + -0.387606 *begin_y*begin_dx + -0.133143 *begin_x*begin_dy + -1.10999 *begin_x*lens_ipow(begin_dy, 3) + -1.32916 *begin_x*lens_ipow(begin_dx, 2)*begin_dy + 1.27986 *begin_y*begin_dx*lens_ipow(begin_dy, 2)*begin_lambda + 3.65139 *begin_y*lens_ipow(begin_dx, 5) + 2.22528e-09 *begin_x*lens_ipow(begin_y, 7)*lens_ipow(begin_dy, 2) + 7.82131e-11 *begin_x*lens_ipow(begin_y, 8)*begin_dy + 7.08393e-13 *begin_x*lens_ipow(begin_y, 9)+0.0f;
  dx1_domega0[1][1] =  + 55.4062  + 13.4827 *begin_lambda + -9.17618 *lens_ipow(begin_lambda, 2) + -100.03 *lens_ipow(begin_dy, 2) + -36.9199 *lens_ipow(begin_dx, 2) + -0.379836 *begin_y*begin_dy + -0.00412872 *lens_ipow(begin_y, 2) + -0.133143 *begin_x*begin_dx + -4.00295 *begin_y*lens_ipow(begin_dy, 3) + -2.84384e-05 *lens_ipow(begin_y, 4) + -3.32997 *begin_x*begin_dx*lens_ipow(begin_dy, 2) + -0.443053 *begin_x*lens_ipow(begin_dx, 3) + 3.45822 *begin_y*lens_ipow(begin_dy, 3)*begin_lambda + 1.27986 *begin_y*lens_ipow(begin_dx, 2)*begin_dy*begin_lambda + -0.0015722 *lens_ipow(begin_y, 3)*begin_dy*begin_lambda + -0.21253 *lens_ipow(begin_x, 2)*lens_ipow(begin_dy, 4) + 4.45056e-09 *begin_x*lens_ipow(begin_y, 7)*begin_dx*begin_dy + 7.82131e-11 *begin_x*lens_ipow(begin_y, 8)*begin_dx+0.0f;
  float invJ[2][2];
  const float invdet = 1.0f/(dx1_domega0[0][0]*dx1_domega0[1][1] - dx1_domega0[0][1]*dx1_domega0[1][0]);
  invJ[0][0] =  dx1_domega0[1][1]*invdet;
  invJ[1][1] =  dx1_domega0[0][0]*invdet;
  invJ[0][1] = -dx1_domega0[0][1]*invdet;
  invJ[1][0] = -dx1_domega0[1][0]*invdet;
  const float dx1[2] = {out_x - pred_x, out_y - pred_y};
  for(int i=0;i<2;i++)
  {
    dx += invJ[0][i]*dx1[i];
    dy += invJ[1][i]*dx1[i];
  }
  sqr_err = dx1[0]*dx1[0] + dx1[1]*dx1[1];
}
out_dx = pred_dx;
out_dy = pred_dy;
} break;

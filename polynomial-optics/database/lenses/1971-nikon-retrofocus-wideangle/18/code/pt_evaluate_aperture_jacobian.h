case nikon__retrofocus_wideangle__1971__18mm:
{
const double dx00 =  + 0.767079  + -0.0268957 *lambda + 0.0178444 *lens_ipow(lambda, 2) + 0.793056 *lens_ipow(dy, 2) + 2.07123 *lens_ipow(dx, 2) + 0.0857218 *y*dy + 0.00199391 *lens_ipow(y, 2) + 0.244932 *x*dx + 0.00589716 *lens_ipow(x, 2) + -0.932744 *y*lens_ipow(dx, 4)*dy + -0.0203429 *lens_ipow(y, 2)*lens_ipow(dx, 4) + -0.0858084 *x*y*lens_ipow(dx, 3)*dy + -0.00178615 *x*lens_ipow(y, 2)*lens_ipow(dx, 3) + 2.0387e-08 *lens_ipow(x, 2)*lens_ipow(y, 4) + 2.48366e-05 *lens_ipow(x, 4)*lens_ipow(dy, 2) + 1.81334e-05 *lens_ipow(x, 4)*lens_ipow(dx, 2) + 2.04092e-06 *lens_ipow(x, 5)*dx + 4.89709e-08 *lens_ipow(x, 6) + 0.00210748 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lambda + 0.0776048 *x*y*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -0.0433045 *lens_ipow(x, 2)*lens_ipow(dy, 4)*lens_ipow(lambda, 4)+0.0f;
const double dx01 =  + 1.28056 *dx*dy + 0.0752874 *y*dx + 0.0857218 *x*dy + 0.00398782 *x*y + -0.932744 *x*lens_ipow(dx, 4)*dy + -0.0406859 *x*y*lens_ipow(dx, 4) + -0.0429042 *lens_ipow(x, 2)*lens_ipow(dx, 3)*dy + -0.00178615 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + 2.71827e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + 0.00210748 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2)*lambda + 0.0388024 *lens_ipow(x, 2)*dx*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -0.000734775 *lens_ipow(y, 4)*lens_ipow(dx, 3)*dy*lens_ipow(lambda, 2) + -2.79949e-05 *lens_ipow(y, 5)*lens_ipow(dx, 3)*lens_ipow(lambda, 2)+0.0f;
const double dx02 =  + 23.6777  + 6.17727 *lens_ipow(dy, 2) + 18.6466 *lens_ipow(dx, 2) + 1.28056 *y*dy + 0.0376437 *lens_ipow(y, 2) + 4.14246 *x*dx + 0.122466 *lens_ipow(x, 2) + -3.73097 *x*y*lens_ipow(dx, 3)*dy + -0.0813717 *x*lens_ipow(y, 2)*lens_ipow(dx, 3) + -0.128713 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy + -0.00267923 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + 7.25336e-06 *lens_ipow(x, 5)*dx + 3.40153e-07 *lens_ipow(x, 6) + 0.00105374 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + 0.0388024 *lens_ipow(x, 2)*y*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + -0.000440865 *lens_ipow(y, 5)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 2) + -1.39974e-05 *lens_ipow(y, 6)*lens_ipow(dx, 2)*lens_ipow(lambda, 2)+0.0f;
const double dx03 =  + 12.3545 *dx*dy + 1.28056 *y*dx + 1.58611 *x*dy + 0.0857218 *x*y + -0.932744 *x*y*lens_ipow(dx, 4) + -0.0429042 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + 9.93464e-06 *lens_ipow(x, 5)*dy + 0.00210748 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy*lambda + 0.116407 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -0.000146955 *lens_ipow(y, 5)*lens_ipow(dx, 3)*lens_ipow(lambda, 2) + -0.0577393 *lens_ipow(x, 3)*lens_ipow(dy, 3)*lens_ipow(lambda, 4)+0.0f;
const double dx04 =  + -0.0268957 *x + 0.0356887 *x*lambda + 0.00105374 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 0.0776048 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 3)*lambda + -0.00029391 *lens_ipow(y, 5)*lens_ipow(dx, 3)*dy*lambda + -9.33162e-06 *lens_ipow(y, 6)*lens_ipow(dx, 3)*lambda + -0.0577393 *lens_ipow(x, 3)*lens_ipow(dy, 4)*lens_ipow(lambda, 3)+0.0f;
const double dx10 =  + 1.30319 *dx*dy + 0.0817787 *y*dx + 0.0756725 *x*dy + 0.00381944 *x*y + -0.0448266 *y*dx*lens_ipow(dy, 2) + -0.0045402 *lens_ipow(y, 2)*dx*dy + 3.62372e-06 *x*lens_ipow(y, 3) + -0.000233597 *lens_ipow(y, 3)*lens_ipow(dx, 3) + 2.00754e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dx + 6.08742e-08 *lens_ipow(x, 3)*lens_ipow(y, 3) + 4.72314e-09 *lens_ipow(x, 6)*y*dx + 1.65551e-10 *lens_ipow(x, 7)*y+0.0f;
const double dx11 =  + 0.764022  + -0.0100602 *lambda + 2.02401 *lens_ipow(dy, 2) + 0.740725 *lens_ipow(dx, 2) + 0.239672 *y*dy + 0.00574727 *lens_ipow(y, 2) + 0.0817787 *x*dx + 0.00190972 *lens_ipow(x, 2) + -0.0830795 *y*lens_ipow(dx, 2)*dy + -0.0448266 *x*dx*lens_ipow(dy, 2) + -0.00908039 *x*y*dx*dy + 5.43557e-06 *lens_ipow(x, 2)*lens_ipow(y, 2) + 1.78785e-06 *lens_ipow(y, 5)*dy + 6.32844e-08 *lens_ipow(y, 6) + -0.00070079 *x*lens_ipow(y, 2)*lens_ipow(dx, 3) + 2.00754e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 4.56557e-08 *lens_ipow(x, 4)*lens_ipow(y, 2) + -0.000818304 *lens_ipow(y, 3)*lens_ipow(dy, 5) + -4.23608e-11 *lens_ipow(y, 8) + 6.74734e-10 *lens_ipow(x, 7)*dx + 2.06939e-11 *lens_ipow(x, 8)+0.0f;
const double dx12 =  + 13.0487 *dx*dy + 1.48145 *y*dx + 1.30319 *x*dy + 0.0817787 *x*y + -0.0830795 *lens_ipow(y, 2)*dx*dy + -0.0448266 *x*y*lens_ipow(dy, 2) + -0.0045402 *x*lens_ipow(y, 2)*dy + 220.4 *lens_ipow(dx, 3)*lens_ipow(dy, 3) + -0.00070079 *x*lens_ipow(y, 3)*lens_ipow(dx, 2) + 6.69182e-07 *lens_ipow(x, 3)*lens_ipow(y, 3) + 6.74734e-10 *lens_ipow(x, 7)*y+0.0f;
const double dx13 =  + 23.6918  + 17.8719 *lens_ipow(dy, 2) + 6.52437 *lens_ipow(dx, 2) + 4.04802 *y*dy + 0.119836 *lens_ipow(y, 2) + 1.30319 *x*dx + 0.0378362 *lens_ipow(x, 2) + -0.0415398 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.0896533 *x*y*dx*dy + -0.0045402 *x*lens_ipow(y, 2)*dx + 165.3 *lens_ipow(dx, 4)*lens_ipow(dy, 2) + 2.97975e-07 *lens_ipow(y, 6) + -0.37456 *lens_ipow(lambda, 7) + -0.00102288 *lens_ipow(y, 4)*lens_ipow(dy, 4)+0.0f;
const double dx14 =  + -0.0100602 *y + -2.62192 *dy*lens_ipow(lambda, 6)+0.0f;
const double dx20 =  + 0.00366689  + -0.0392866 *lambda + 0.0268294 *lens_ipow(lambda, 2) + 0.155794 *lens_ipow(dy, 2) + 0.436544 *lens_ipow(dx, 2) + 0.0143115 *y*dy + 0.000335486 *lens_ipow(y, 2) + 0.0413282 *x*dx + 0.000960766 *lens_ipow(x, 2) + -0.000344728 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 5.80532e-07 *lens_ipow(x, 4) + 4.57841e-09 *lens_ipow(x, 2)*lens_ipow(y, 4) + 0.00022147 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lambda + 0.00287835 *lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -7.49335e-05 *lens_ipow(x, 3)*y*lens_ipow(dx, 3)*dy*lambda + -5.66256e-09 *lens_ipow(x, 5)*lens_ipow(y, 2)*dx*lambda + -1.20206e-10 *lens_ipow(x, 6)*lens_ipow(y, 2)*lambda + 5.10115e-05 *lens_ipow(x, 4)*lens_ipow(dy, 4)*lens_ipow(lambda, 2) + 9.2629e-11 *lens_ipow(x, 8)*lens_ipow(dy, 2)+0.0f;
const double dx21 =  + 0.285492 *dx*dy + 0.0137834 *y*dx + 0.0143115 *x*dy + 0.000670973 *x*y + 6.10455e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + 0.00022147 *lens_ipow(x, 2)*y*dx*lens_ipow(dy, 2)*lambda + -0.0198642 *lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 3) + 0.00575671 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -1.87334e-05 *lens_ipow(x, 4)*lens_ipow(dx, 3)*dy*lambda + -1.88752e-09 *lens_ipow(x, 6)*y*dx*lambda + -3.43446e-11 *lens_ipow(x, 7)*y*lambda + -5.66996e-09 *lens_ipow(y, 7)*lens_ipow(dx, 3)+0.0f;
const double dx22 =  + 1.42234  + -1.19371 *lambda + 0.820941 *lens_ipow(lambda, 2) + 3.65846 *lens_ipow(dy, 2) + 10.8155 *lens_ipow(dx, 2) + 0.285492 *y*dy + 0.00689169 *lens_ipow(y, 2) + 0.873088 *x*dx + 0.0206641 *lens_ipow(x, 2) + -0.000229818 *lens_ipow(x, 3)*dx + 0.000110735 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -0.0198642 *lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 3) + 0.00575671 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lens_ipow(lambda, 3) + -5.62001e-05 *lens_ipow(x, 4)*y*lens_ipow(dx, 2)*dy*lambda + -9.43759e-10 *lens_ipow(x, 6)*lens_ipow(y, 2)*lambda + -2.12623e-09 *lens_ipow(y, 8)*lens_ipow(dx, 2)+0.0f;
const double dx23 =  + 7.31691 *dx*dy + 0.285492 *y*dx + 0.311587 *x*dy + 0.0143115 *x*y + 0.00022147 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy*lambda + -0.0198642 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.00575671 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy*lens_ipow(lambda, 3) + -1.87334e-05 *lens_ipow(x, 4)*y*lens_ipow(dx, 3)*lambda + 4.08092e-05 *lens_ipow(x, 5)*lens_ipow(dy, 3)*lens_ipow(lambda, 2) + 2.05842e-11 *lens_ipow(x, 9)*dy+0.0f;
const double dx24 =  + -1.19371 *dx + -0.0392866 *x + 1.64188 *dx*lambda + 0.0536587 *x*lambda + 0.000110735 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 0.00863506 *x*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 2) + -1.87334e-05 *lens_ipow(x, 4)*y*lens_ipow(dx, 3)*dy + -9.43759e-10 *lens_ipow(x, 6)*lens_ipow(y, 2)*dx + -1.71723e-11 *lens_ipow(x, 7)*lens_ipow(y, 2) + 2.04046e-05 *lens_ipow(x, 5)*lens_ipow(dy, 4)*lambda+0.0f;
const double dx30 =  + 0.297291 *dx*dy + 0.0142816 *y*dx + 0.0144637 *x*dy + 0.000672624 *x*y + -0.000969939 *lens_ipow(x, 2)*dx*dy*lambda + -3.87201e-05 *lens_ipow(x, 3)*dy*lambda + 0.0685546 *y*dx*lens_ipow(dy, 4) + 0.0216159 *y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 4.67501e-06 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + -0.0021056 *lens_ipow(y, 3)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.000113354 *lens_ipow(y, 4)*lens_ipow(dx, 3)*dy + -1.36793e-06 *lens_ipow(y, 5)*lens_ipow(dx, 3) + 1.93471e-11 *lens_ipow(x, 5)*lens_ipow(y, 3) + -1.22846e-08 *x*lens_ipow(y, 5)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx31 =  + -0.00413318  + -0.00974924 *lambda + 0.431233 *lens_ipow(dy, 2) + 0.153885 *lens_ipow(dx, 2) + 0.0408103 *y*dy + 0.000941182 *lens_ipow(y, 2) + 0.0142816 *x*dx + 0.000336312 *lens_ipow(x, 2) + -0.000393403 *lens_ipow(y, 2)*lens_ipow(dy, 2) + 6.82856e-07 *lens_ipow(y, 4) + 0.0685546 *x*dx*lens_ipow(dy, 4) + 0.0216159 *x*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 7.01251e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2) + 2.71687e-05 *lens_ipow(y, 4)*lens_ipow(dx, 4) + -0.0063168 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -0.000453417 *x*lens_ipow(y, 3)*lens_ipow(dx, 3)*dy + -6.83964e-06 *x*lens_ipow(y, 4)*lens_ipow(dx, 3) + 9.67357e-12 *lens_ipow(x, 6)*lens_ipow(y, 2) + -3.07114e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx32 =  + 7.35646 *dx*dy + 0.30777 *y*dx + 0.297291 *x*dy + 0.0142816 *x*y + -0.000323313 *lens_ipow(x, 3)*dy*lambda + 0.0685546 *x*y*lens_ipow(dy, 4) + 0.0648477 *x*y*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 2.17349e-05 *lens_ipow(y, 5)*lens_ipow(dx, 3) + -0.0063168 *x*lens_ipow(y, 3)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + -0.000340063 *x*lens_ipow(y, 4)*lens_ipow(dx, 2)*dy + -4.10378e-06 *x*lens_ipow(y, 5)*lens_ipow(dx, 2) + -313.735 *dx*lens_ipow(dy, 7)*lambda+0.0f;
const double dx33 =  + 1.18048  + -0.288389 *lambda + 10.6123 *lens_ipow(dy, 2) + 3.67823 *lens_ipow(dx, 2) + 0.862466 *y*dy + 0.0204051 *lens_ipow(y, 2) + 0.297291 *x*dx + 0.00723187 *lens_ipow(x, 2) + -0.000262269 *lens_ipow(y, 3)*dy + -0.000323313 *lens_ipow(x, 3)*dx*lambda + -9.68002e-06 *lens_ipow(x, 4)*lambda + 0.274218 *x*y*dx*lens_ipow(dy, 3) + 0.0432318 *x*y*lens_ipow(dx, 3)*dy + 4.67501e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -0.0042112 *x*lens_ipow(y, 3)*lens_ipow(dx, 3)*dy + -0.000113354 *x*lens_ipow(y, 4)*lens_ipow(dx, 3) + -1098.07 *lens_ipow(dx, 2)*lens_ipow(dy, 6)*lambda + -1.22846e-08 *lens_ipow(x, 2)*lens_ipow(y, 5)*dy*lambda+0.0f;
const double dx34 =  + -0.288389 *dy + -0.00974924 *y + -0.000323313 *lens_ipow(x, 3)*dx*dy + -9.68002e-06 *lens_ipow(x, 4)*dy + -156.868 *lens_ipow(dx, 2)*lens_ipow(dy, 7) + -6.14228e-09 *lens_ipow(x, 2)*lens_ipow(y, 5)*lens_ipow(dy, 2)+0.0f;
const double dx40 =  + 0.00312975 *y*dx*dy + -5.24921e-06 *x*lens_ipow(y, 2) + -6.62563e-07 *lens_ipow(x, 3) + -4.78405 *lens_ipow(dx, 5) + -0.269428 *x*lens_ipow(dx, 4) + 7.62983e-06 *lens_ipow(x, 3)*lens_ipow(dy, 2) + -1.21272e-05 *lens_ipow(x, 4)*dx + -2.76577e-07 *lens_ipow(x, 5) + -1.73841e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dx + -8.63522e-10 *lens_ipow(x, 3)*lens_ipow(y, 4) + -7.80685e-11 *lens_ipow(x, 5)*lens_ipow(y, 2) + 1.59257e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2)*lambda + 7.50477e-07 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -3.28349e-11 *x*lens_ipow(y, 7)*dy + -1.10477e-12 *x*lens_ipow(y, 8)+0.0f;
const double dx41 =  + -0.00053053 *dy + -0.0658286 *lens_ipow(dy, 3) + -4.11723e-06 *lens_ipow(y, 3) + 0.00312975 *x*dx*dy + -5.24921e-06 *lens_ipow(x, 2)*y + -3.52756e-09 *lens_ipow(y, 6)*dy + -1.36567e-10 *lens_ipow(y, 7) + -2.31788e-08 *lens_ipow(x, 3)*lens_ipow(y, 3)*dx + -8.63522e-10 *lens_ipow(x, 4)*lens_ipow(y, 3) + -2.60228e-11 *lens_ipow(x, 6)*y + 1.081e-07 *lens_ipow(y, 5)*lens_ipow(dx, 2)*lambda + 1.06171e-05 *lens_ipow(x, 3)*y*dx*lens_ipow(dy, 2)*lambda + 3.75238e-07 *lens_ipow(x, 4)*y*lens_ipow(dy, 2)*lambda + -1.14922e-10 *lens_ipow(x, 2)*lens_ipow(y, 6)*dy + -4.41908e-12 *lens_ipow(x, 2)*lens_ipow(y, 7)+0.0f;
const double dx42 =  + -2.78996 *dx*lens_ipow(dy, 2) + 0.00312975 *x*y*dy + -289.091 *lens_ipow(dx, 5) + -23.9203 *x*lens_ipow(dx, 4) + -0.538855 *lens_ipow(x, 2)*lens_ipow(dx, 3) + -2.42544e-06 *lens_ipow(x, 5) + -5.79469e-09 *lens_ipow(x, 3)*lens_ipow(y, 4) + 3.60332e-08 *lens_ipow(y, 6)*dx*lambda + 5.30855e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda+0.0f;
const double dx43 =  + -0.00053053 *y + -5.87408 *lens_ipow(dy, 3) + -2.78996 *lens_ipow(dx, 2)*dy + -0.197486 *y*lens_ipow(dy, 2) + 0.00312975 *x*y*dx + 3.81491e-06 *lens_ipow(x, 4)*dy + -5.03937e-10 *lens_ipow(y, 7) + 1.06171e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*dy*lambda + 3.75238e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*dy*lambda + -1.64174e-11 *lens_ipow(x, 2)*lens_ipow(y, 7)+0.0f;
const double dx44 =  + 0.741361  + -2.05431 *lambda + 1.50255 *lens_ipow(lambda, 2) + 1.80166e-08 *lens_ipow(y, 6)*lens_ipow(dx, 2) + 5.30855e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + 1.87619e-07 *lens_ipow(x, 4)*lens_ipow(y, 2)*lens_ipow(dy, 2)+0.0f;
} break;

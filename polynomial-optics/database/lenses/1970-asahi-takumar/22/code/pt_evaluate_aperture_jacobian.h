case asahi__takumar__1970__22mm:
{
const double dx00 =  + 0.586679  + 0.0122911 *lambda + 0.696488 *lens_ipow(dy, 2) + 1.85087 *lens_ipow(dx, 2) + 0.0685757 *y*dy + 0.00121114 *lens_ipow(y, 2) + 0.197647 *x*dx + 0.0036369 *lens_ipow(x, 2) + 0.000212564 *lens_ipow(x, 2)*lambda + -2.04168e-06 *lens_ipow(x, 4) + 0.000701882 *lens_ipow(y, 2)*lens_ipow(dy, 2)*lambda + -2.32928e-09 *lens_ipow(y, 6) + -0.000226993 *x*lens_ipow(y, 2)*lens_ipow(dx, 3) + 2.96789e-05 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dy, 2) + 1.42053e-06 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy + -9.0991e-05 *lens_ipow(x, 3)*y*dx*dy + 3.96762e-05 *lens_ipow(x, 4)*lens_ipow(dy, 2) + -0.00115964 *lens_ipow(x, 2)*y*lens_ipow(dx, 2)*dy*lambda + -0.00603521 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lens_ipow(lambda, 6) + -1.13079e-10 *lens_ipow(x, 8)*lens_ipow(dx, 2)+0.0f;
const double dx01 =  + 1.18214 *dx*dy + 0.0623258 *y*dx + 0.0685757 *x*dy + 0.00242228 *x*y + -0.00325992 *lens_ipow(y, 2)*dx*dy + -0.000110574 *lens_ipow(y, 3)*dx + 0.00140376 *x*y*lens_ipow(dy, 2)*lambda + -1.39757e-08 *x*lens_ipow(y, 5) + -0.000226993 *lens_ipow(x, 2)*y*lens_ipow(dx, 3) + 1.97859e-05 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + 1.42053e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + -2.27477e-05 *lens_ipow(x, 4)*dx*dy + -0.000386548 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy*lambda+0.0f;
const double dx02 =  + 23.0154  + 0.370786 *lens_ipow(lambda, 2) + 4.63789 *lens_ipow(dy, 2) + 13.9642 *lens_ipow(dx, 2) + 1.18214 *y*dy + 0.0311629 *lens_ipow(y, 2) + 3.70175 *x*dx + 0.0988237 *lens_ipow(x, 2) + -0.00108664 *lens_ipow(y, 3)*dy + -2.76434e-05 *lens_ipow(y, 4) + -0.00034049 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2) + -2.27477e-05 *lens_ipow(x, 4)*y*dy + -0.000773095 *lens_ipow(x, 3)*y*dx*dy*lambda + -2.51287e-11 *lens_ipow(x, 9)*dx+0.0f;
const double dx03 =  + 9.27579 *dx*dy + 1.18214 *y*dx + 1.39298 *x*dy + 0.0685757 *x*y + -0.00108664 *lens_ipow(y, 3)*dx + 0.00140376 *x*lens_ipow(y, 2)*dy*lambda + 1.97859e-05 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 4.73509e-07 *lens_ipow(x, 3)*lens_ipow(y, 3) + -2.27477e-05 *lens_ipow(x, 4)*y*dx + 1.58705e-05 *lens_ipow(x, 5)*dy + -0.000386548 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lambda + -0.00402347 *lens_ipow(x, 3)*dy*lens_ipow(lambda, 6)+0.0f;
const double dx04 =  + 0.0122911 *x + 0.741572 *dx*lambda + 7.08548e-05 *lens_ipow(x, 3) + 0.000701882 *x*lens_ipow(y, 2)*lens_ipow(dy, 2) + -0.000386548 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*dy + -0.0120704 *lens_ipow(x, 3)*lens_ipow(dy, 2)*lens_ipow(lambda, 5)+0.0f;
const double dx10 =  + 1.13719 *dx*dy + 0.0644392 *y*dx + 0.0604363 *x*dy + 0.00238551 *x*y + -0.00138992 *lens_ipow(y, 2)*dx*dy + 4.98425e-05 *lens_ipow(y, 3)*dx + 8.72054e-05 *lens_ipow(x, 2)*y*dx + -0.0392615 *y*lens_ipow(dx, 3)*lambda + 0.00151814 *x*y*lens_ipow(dy, 2)*lambda + 1.87393e-05 *lens_ipow(x, 3)*y*lens_ipow(dy, 2) + 4.44757e-08 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx*lens_ipow(dy, 2) + 4.34563e-08 *lens_ipow(x, 5)*lens_ipow(y, 2)*lens_ipow(dx, 2)*dy+0.0f;
const double dx11 =  + 0.585689  + 0.0162423 *lambda + 1.83358 *lens_ipow(dy, 2) + 0.619339 *lens_ipow(dx, 2) + 0.195188 *y*dy + 0.00357575 *lens_ipow(y, 2) + 0.0644392 *x*dx + 0.00119276 *lens_ipow(x, 2) + 0.00503994 *lens_ipow(y, 2)*lens_ipow(dx, 2) + -0.00277984 *x*y*dx*dy + 0.000149528 *x*lens_ipow(y, 2)*dx + 2.90685e-05 *lens_ipow(x, 3)*dx + -0.0392615 *x*lens_ipow(dx, 3)*lambda + 0.00075907 *lens_ipow(x, 2)*lens_ipow(dy, 2)*lambda + -3.28803e-08 *lens_ipow(y, 6) + 4.68483e-06 *lens_ipow(x, 4)*lens_ipow(dy, 2) + 6.22186e-08 *lens_ipow(y, 6)*lambda + -1.70326 *lens_ipow(dx, 4)*lens_ipow(lambda, 5) + 3.6642e-06 *lens_ipow(y, 5)*dy*lens_ipow(lambda, 3) + 7.62573e-05 *lens_ipow(y, 4)*lens_ipow(dy, 2)*lens_ipow(lambda, 4) + 7.41262e-08 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*lens_ipow(dy, 2) + 1.44854e-08 *lens_ipow(x, 6)*y*lens_ipow(dx, 2)*dy+0.0f;
const double dx12 =  + 9.02417 *dx*dy + 1.23868 *y*dx + 1.13719 *x*dy + 0.0644392 *x*y + 0.00335996 *lens_ipow(y, 3)*dx + -0.00138992 *x*lens_ipow(y, 2)*dy + 4.98425e-05 *x*lens_ipow(y, 3) + 2.90685e-05 *lens_ipow(x, 3)*y + -0.117785 *x*y*lens_ipow(dx, 2)*lambda + -6.81305 *y*lens_ipow(dx, 3)*lens_ipow(lambda, 5) + 1.48252e-08 *lens_ipow(x, 3)*lens_ipow(y, 5)*lens_ipow(dy, 2) + 1.44854e-08 *lens_ipow(x, 6)*lens_ipow(y, 2)*dx*dy+0.0f;
const double dx13 =  + 22.8925  + 0.435732 *lambda + 13.9316 *lens_ipow(dy, 2) + 4.51208 *lens_ipow(dx, 2) + 3.66717 *y*dy + 0.0975939 *lens_ipow(y, 2) + 1.13719 *x*dx + 0.0302182 *lens_ipow(x, 2) + -0.00138992 *x*lens_ipow(y, 2)*dx + 0.00151814 *lens_ipow(x, 2)*y*dy*lambda + 9.36965e-06 *lens_ipow(x, 4)*y*dy + 6.10699e-07 *lens_ipow(y, 6)*lens_ipow(lambda, 3) + 3.05029e-05 *lens_ipow(y, 5)*dy*lens_ipow(lambda, 4) + 2.96505e-08 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx*dy + 7.24271e-09 *lens_ipow(x, 6)*lens_ipow(y, 2)*lens_ipow(dx, 2)+0.0f;
const double dx14 =  + 0.435732 *dy + 0.0162423 *y + -0.0392615 *x*y*lens_ipow(dx, 3) + 0.00075907 *lens_ipow(x, 2)*y*lens_ipow(dy, 2) + 8.88838e-09 *lens_ipow(y, 7) + -8.51632 *y*lens_ipow(dx, 4)*lens_ipow(lambda, 4) + 1.8321e-06 *lens_ipow(y, 6)*dy*lens_ipow(lambda, 2) + 6.10058e-05 *lens_ipow(y, 5)*lens_ipow(dy, 2)*lens_ipow(lambda, 3)+0.0f;
const double dx20 =  + -0.0155887  + -0.0179961 *lens_ipow(lambda, 2) + 0.0640044 *lens_ipow(dy, 2) + 0.173941 *lens_ipow(dx, 2) + 0.00767156 *y*dy + 0.000178341 *lens_ipow(y, 2) + 0.0225731 *x*dx + 0.000523412 *lens_ipow(x, 2) + 0.0167325 *lens_ipow(lambda, 3) + 2.25849e-06 *lens_ipow(y, 3)*dy + -0.000679269 *x*y*dx*dy + -0.000447376 *lens_ipow(x, 2)*lens_ipow(dx, 2) + 0.00119604 *lens_ipow(x, 2)*lens_ipow(dy, 4) + 5.83184e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lambda + 2.0007e-06 *lens_ipow(x, 4)*lens_ipow(dx, 2)*lambda + 0.00169336 *x*lens_ipow(y, 2)*lens_ipow(dx, 3)*lens_ipow(dy, 2) + 0.000301867 *lens_ipow(x, 3)*lens_ipow(dx, 5) + 2.5833e-08 *lens_ipow(x, 6)*lens_ipow(dy, 2) + -4.07224e-07 *lens_ipow(x, 5)*y*lens_ipow(dx, 3)*dy+0.0f;
const double dx21 =  + 0.113469 *dx*dy + 0.00800281 *y*dx + 0.00767156 *x*dy + 0.000356683 *x*y + 6.77547e-06 *x*lens_ipow(y, 2)*dy + -0.000339634 *lens_ipow(x, 2)*dx*dy + -1.27315e-05 *lens_ipow(y, 3)*dx*lambda + -0.00267017 *lens_ipow(y, 2)*dx*lens_ipow(dy, 3) + 3.88789e-06 *lens_ipow(x, 3)*y*lens_ipow(dx, 2)*lambda + 0.00169336 *lens_ipow(x, 2)*y*lens_ipow(dx, 3)*lens_ipow(dy, 2) + -6.78706e-08 *lens_ipow(x, 6)*lens_ipow(dx, 3)*dy+0.0f;
const double dx22 =  + 1.30582  + -0.962147 *lambda + 0.668627 *lens_ipow(lambda, 2) + 1.08121 *lens_ipow(dy, 2) + 3.28303 *lens_ipow(dx, 2) + 0.113469 *y*dy + 0.0040014 *lens_ipow(y, 2) + 0.347883 *x*dx + 0.0112866 *lens_ipow(x, 2) + -0.000339634 *lens_ipow(x, 2)*y*dy + -0.000298251 *lens_ipow(x, 3)*dx + -3.18288e-06 *lens_ipow(y, 4)*lambda + -0.000890058 *lens_ipow(y, 3)*lens_ipow(dy, 3) + 3.88789e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx*lambda + 8.0028e-07 *lens_ipow(x, 5)*dx*lambda + 0.00254004 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 2)*lens_ipow(dy, 2) + 0.000377334 *lens_ipow(x, 4)*lens_ipow(dx, 4) + -2.03612e-07 *lens_ipow(x, 6)*y*lens_ipow(dx, 2)*dy+0.0f;
const double dx23 =  + 2.16243 *dx*dy + 0.113469 *y*dx + 0.128009 *x*dy + 0.00767156 *x*y + 2.25849e-06 *x*lens_ipow(y, 3) + -0.000339634 *lens_ipow(x, 2)*y*dx + -0.00267017 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + 0.00159472 *lens_ipow(x, 3)*lens_ipow(dy, 3) + 0.00169336 *lens_ipow(x, 2)*lens_ipow(y, 2)*lens_ipow(dx, 3)*dy + 7.38087e-09 *lens_ipow(x, 7)*dy + -6.78706e-08 *lens_ipow(x, 6)*y*lens_ipow(dx, 3)+0.0f;
const double dx24 =  + -0.962147 *dx + 1.33725 *dx*lambda + -0.0359921 *x*lambda + 0.0501974 *x*lens_ipow(lambda, 2) + -3.18288e-06 *lens_ipow(y, 4)*dx + 1.94395e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*lens_ipow(dx, 2) + 4.0014e-07 *lens_ipow(x, 5)*lens_ipow(dx, 2)+0.0f;
const double dx30 =  + 0.111168 *dx*dy + 0.00767795 *y*dx + 0.00777631 *x*dy + 0.000347987 *x*y + 5.78389e-06 *lens_ipow(x, 2)*y*dx + 9.73381e-05 *lens_ipow(y, 3)*dx*lens_ipow(dy, 2) + -9.76939e-06 *lens_ipow(x, 2)*lens_ipow(y, 2)*dx*dy + 0.000134082 *lens_ipow(x, 3)*lens_ipow(dx, 2)*dy + 4.412e-09 *lens_ipow(x, 3)*lens_ipow(y, 3) + -1.10708e-07 *x*lens_ipow(y, 4)*dy*lambda + -2.70254e-07 *lens_ipow(x, 5)*dy*lambda + -1.10057e-08 *lens_ipow(y, 6)*dx*dy*lambda + 1.09952e-09 *lens_ipow(x, 7)*dy*lens_ipow(lambda, 2)+0.0f;
const double dx31 =  + -0.0158166  + -0.0112712 *lens_ipow(lambda, 2) + 0.174567 *lens_ipow(dy, 2) + 0.0653023 *lens_ipow(dx, 2) + 0.0230909 *y*dy + 0.000522582 *lens_ipow(y, 2) + 0.00767795 *x*dx + 0.000173993 *lens_ipow(x, 2) + 0.0114241 *lens_ipow(lambda, 4) + 1.92796e-06 *lens_ipow(x, 3)*dx + -0.00332143 *lens_ipow(y, 2)*lens_ipow(dy, 4) + 0.000292014 *x*lens_ipow(y, 2)*dx*lens_ipow(dy, 2) + -6.51293e-06 *lens_ipow(x, 3)*y*dx*dy + 3.309e-09 *lens_ipow(x, 4)*lens_ipow(y, 2) + -0.0368556 *y*lens_ipow(dy, 5)*lambda + -2.21417e-07 *lens_ipow(x, 2)*lens_ipow(y, 3)*dy*lambda + 5.73219e-08 *lens_ipow(y, 6)*lens_ipow(dx, 2)*lambda + -6.60342e-08 *x*lens_ipow(y, 5)*dx*dy*lambda+0.0f;
const double dx32 =  + 2.24151 *dx*dy + 0.130605 *y*dx + 0.111168 *x*dy + 0.00767795 *x*y + 1.92796e-06 *lens_ipow(x, 3)*y + 9.73381e-05 *x*lens_ipow(y, 3)*lens_ipow(dy, 2) + -3.25646e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dy + 6.7041e-05 *lens_ipow(x, 4)*dx*dy + 1.63777e-08 *lens_ipow(y, 7)*dx*lambda + -1.10057e-08 *x*lens_ipow(y, 6)*dy*lambda+0.0f;
const double dx33 =  + 1.30591  + -0.968762 *lambda + 0.674877 *lens_ipow(lambda, 2) + 3.33266 *lens_ipow(dy, 2) + 1.12075 *lens_ipow(dx, 2) + 0.349134 *y*dy + 0.0115454 *lens_ipow(y, 2) + 0.111168 *x*dx + 0.00388816 *lens_ipow(x, 2) + -0.00442857 *lens_ipow(y, 3)*lens_ipow(dy, 3) + 0.000194676 *x*lens_ipow(y, 3)*dx*dy + -3.25646e-06 *lens_ipow(x, 3)*lens_ipow(y, 2)*dx + 3.35205e-05 *lens_ipow(x, 4)*lens_ipow(dx, 2) + -0.092139 *lens_ipow(y, 2)*lens_ipow(dy, 4)*lambda + -5.53542e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*lambda + -4.50424e-08 *lens_ipow(x, 6)*lambda + -1.10057e-08 *x*lens_ipow(y, 6)*dx*lambda + 1.37441e-10 *lens_ipow(x, 8)*lens_ipow(lambda, 2)+0.0f;
const double dx34 =  + -0.968762 *dy + 1.34975 *dy*lambda + -0.0225423 *y*lambda + 0.0456964 *y*lens_ipow(lambda, 3) + -0.0184278 *lens_ipow(y, 2)*lens_ipow(dy, 5) + -5.53542e-08 *lens_ipow(x, 2)*lens_ipow(y, 4)*dy + -4.50424e-08 *lens_ipow(x, 6)*dy + 8.18884e-09 *lens_ipow(y, 7)*lens_ipow(dx, 2) + -1.10057e-08 *x*lens_ipow(y, 6)*dx*dy + 2.74881e-10 *lens_ipow(x, 8)*dy*lambda+0.0f;
const double dx40 =  + -0.00303178 *dx + -0.000136211 *x + -4.23343e-05 *lens_ipow(y, 2)*dx + -8.77243e-05 *x*y*dy + -5.45876e-06 *x*lens_ipow(y, 2) + -2.22151e-06 *lens_ipow(x, 4)*dx + -7.70441e-08 *lens_ipow(x, 5) + -2.95814e-07 *lens_ipow(x, 5)*lens_ipow(dx, 2) + -8.95437e-09 *lens_ipow(x, 6)*dx + -1.5688e-12 *lens_ipow(x, 3)*lens_ipow(y, 6) + -3.3718e-13 *lens_ipow(x, 7)*lens_ipow(y, 2) + 1.85557e-09 *lens_ipow(x, 2)*lens_ipow(y, 5)*dx*dy*lambda+0.0f;
const double dx41 =  + -0.00229118 *dy + -8.14998e-05 *y + -0.000109343 *lens_ipow(y, 2)*dy + -4.56483e-06 *lens_ipow(y, 3) + -8.46685e-05 *x*y*dx + -4.38622e-05 *lens_ipow(x, 2)*dy + -5.45876e-06 *lens_ipow(x, 2)*y + -2.41479e-07 *lens_ipow(y, 5)*lens_ipow(dy, 2) + -1.63011e-08 *lens_ipow(y, 6)*dy + -2.88547e-10 *lens_ipow(y, 7) + -2.3532e-12 *lens_ipow(x, 4)*lens_ipow(y, 5) + -8.4295e-14 *lens_ipow(x, 8)*y + 3.09262e-09 *lens_ipow(x, 3)*lens_ipow(y, 4)*dx*dy*lambda+0.0f;
const double dx42 =  + -0.0600883 *dx + -0.00303178 *x + -1.71012 *dx*lens_ipow(dy, 2) + -1.32145 *lens_ipow(dx, 3) + -4.23343e-05 *x*lens_ipow(y, 2) + -4.44301e-07 *lens_ipow(x, 5) + -9.86046e-08 *lens_ipow(x, 6)*dx + -1.2792e-09 *lens_ipow(x, 7) + 6.18524e-10 *lens_ipow(x, 3)*lens_ipow(y, 5)*dy*lambda+0.0f;
const double dx43 =  + -0.0524756 *dy + -0.00229118 *y + -1.45248 *lens_ipow(dy, 3) + -1.71012 *lens_ipow(dx, 2)*dy + -3.64476e-05 *lens_ipow(y, 3) + -4.38622e-05 *lens_ipow(x, 2)*y + -8.04931e-08 *lens_ipow(y, 6)*dy + -2.32873e-09 *lens_ipow(y, 7) + 6.18524e-10 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx*lambda+0.0f;
const double dx44 =  + 0.824022  + -2.27079 *lambda + 1.65265 *lens_ipow(lambda, 2) + 6.18524e-10 *lens_ipow(x, 3)*lens_ipow(y, 5)*dx*dy+0.0f;
} break;
